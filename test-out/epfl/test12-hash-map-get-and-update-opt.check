/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdateOpt extends ((Int)=>(Unit)) {
def apply(x231:Int): Unit = {
val x232 = new HashMap[Int,Int](200)
val x233 = x232.table
val x235 = x232.size
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x18 = ((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt
val x241 = x18 & ((x233.length) - 1)
var x243:Entry[Int, Int] = (x233(x241))
if (((x243) == null)) {
val x247 = new Entry(1, 2)
x233(x241) = x247
val x249 = x235 + 1
x232.size = x249
()
} else {
while ({
(if (((x243).hasNext)) {

(((x243).key) != 1)
} else false
)
}) {
x243 = ((x243).next)
()
}
val x266 = x243
if (((x266.key) == 1)) {
x266.value = 2
()
} else {
val x272 = new Entry(1, 2)
x266.next = x272
val x249 = x235 + 1
x232.size = x249
()
}
()
}
x232.resize()
val x282 = x232.table
val x64 = (2.hashCode).toLong
val x68 = ((x64 >>> 20) ^ (x64 >>> 12)) ^ x64
val x285 = (((x68 ^ (x68 >>> 7)) ^ (x68 >>> 4)).toInt) & ((x282.length) - 1)
var x287:Entry[Int, Int] = (x282(x285))
if (((x287) == null)) {
val x290 = new Entry(2, 3)
x282(x285) = x290
x232.size = ((x232.size) + 1)
()
} else {
while ({
(if (((x287).hasNext)) {

(((x287).key) != 2)
} else false
)
}) {
x287 = ((x287).next)
()
}
val x310 = x287
if (((x310.key) == 2)) {
x310.value = 3
()
} else {
val x316 = new Entry(2, 3)
x310.next = x316
x232.size = ((x232.size) + 1)
()
}
()
}
x232.resize()
val x329 = x232.table
var x334:Entry[Int, Int] = (x329((x18 & ((x329.length) - 1))))
val x359 = if (((x334) == null)) {
val x127 = None
x127
} else {
while ({
(if (((x334).hasNext)) {

(((x334).key) != 1)
} else false
)
}) {
x334 = ((x334).next)
()
}
val x351 = x334
(if (((x351.key) == 1)) {
while ({
(if (((x334).hasNext)) {

(((x334).key) != 1)
} else false
)
}) {
x334 = ((x334).next)
()
}
val x351 = x334
(Some((x351.value)))
} else {
val x127 = None
x127
})
}
val x360 = x359.get
val x364 = x18 & ((x329.length) - 1)
var x366:Entry[Int, Int] = (x329(x364))
if (((x366) == null)) {
val x361 = x360 + 1
val x369 = new Entry(1, x361)
x329(x364) = x369
x232.size = ((x232.size) + 1)
()
} else {
while ({
(if (((x366).hasNext)) {

(((x366).key) != 1)
} else false
)
}) {
x366 = ((x366).next)
()
}
val x389 = x366
if (((x389.key) == 1)) {
val x361 = x360 + 1
x389.value = x361
()
} else {
val x361 = x360 + 1
val x395 = new Entry(1, x361)
x389.next = x395
x232.size = ((x232.size) + 1)
()
}
()
}
x232.resize()
val x408 = x232.table
var x413:Entry[Int, Int] = (x408((x18 & ((x408.length) - 1))))
val x438 = if (((x413) == null)) {
val x127 = None
x127
} else {
while ({
(if (((x413).hasNext)) {

(((x413).key) != 1)
} else false
)
}) {
x413 = ((x413).next)
()
}
val x430 = x413
(if (((x430.key) == 1)) {
while ({
(if (((x413).hasNext)) {

(((x413).key) != 1)
} else false
)
}) {
x413 = ((x413).next)
()
}
val x430 = x413
(Some((x430.value)))
} else {
val x127 = None
x127
})
}
println(x438)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
