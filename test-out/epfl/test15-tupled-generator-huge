promoting to effect: Sym(14)=Reflect(K3Contains(Sym(10),Sym(4)),Summary(false,false,false,false,false,List(Sym(10)),List(Sym(10)),List(),List()),List(Sym(10)))
depends on  Sym(10)
promoting to effect: Sym(15)=Reflect(K3Lookup(Sym(10),Sym(4)),Summary(false,false,false,false,false,List(Sym(10)),List(Sym(10)),List(),List()),List(Sym(10)))
depends on  Sym(10)
promoting to effect: Sym(17)=Reflect(IfThenElse(Sym(14),Block(Sym(16)),Block(Const(0.0))),Summary(false,false,false,false,false,List(Sym(10)),List(),List(),List()),List(Sym(10)))
depends on  Sym(10)
promoting to effect: Sym(20)=Reflect(SvGet(Sym(11)),Summary(false,false,false,false,false,List(Sym(11)),List(Sym(11)),List(),List()),List(Sym(11)))
depends on  Sym(11)
promoting to effect: Sym(23)=Reflect(K3Contains(Sym(12),Sym(4)),Summary(false,false,false,false,false,List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12)))
depends on  Sym(12)
promoting to effect: Sym(24)=Reflect(K3Lookup(Sym(12),Sym(4)),Summary(false,false,false,false,false,List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12)))
depends on  Sym(12)
promoting to effect: Sym(26)=Reflect(IfThenElse(Sym(23),Block(Sym(25)),Block(Const(0.0))),Summary(false,false,false,false,false,List(Sym(12)),List(),List(),List()),List(Sym(12)))
depends on  Sym(12)
promoting to effect: Sym(29)=Reflect(SvGet(Sym(9)),Summary(false,false,false,false,false,List(Sym(9)),List(Sym(9)),List(),List()),List(Sym(9)))
depends on  Sym(9)
promoting to effect: Sym(30)=Reflect(SvGet(Sym(11)),Summary(false,false,false,false,false,List(Sym(11)),List(Sym(11)),List(),List()),List(Sym(11), Sym(22)))
depends on  Sym(11)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class VWAPonInsertBIDS extends ((Double, Long, Long, Double, Double, org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double], org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double])=>(Unit)) {
def apply(x0:Double, x1:Long, x2:Long, x3:Double, x4:Double, x5:org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], x6:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double], x7:org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], x8:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double]): Unit = {
val x9 = x5 // mutable SimpleVal
val x10 = x6 // mutable K3PersistentCollection
val x11 = x7 // mutable SimpleVal
val x12 = x8 // mutable K3PersistentCollection
x10.updateValue(x4,((if ((x10.contains(x4))) {
(x10.lookup(x4,0))
} else {
0.0
}) + (x4 * x3)))
x11.update(((x11.get()) + x3))
x12.updateValue(x4,((if ((x12.contains(x4))) {
(x12.lookup(x4,0))
} else {
0.0
}) + x3))
var x33:Double = 0.0
val x31 = (x11.get()) * 0.25
x10.foreach{
x35 => 
var x42:Double = 0.0
val x36 = x35._1
x12.foreach{
x43 => 
x42 = ((x42) + ((x43._2) * (if ((x36 < (x43._1))) {
1.0
} else {
0.0
})))
}
x33 = ((x33) + (((1L * (x35._2)) * 1L) * (if (((x42) < x31)) {
1.0
} else {
0.0
})))
}
x9.update((0.0 + (x33)))
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
promoting to effect: Sym(91)=Reflect(K3Contains(Sym(86),Sym(80)),Summary(false,false,false,false,false,List(Sym(86)),List(Sym(86)),List(),List()),List(Sym(86)))
depends on  Sym(86)
promoting to effect: Sym(92)=Reflect(K3Lookup(Sym(86),Sym(80)),Summary(false,false,false,false,false,List(Sym(86)),List(Sym(86)),List(),List()),List(Sym(86)))
depends on  Sym(86)
promoting to effect: Sym(94)=Reflect(IfThenElse(Sym(91),Block(Sym(93)),Block(Const(0.0))),Summary(false,false,false,false,false,List(Sym(86)),List(),List(),List()),List(Sym(86)))
depends on  Sym(86)
promoting to effect: Sym(97)=Reflect(SvGet(Sym(87)),Summary(false,false,false,false,false,List(Sym(87)),List(Sym(87)),List(),List()),List(Sym(87)))
depends on  Sym(87)
promoting to effect: Sym(101)=Reflect(K3Contains(Sym(88),Sym(80)),Summary(false,false,false,false,false,List(Sym(88)),List(Sym(88)),List(),List()),List(Sym(88)))
depends on  Sym(88)
promoting to effect: Sym(102)=Reflect(K3Lookup(Sym(88),Sym(80)),Summary(false,false,false,false,false,List(Sym(88)),List(Sym(88)),List(),List()),List(Sym(88)))
depends on  Sym(88)
promoting to effect: Sym(104)=Reflect(IfThenElse(Sym(101),Block(Sym(103)),Block(Const(0.0))),Summary(false,false,false,false,false,List(Sym(88)),List(),List(),List()),List(Sym(88)))
depends on  Sym(88)
promoting to effect: Sym(107)=Reflect(SvGet(Sym(85)),Summary(false,false,false,false,false,List(Sym(85)),List(Sym(85)),List(),List()),List(Sym(85)))
depends on  Sym(85)
promoting to effect: Sym(108)=Reflect(SvGet(Sym(87)),Summary(false,false,false,false,false,List(Sym(87)),List(Sym(87)),List(),List()),List(Sym(87), Sym(100)))
depends on  Sym(87)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class VWAPonDeleteBIDS extends ((Double, Long, Long, Double, Double, org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double], org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double])=>(Unit)) {
def apply(x76:Double, x77:Long, x78:Long, x79:Double, x80:Double, x81:org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], x82:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double], x83:org.dbtoaster.dbtoasterlib.K3Collection.SimpleVal[Double], x84:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Double, Double]): Unit = {
val x85 = x81 // mutable SimpleVal
val x86 = x82 // mutable K3PersistentCollection
val x87 = x83 // mutable SimpleVal
val x88 = x84 // mutable K3PersistentCollection
x86.updateValue(x80,((if ((x86.contains(x80))) {
(x86.lookup(x80,0))
} else {
0.0
}) + ((-1L * x80) * x79)))
val x98 = -1L * x79
x87.update(((x87.get()) + x98))
x88.updateValue(x80,((if ((x88.contains(x80))) {
(x88.lookup(x80,0))
} else {
0.0
}) + x98))
var x111:Double = 0.0
val x109 = (x87.get()) * 0.25
x86.foreach{
x113 => 
var x120:Double = 0.0
val x114 = x113._1
x88.foreach{
x121 => 
x120 = ((x120) + ((x121._2) * (if ((x114 < (x121._1))) {
1.0
} else {
0.0
})))
}
x111 = ((x111) + (((1L * (x113._2)) * 1L) * (if (((x120) < x109)) {
1.0
} else {
0.0
})))
}
x85.update((0.0 + (x111)))
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
