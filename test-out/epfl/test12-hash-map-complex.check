/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapComplex extends ((Int)=>(Unit)) {
def apply(x980:Int): Unit = {
val x981 = new HashMap[Int,Int](1)
val x982 = x981.table
val x983 = x982(0)
val x984 = x981.size
val x985 = x981.loadFactor
val x986 = x981.MAXIMUM_CAPACITY
val x987 = x981.threshold
val x988 = x982.length
val x8 = 1.hashCode
val x9 = x8.toLong
val x10 = x9 >>> 20
val x11 = x9 >>> 12
val x12 = x10 ^ x11
val x13 = x12 ^ x9
val x14 = x13 >>> 7
val x15 = x13 ^ x14
val x16 = x13 >>> 4
val x17 = x15 ^ x16
val x18 = x17.toInt
val x989 = x988 - 1
val x990 = x18 & x989
val x991 = x982(x990)
var x992: Entry[Int, Int] = x991
val x994 = x992
val x995 = x994 == null
val x998 = x984 + 1
if (x995) {
val x996 = new Entry(1, 2)
x982(x990) = x996
x981.size = x998

} else {
while ({
val x1001 = x992
val x1002 = x1001.hasNext
val x1008 = if (x1002) {
val x1003 = x992
val x1004 = x1003.key
val x1005 = x1004 != 1

x1005
} else false

x1008
}) {
val x1010 = x992
val x1011 = x1010.next
x992 = x1011
()
}
val x1015 = x992
val x1016 = x1015.key
val x1017 = x1016 == 1
if (x1017) {
val x1018 = x1015.value
x1015.value = 2

} else {
val x1021 = new Entry(1, 2)
val x1022 = x1015.next
val x1023 = x1015.hasNext
x1015.next = x1021
x981.size = x998

}

}
val x1030 = x981.size
val x1031 = x1030 >= x987
val x64 = scala.Int.MaxValue
if (x1031) {
val x1032 = x982.length
val x1033 = x1032 == x986
if (x1033) {
x981.threshold = x64

} else {
val x1036 = 2 * x1032
val x1037 = new Array[Entry[Int, Int]](x1036)
var x1038: Int = 0
val x1066 = x1036 - 1
while ({
val x1039 = x1038
val x1040 = x982.length
val x1041 = x1039 < x1040
x1041
}) {
val x1043 = x1038
val x1044 = x982(x1043)
var x1045: Entry[Int, Int] = x1044
val x1047 = x1045
val x1048 = x1047 != null
if (x1048) {
x982(x1043) = null
while ({
val x1050 = x1045
val x1051 = x1050 != null
x1051
}) {
val x1053 = x1045
val x1054 = x1053.key
val x1068 = x1053.next
val x1055 = x1054.hashCode
val x1056 = x1055.toLong
val x1057 = x1056 >>> 20
val x1058 = x1056 >>> 12
val x1059 = x1057 ^ x1058
val x1060 = x1059 ^ x1056
val x1061 = x1060 >>> 7
val x1062 = x1060 ^ x1061
val x1063 = x1060 >>> 4
val x1064 = x1062 ^ x1063
val x1065 = x1064.toInt
val x1067 = x1065 & x1066
val x1069 = x1037(x1067)
val x1070 = x1053.hasNext
x1053.next = x1069
x1037(x1067) = x1053
x1045 = x1068
()
}

} else {
()
}
val x1078 = x1043 + 1
x1038 = x1078
()
}
x981.table = x1037
val x1083 = x985 * x1036
val x1084 = x1083.asInstanceOf[Int]
x981.threshold = x1084

}

} else {
()
}
val x1090 = x981.table
val x1091 = x1090.length
val x123 = 2.hashCode
val x124 = x123.toLong
val x125 = x124 >>> 20
val x126 = x124 >>> 12
val x127 = x125 ^ x126
val x128 = x127 ^ x124
val x129 = x128 >>> 7
val x130 = x128 ^ x129
val x131 = x128 >>> 4
val x132 = x130 ^ x131
val x133 = x132.toInt
val x1092 = x1091 - 1
val x1093 = x133 & x1092
val x1094 = x1090(x1093)
var x1095: Entry[Int, Int] = x1094
val x1096 = x1095
val x1097 = x1096 == null
val x1100 = x1030 + 1
if (x1097) {
val x1098 = new Entry(2, 3)
x1090(x1093) = x1098
x981.size = x1100

} else {
while ({
val x1103 = x1095
val x1104 = x1103.hasNext
val x1110 = if (x1104) {
val x1105 = x1095
val x1106 = x1105.key
val x1107 = x1106 != 2

x1107
} else false

x1110
}) {
val x1112 = x1095
val x1113 = x1112.next
x1095 = x1113
()
}
val x1117 = x1095
val x1118 = x1117.key
val x1119 = x1118 == 2
if (x1119) {
val x1120 = x1117.value
x1117.value = 3

} else {
val x1123 = new Entry(2, 3)
val x1124 = x1117.next
val x1125 = x1117.hasNext
x1117.next = x1123
x981.size = x1100

}

}
val x1132 = x981.threshold
val x1133 = x981.size
val x1134 = x1133 >= x1132
if (x1134) {
val x1135 = x1090.length
val x1136 = x1135 == x986
if (x1136) {
x981.threshold = x64

} else {
val x1139 = 2 * x1135
val x1140 = new Array[Entry[Int, Int]](x1139)
var x1141: Int = 0
val x1169 = x1139 - 1
while ({
val x1142 = x1141
val x1143 = x1090.length
val x1144 = x1142 < x1143
x1144
}) {
val x1146 = x1141
val x1147 = x1090(x1146)
var x1148: Entry[Int, Int] = x1147
val x1150 = x1148
val x1151 = x1150 != null
if (x1151) {
x1090(x1146) = null
while ({
val x1153 = x1148
val x1154 = x1153 != null
x1154
}) {
val x1156 = x1148
val x1157 = x1156.key
val x1171 = x1156.next
val x1158 = x1157.hashCode
val x1159 = x1158.toLong
val x1160 = x1159 >>> 20
val x1161 = x1159 >>> 12
val x1162 = x1160 ^ x1161
val x1163 = x1162 ^ x1159
val x1164 = x1163 >>> 7
val x1165 = x1163 ^ x1164
val x1166 = x1163 >>> 4
val x1167 = x1165 ^ x1166
val x1168 = x1167.toInt
val x1170 = x1168 & x1169
val x1172 = x1140(x1170)
val x1173 = x1156.hasNext
x1156.next = x1172
x1140(x1170) = x1156
x1148 = x1171
()
}

} else {
()
}
val x1181 = x1146 + 1
x1141 = x1181
()
}
x981.table = x1140
val x1186 = x985 * x1139
val x1187 = x1186.asInstanceOf[Int]
x981.threshold = x1187

}

} else {
()
}
val x1193 = x981.table
val x1194 = x1193.length
val x1195 = x1194 - 1
val x1196 = x18 & x1195
val x1197 = x1193(x1196)
var x1198: Entry[Int, Int] = x1197
val x1199 = x1198
val x1200 = x1199 == null
val x243 = None
val x1223 = if (x1200) {
x243
} else {
while ({
val x1201 = x1198
val x1202 = x1201.hasNext
val x1208 = if (x1202) {
val x1203 = x1198
val x1204 = x1203.key
val x1205 = x1204 != 1

x1205
} else false

x1208
}) {
val x1210 = x1198
val x1211 = x1210.next
x1198 = x1211
()
}
val x1215 = x1198
val x1216 = x1215.key
val x1217 = x1216 == 1
val x1221 = if (x1217) {
val x1218 = x1215.value
val x1219 = Some(x1218)
x1219
} else {
x243
}
x1221
}
val x1224 = x1223.get
val x1226 = x1193.length
val x1227 = x1226 - 1
val x1228 = x18 & x1227
val x1229 = x1193(x1228)
var x1230: Entry[Int, Int] = x1229
val x1231 = x1230
val x1232 = x1231 == null
val x1225 = x1224 + 1
val x1235 = x1133 + 1
if (x1232) {
val x1233 = new Entry(1, x1225)
x1193(x1228) = x1233
x981.size = x1235

} else {
while ({
val x1238 = x1230
val x1239 = x1238.hasNext
val x1245 = if (x1239) {
val x1240 = x1230
val x1241 = x1240.key
val x1242 = x1241 != 1

x1242
} else false

x1245
}) {
val x1247 = x1230
val x1248 = x1247.next
x1230 = x1248
()
}
val x1252 = x1230
val x1253 = x1252.key
val x1254 = x1253 == 1
if (x1254) {
val x1255 = x1252.value
x1252.value = x1225

} else {
val x1258 = new Entry(1, x1225)
val x1259 = x1252.next
val x1260 = x1252.hasNext
x1252.next = x1258
x981.size = x1235

}

}
val x1267 = x981.threshold
val x1268 = x981.size
val x1269 = x1268 >= x1267
if (x1269) {
val x1270 = x1193.length
val x1271 = x1270 == x986
if (x1271) {
x981.threshold = x64

} else {
val x1274 = 2 * x1270
val x1275 = new Array[Entry[Int, Int]](x1274)
var x1276: Int = 0
val x1304 = x1274 - 1
while ({
val x1277 = x1276
val x1278 = x1193.length
val x1279 = x1277 < x1278
x1279
}) {
val x1281 = x1276
val x1282 = x1193(x1281)
var x1283: Entry[Int, Int] = x1282
val x1285 = x1283
val x1286 = x1285 != null
if (x1286) {
x1193(x1281) = null
while ({
val x1288 = x1283
val x1289 = x1288 != null
x1289
}) {
val x1291 = x1283
val x1292 = x1291.key
val x1306 = x1291.next
val x1293 = x1292.hashCode
val x1294 = x1293.toLong
val x1295 = x1294 >>> 20
val x1296 = x1294 >>> 12
val x1297 = x1295 ^ x1296
val x1298 = x1297 ^ x1294
val x1299 = x1298 >>> 7
val x1300 = x1298 ^ x1299
val x1301 = x1298 >>> 4
val x1302 = x1300 ^ x1301
val x1303 = x1302.toInt
val x1305 = x1303 & x1304
val x1307 = x1275(x1305)
val x1308 = x1291.hasNext
x1291.next = x1307
x1275(x1305) = x1291
x1283 = x1306
()
}

} else {
()
}
val x1316 = x1281 + 1
x1276 = x1316
()
}
x981.table = x1275
val x1321 = x985 * x1274
val x1322 = x1321.asInstanceOf[Int]
x981.threshold = x1322

}

} else {
()
}
val x1328 = x981.table
var x1329: Int = 0
val x373 = null.asInstanceOf[Entry[Int, Int]]
var x1330: Entry[Int, Int] = x373
while ({
val x1331 = x1329
val x1332 = x1328.length
val x1333 = x1331 < x1332
x1333
}) {
val x1335 = x1329
val x1336 = x1328(x1335)
val x1337 = x1336 != null
if (x1337) {
x1330 = x1336
println(x1336)
while ({
val x1340 = x1330
val x1341 = x1340.hasNext
x1341
}) {
val x1343 = x1330
val x1344 = x1343.next
x1330 = x1344
val x1346 = x1330
println(x1346)

}

} else {
()
}
val x1352 = x1335 + 1
x1329 = x1352
()
}
var x1356: Int = 0
var x1357: Entry[Int, Int] = x373
while ({
val x1358 = x1356
val x1359 = x1328.length
val x1360 = x1358 < x1359
x1360
}) {
val x1362 = x1356
val x1363 = x1328(x1362)
val x1364 = x1363 != null
if (x1364) {
x1357 = x1363
val x1366 = x1363.key
val x1367 = x981.table
val x1368 = x1367.length
val x1369 = x1366.hashCode
val x1370 = x1369.toLong
val x1371 = x1370 >>> 20
val x1372 = x1370 >>> 12
val x1373 = x1371 ^ x1372
val x1374 = x1373 ^ x1370
val x1375 = x1374 >>> 7
val x1376 = x1374 ^ x1375
val x1377 = x1374 >>> 4
val x1378 = x1376 ^ x1377
val x1379 = x1378.toInt
val x1380 = x1368 - 1
val x1381 = x1379 & x1380
val x1382 = x1367(x1381)
var x1383: Entry[Int, Int] = x1382
val x1385 = x1383
val x1386 = x1385 == null
if (x1386) {
val x1387 = new Entry(x1366, 0)
x1367(x1381) = x1387
val x1389 = x981.size
val x1390 = x1389 + 1
x981.size = x1390

} else {
while ({
val x1393 = x1383
val x1394 = x1393.hasNext
val x1400 = if (x1394) {
val x1395 = x1383
val x1396 = x1395.key
val x1397 = x1396 != x1366

x1397
} else false

x1400
}) {
val x1402 = x1383
val x1403 = x1402.next
x1383 = x1403
()
}
val x1407 = x1383
val x1408 = x1407.key
val x1409 = x1408 == x1366
if (x1409) {
val x1410 = x1407.value
x1407.value = 0

} else {
val x1413 = new Entry(x1366, 0)
val x1414 = x1407.next
val x1415 = x1407.hasNext
x1407.next = x1413
val x1417 = x981.size
val x1418 = x1417 + 1
x981.size = x1418

}

}
val x1424 = x981.threshold
val x1425 = x981.MAXIMUM_CAPACITY
val x1426 = x981.size
val x1427 = x1426 >= x1424
if (x1427) {
val x1428 = x1367.length
val x1429 = x1428 == x1425
if (x1429) {
x981.threshold = x64

} else {
val x1432 = 2 * x1428
val x1433 = new Array[Entry[Int, Int]](x1432)
var x1434: Int = 0
val x1462 = x1432 - 1
while ({
val x1435 = x1434
val x1436 = x1367.length
val x1437 = x1435 < x1436
x1437
}) {
val x1439 = x1434
val x1440 = x1367(x1439)
var x1441: Entry[Int, Int] = x1440
val x1443 = x1441
val x1444 = x1443 != null
if (x1444) {
x1367(x1439) = null
while ({
val x1446 = x1441
val x1447 = x1446 != null
x1447
}) {
val x1449 = x1441
val x1450 = x1449.key
val x1464 = x1449.next
val x1451 = x1450.hashCode
val x1452 = x1451.toLong
val x1453 = x1452 >>> 20
val x1454 = x1452 >>> 12
val x1455 = x1453 ^ x1454
val x1456 = x1455 ^ x1452
val x1457 = x1456 >>> 7
val x1458 = x1456 ^ x1457
val x1459 = x1456 >>> 4
val x1460 = x1458 ^ x1459
val x1461 = x1460.toInt
val x1463 = x1461 & x1462
val x1465 = x1433(x1463)
val x1466 = x1449.hasNext
x1449.next = x1465
x1433(x1463) = x1449
x1441 = x1464
()
}

} else {
()
}
val x1474 = x1439 + 1
x1434 = x1474
()
}
x981.table = x1433
val x1479 = x981.loadFactor
val x1480 = x1479 * x1432
val x1481 = x1480.asInstanceOf[Int]
x981.threshold = x1481

}

} else {
()
}
while ({
val x1487 = x1357
val x1488 = x1487.hasNext
x1488
}) {
val x1490 = x1357
val x1491 = x1490.next
x1357 = x1491
val x1493 = x1357
val x1494 = x1493.key
val x1495 = x981.table
val x1496 = x1495.length
val x1497 = x1494.hashCode
val x1498 = x1497.toLong
val x1499 = x1498 >>> 20
val x1500 = x1498 >>> 12
val x1501 = x1499 ^ x1500
val x1502 = x1501 ^ x1498
val x1503 = x1502 >>> 7
val x1504 = x1502 ^ x1503
val x1505 = x1502 >>> 4
val x1506 = x1504 ^ x1505
val x1507 = x1506.toInt
val x1508 = x1496 - 1
val x1509 = x1507 & x1508
val x1510 = x1495(x1509)
var x1511: Entry[Int, Int] = x1510
val x1513 = x1511
val x1514 = x1513 == null
if (x1514) {
val x1515 = new Entry(x1494, 0)
x1495(x1509) = x1515
val x1517 = x981.size
val x1518 = x1517 + 1
x981.size = x1518

} else {
while ({
val x1521 = x1511
val x1522 = x1521.hasNext
val x1528 = if (x1522) {
val x1523 = x1511
val x1524 = x1523.key
val x1525 = x1524 != x1494

x1525
} else false

x1528
}) {
val x1530 = x1511
val x1531 = x1530.next
x1511 = x1531
()
}
val x1535 = x1511
val x1536 = x1535.key
val x1537 = x1536 == x1494
if (x1537) {
val x1538 = x1535.value
x1535.value = 0

} else {
val x1541 = new Entry(x1494, 0)
val x1542 = x1535.next
val x1543 = x1535.hasNext
x1535.next = x1541
val x1545 = x981.size
val x1546 = x1545 + 1
x981.size = x1546

}

}
val x1552 = x981.threshold
val x1553 = x981.MAXIMUM_CAPACITY
val x1554 = x981.size
val x1555 = x1554 >= x1552
if (x1555) {
val x1556 = x1495.length
val x1557 = x1556 == x1553
if (x1557) {
x981.threshold = x64

} else {
val x1560 = 2 * x1556
val x1561 = new Array[Entry[Int, Int]](x1560)
var x1562: Int = 0
val x1590 = x1560 - 1
while ({
val x1563 = x1562
val x1564 = x1495.length
val x1565 = x1563 < x1564
x1565
}) {
val x1567 = x1562
val x1568 = x1495(x1567)
var x1569: Entry[Int, Int] = x1568
val x1571 = x1569
val x1572 = x1571 != null
if (x1572) {
x1495(x1567) = null
while ({
val x1574 = x1569
val x1575 = x1574 != null
x1575
}) {
val x1577 = x1569
val x1578 = x1577.key
val x1592 = x1577.next
val x1579 = x1578.hashCode
val x1580 = x1579.toLong
val x1581 = x1580 >>> 20
val x1582 = x1580 >>> 12
val x1583 = x1581 ^ x1582
val x1584 = x1583 ^ x1580
val x1585 = x1584 >>> 7
val x1586 = x1584 ^ x1585
val x1587 = x1584 >>> 4
val x1588 = x1586 ^ x1587
val x1589 = x1588.toInt
val x1591 = x1589 & x1590
val x1593 = x1561(x1591)
val x1594 = x1577.hasNext
x1577.next = x1593
x1561(x1591) = x1577
x1569 = x1592
()
}

} else {
()
}
val x1602 = x1567 + 1
x1562 = x1602
()
}
x981.table = x1561
val x1607 = x981.loadFactor
val x1608 = x1607 * x1560
val x1609 = x1608.asInstanceOf[Int]
x981.threshold = x1609

}

} else {
()
}

}

} else {
()
}
val x1619 = x1362 + 1
x1356 = x1619
()
}
var x1623: Int = 0
var x1624: Entry[Int, Int] = x373
while ({
val x1625 = x1623
val x1626 = x1328.length
val x1627 = x1625 < x1626
x1627
}) {
val x1629 = x1623
val x1630 = x1328(x1629)
val x1631 = x1630 != null
if (x1631) {
x1624 = x1630
println(x1630)
while ({
val x1634 = x1624
val x1635 = x1634.hasNext
x1635
}) {
val x1637 = x1624
val x1638 = x1637.next
x1624 = x1638
val x1640 = x1624
println(x1640)

}

} else {
()
}
val x1646 = x1629 + 1
x1623 = x1646
()
}
var x1650: Int = 0
var x1651: Entry[Int, Int] = x373
while ({
val x1652 = x1650
val x1653 = x1328.length
val x1654 = x1652 < x1653
x1654
}) {
val x1656 = x1650
val x1657 = x1328(x1656)
val x1658 = x1657 != null
if (x1658) {
x1651 = x1657
val x1660 = x1657.key
val x1661 = x981.table
val x1662 = x1661.length
var x1676: Entry[Int, Int] = x373
val x1663 = x1660.hashCode
val x1664 = x1663.toLong
val x1665 = x1664 >>> 20
val x1666 = x1664 >>> 12
val x1667 = x1665 ^ x1666
val x1668 = x1667 ^ x1664
val x1669 = x1668 >>> 7
val x1670 = x1668 ^ x1669
val x1671 = x1668 >>> 4
val x1672 = x1670 ^ x1671
val x1673 = x1672.toInt
val x1674 = x1662 - 1
val x1675 = x1673 & x1674
val x1678 = x1661(x1675)
var x1679: Entry[Int, Int] = x1678
val x1680 = x1679
val x1681 = x1680 != null
if (x1681) {
while ({
val x1682 = x1679
val x1683 = x1682.hasNext
val x1689 = if (x1683) {
val x1684 = x1679
val x1685 = x1684.key
val x1686 = x1685 != x1660

x1686
} else false

x1689
}) {
val x1691 = x1679
x1676 = x1691
val x1693 = x1691.next
x1679 = x1693
()
}
val x1697 = x1676
val x1698 = x1697 == null
if (x1698) {
x1661(x1675) = null
val x1700 = x981.size
val x1701 = x1700 - 1
x981.size = x1701

} else {
val x1704 = x1679
val x1705 = x1704.key
val x1706 = x1705 == x1660
if (x1706) {
val x1707 = x1704.next
val x1708 = x1697.next
val x1709 = x1697.hasNext
x1697.next = x1707
val x1711 = x981.size
val x1712 = x1711 - 1
x981.size = x1712

} else {
()
}

}

} else {
()
}
while ({
val x1720 = x1651
val x1721 = x1720.hasNext
x1721
}) {
val x1723 = x1651
val x1724 = x1723.next
x1651 = x1724
val x1726 = x1651
val x1727 = x1726.key
val x1728 = x981.table
val x1729 = x1728.length
var x1743: Entry[Int, Int] = x373
val x1730 = x1727.hashCode
val x1731 = x1730.toLong
val x1732 = x1731 >>> 20
val x1733 = x1731 >>> 12
val x1734 = x1732 ^ x1733
val x1735 = x1734 ^ x1731
val x1736 = x1735 >>> 7
val x1737 = x1735 ^ x1736
val x1738 = x1735 >>> 4
val x1739 = x1737 ^ x1738
val x1740 = x1739.toInt
val x1741 = x1729 - 1
val x1742 = x1740 & x1741
val x1745 = x1728(x1742)
var x1746: Entry[Int, Int] = x1745
val x1747 = x1746
val x1748 = x1747 != null
if (x1748) {
while ({
val x1749 = x1746
val x1750 = x1749.hasNext
val x1756 = if (x1750) {
val x1751 = x1746
val x1752 = x1751.key
val x1753 = x1752 != x1727

x1753
} else false

x1756
}) {
val x1758 = x1746
x1743 = x1758
val x1760 = x1758.next
x1746 = x1760
()
}
val x1764 = x1743
val x1765 = x1764 == null
if (x1765) {
x1728(x1742) = null
val x1767 = x981.size
val x1768 = x1767 - 1
x981.size = x1768

} else {
val x1771 = x1746
val x1772 = x1771.key
val x1773 = x1772 == x1727
if (x1773) {
val x1774 = x1771.next
val x1775 = x1764.next
val x1776 = x1764.hasNext
x1764.next = x1774
val x1778 = x981.size
val x1779 = x1778 - 1
x981.size = x1779

} else {
()
}

}

} else {
()
}

}

} else {
()
}
val x1791 = x1656 + 1
x1650 = x1791
()
}
val x1795 = x1328.length
val x840 = 3.hashCode
val x841 = x840.toLong
val x842 = x841 >>> 20
val x843 = x841 >>> 12
val x844 = x842 ^ x843
val x845 = x844 ^ x841
val x846 = x845 >>> 7
val x847 = x845 ^ x846
val x848 = x845 >>> 4
val x849 = x847 ^ x848
val x850 = x849.toInt
val x1796 = x1795 - 1
val x1797 = x850 & x1796
val x1798 = x1328(x1797)
var x1799: Entry[Int, Int] = x1798
val x1800 = x1799
val x1801 = x1800 == null
val x1804 = x1268 + 1
if (x1801) {
val x1802 = new Entry(3, 4)
x1328(x1797) = x1802
x981.size = x1804

} else {
while ({
val x1807 = x1799
val x1808 = x1807.hasNext
val x1814 = if (x1808) {
val x1809 = x1799
val x1810 = x1809.key
val x1811 = x1810 != 3

x1811
} else false

x1814
}) {
val x1816 = x1799
val x1817 = x1816.next
x1799 = x1817
()
}
val x1821 = x1799
val x1822 = x1821.key
val x1823 = x1822 == 3
if (x1823) {
val x1824 = x1821.value
x1821.value = 4

} else {
val x1827 = new Entry(3, 4)
val x1828 = x1821.next
val x1829 = x1821.hasNext
x1821.next = x1827
x981.size = x1804

}

}
val x1836 = x981.threshold
val x1837 = x981.size
val x1838 = x1837 >= x1836
if (x1838) {
val x1839 = x1328.length
val x1840 = x1839 == x986
if (x1840) {
x981.threshold = x64

} else {
val x1843 = 2 * x1839
val x1844 = new Array[Entry[Int, Int]](x1843)
var x1845: Int = 0
val x1873 = x1843 - 1
while ({
val x1846 = x1845
val x1847 = x1328.length
val x1848 = x1846 < x1847
x1848
}) {
val x1850 = x1845
val x1851 = x1328(x1850)
var x1852: Entry[Int, Int] = x1851
val x1854 = x1852
val x1855 = x1854 != null
if (x1855) {
x1328(x1850) = null
while ({
val x1857 = x1852
val x1858 = x1857 != null
x1858
}) {
val x1860 = x1852
val x1861 = x1860.key
val x1875 = x1860.next
val x1862 = x1861.hashCode
val x1863 = x1862.toLong
val x1864 = x1863 >>> 20
val x1865 = x1863 >>> 12
val x1866 = x1864 ^ x1865
val x1867 = x1866 ^ x1863
val x1868 = x1867 >>> 7
val x1869 = x1867 ^ x1868
val x1870 = x1867 >>> 4
val x1871 = x1869 ^ x1870
val x1872 = x1871.toInt
val x1874 = x1872 & x1873
val x1876 = x1844(x1874)
val x1877 = x1860.hasNext
x1860.next = x1876
x1844(x1874) = x1860
x1852 = x1875
()
}

} else {
()
}
val x1885 = x1850 + 1
x1845 = x1885
()
}
x981.table = x1844
val x1890 = x985 * x1843
val x1891 = x1890.asInstanceOf[Int]
x981.threshold = x1891

}

} else {
()
}
val x1897 = x981.table
var x1898: Int = 0
var x1899: Entry[Int, Int] = x373
while ({
val x1900 = x1898
val x1901 = x1897.length
val x1902 = x1900 < x1901
x1902
}) {
val x1904 = x1898
val x1905 = x1897(x1904)
val x1906 = x1905 != null
if (x1906) {
x1899 = x1905
println(x1905)
while ({
val x1909 = x1899
val x1910 = x1909.hasNext
x1910
}) {
val x1912 = x1899
val x1913 = x1912.next
x1899 = x1913
val x1915 = x1899
println(x1915)

}

} else {
()
}
val x1921 = x1904 + 1
x1898 = x1921
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
