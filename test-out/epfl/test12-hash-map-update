/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapUpdate extends ((Int)=>(Unit)) {
def apply(x187:Int): Unit = {
val x188 = new HashMap[Int,Array[Int]](200)
val x189 = x188.table
val x190 = x189(0)
val x191 = x188.size
val x192 = x188.loadFactor
val x193 = x188.MAXIMUM_CAPACITY
val x194 = x188.threshold
val x195 = new Array[Int](5)
val x196 = x195(0)
x195(0) = 1
val x198 = x195(1)
x195(1) = 2
val x200 = x189.length
val x12 = 1.hashCode
val x13 = x12.toLong
val x14 = x13 >>> 20
val x15 = x13 >>> 12
val x16 = x14 ^ x15
val x17 = x16 ^ x13
val x18 = x17 >>> 7
val x19 = x17 ^ x18
val x20 = x17 >>> 4
val x21 = x19 ^ x20
val x22 = x21.toInt
val x201 = x200 - 1
val x202 = x22 & x201
val x203 = x189(x202)
var x204: Entry[Int, Array[Int]] = x203
val x205 = x204
val x206 = x205 == null
if (x206) {
val x207 = new Entry(1, x195)
x189(x202) = x207
val x209 = x191 + 1
x188.size = x209

} else {
while ({
val x212 = x204
val x213 = x212.hasNext
val x219 = if (x213) {
val x214 = x204
val x215 = x214.key
val x216 = x215 != 1

x216
} else false

x219
}) {
val x221 = x204
val x222 = x221.next
x204 = x222
()
}
val x226 = x204
val x227 = x226.key
val x228 = x227 == 1
if (x228) {
val x229 = x226.value
x226.value = x195

} else {
val x232 = new Entry(1, x195)
val x233 = x226.next
val x234 = x226.hasNext
x226.next = x232
val x209 = x191 + 1
x188.size = x209

}

}
val x241 = x188.size
val x242 = x241 >= x194
if (x242) {
val x243 = x200 == x193
if (x243) {
val x67 = scala.Int.MaxValue
x188.threshold = x67

} else {
val x246 = 2 * x200
val x247 = new Array[Entry[Int, Array[Int]]](x246)
var x248: Int = 0
val x275 = x246 - 1
while ({
val x249 = x248
val x250 = x189.length
val x251 = x249 < x250
x251
}) {
val x253 = x248
val x254 = x189(x253)
var x255: Entry[Int, Array[Int]] = x254
val x256 = x255
val x257 = x256 != null
if (x257) {
x189(x253) = null
while ({
val x259 = x255
val x260 = x259 != null
x260
}) {
val x262 = x255
val x263 = x262.key
val x277 = x262.next
val x264 = x263.hashCode
val x265 = x264.toLong
val x266 = x265 >>> 20
val x267 = x265 >>> 12
val x268 = x266 ^ x267
val x269 = x268 ^ x265
val x270 = x269 >>> 7
val x271 = x269 ^ x270
val x272 = x269 >>> 4
val x273 = x271 ^ x272
val x274 = x273.toInt
val x276 = x274 & x275
val x278 = x247(x276)
val x279 = x262.hasNext
x262.next = x278
x247(x276) = x262
x255 = x277
()
}

} else {
()
}
val x287 = x253 + 1
x248 = x287
()
}
x188.table = x247
val x292 = x192 * x246
val x293 = x292.asInstanceOf[Int]
x188.threshold = x293

}

} else {
()
}
val x299 = x188.table
val x300 = x299.length
val x301 = x300 - 1
val x302 = x22 & x301
val x303 = x299(x302)
var x304: Entry[Int, Array[Int]] = x303
val x305 = x304
val x306 = x305 == null
val x329 = if (x306) {
val x131 = None
x131
} else {
while ({
val x307 = x304
val x308 = x307.hasNext
val x314 = if (x308) {
val x309 = x304
val x310 = x309.key
val x311 = x310 != 1

x311
} else false

x314
}) {
val x316 = x304
val x317 = x316.next
x304 = x317
()
}
val x321 = x304
val x322 = x321.key
val x323 = x322 == 1
val x327 = if (x323) {
val x324 = x321.value
val x325 = Some(x324)
x325
} else {
val x131 = None
x131
}
x327
}
val x330 = x329.get
val x331 = x330(0)
x330(0) = 10
var x333: Entry[Int, Array[Int]] = x303
val x334 = x333
val x335 = x334 == null
val x358 = if (x335) {
val x131 = None
x131
} else {
while ({
val x336 = x333
val x337 = x336.hasNext
val x343 = if (x337) {
val x338 = x333
val x339 = x338.key
val x340 = x339 != 1

x340
} else false

x343
}) {
val x345 = x333
val x346 = x345.next
x333 = x346
()
}
val x350 = x333
val x351 = x350.key
val x352 = x351 == 1
val x356 = if (x352) {
val x353 = x350.value
val x354 = Some(x353)
x354
} else {
val x131 = None
x131
}
x356
}
val x359 = x358.get
val x360 = x359(0)
println(x360)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
