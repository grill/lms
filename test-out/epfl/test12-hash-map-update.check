/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapUpdate extends ((Int)=>(Unit)) {
def apply(x134:Int): Unit = {
val x135 = new HashMap[Int,Array[Int]](200)
val x136 = x135.table
val x138 = x135.size
val x142 = new Array[Int](5)
x142(0) = 1
x142(1) = 2
val x14 = (1.hashCode).toLong
val x18 = ((x14 >>> 20) ^ (x14 >>> 12)) ^ x14
val x23 = ((x18 ^ (x18 >>> 7)) ^ (x18 >>> 4)).toInt
val x149 = x23 & ((x136.length) - 1)
var x151:Entry[Int, Array[Int]] = (x136(x149))
if (((x151) == null)) {
val x155 = new Entry(1, x142)
x136(x149) = x155
val x157 = x138 + 1
x135.size = x157
()
} else {
while ({
(if (((x151).hasNext)) {

(((x151).key) != 1)
} else false
)
}) {
x151 = ((x151).next)
()
}
val x174 = x151
if (((x174.key) == 1)) {
x174.value = x142
()
} else {
val x180 = new Entry(1, x142)
x174.next = x180
val x157 = x138 + 1
x135.size = x157
()
}
()
}
x135.resize()
val x190 = x135.table
var x195:Entry[Int, Array[Int]] = (x190((x23 & ((x190.length) - 1))))
val x220 = if (((x195) == null)) {
val x74 = None
x74
} else {
while ({
(if (((x195).hasNext)) {

(((x195).key) != 1)
} else false
)
}) {
x195 = ((x195).next)
()
}
val x212 = x195
(if (((x212.key) == 1)) {
while ({
(if (((x195).hasNext)) {

(((x195).key) != 1)
} else false
)
}) {
x195 = ((x195).next)
()
}
val x212 = x195
(Some((x212.value)))
} else {
val x74 = None
x74
})
}
val x221 = x220.get
x221(0) = 10
var x228:Entry[Int, Array[Int]] = (x190((x23 & ((x190.length) - 1))))
val x253 = if (((x228) == null)) {
val x74 = None
x74
} else {
while ({
(if (((x228).hasNext)) {

(((x228).key) != 1)
} else false
)
}) {
x228 = ((x228).next)
()
}
val x245 = x228
(if (((x245.key) == 1)) {
while ({
(if (((x228).hasNext)) {

(((x228).key) != 1)
} else false
)
}) {
x228 = ((x228).next)
()
}
val x245 = x228
(Some((x245.value)))
} else {
val x74 = None
x74
})
}
println(((x253.get)(0)))
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
