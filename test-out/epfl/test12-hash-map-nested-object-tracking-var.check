/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapNestedObjectTrackingVar extends ((Int)=>(Unit)) {
def apply(x143:Int): Unit = {
val x144 = new HashMap[Int,Int](200)
val x145 = x144.table
val x147 = x144.size
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x18 = ((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt
val x153 = x18 & ((x145.length) - 1)
var x155:Entry[Int, Int] = (x145(x153))
if (((x155) == null)) {
val x159 = new Entry(1, 2)
x145(x153) = x159
val x161 = x147 + 1
x144.size = x161
()
} else {
while ({
(if (((x155).hasNext)) {

(((x155).key) != 1)
} else false
)
}) {
x155 = ((x155).next)
()
}
val x178 = x155
if (((x178.key) == 1)) {
x178.value = 2
()
} else {
val x184 = new Entry(1, 2)
x178.next = x184
val x161 = x147 + 1
x144.size = x161
()
}
()
}
x144.resize()
var x194:HashMap[Int, Int] = x144
val x195 = x194
val x196 = x195.table
val x199 = x18 & ((x196.length) - 1)
var x201:Entry[Int, Int] = (x196(x199))
if (((x201) == null)) {
val x204 = new Entry(1, 3)
x196(x199) = x204
x195.size = ((x195.size) + 1)
()
} else {
while ({
(if (((x201).hasNext)) {

(((x201).key) != 1)
} else false
)
}) {
x201 = ((x201).next)
()
}
val x224 = x201
if (((x224.key) == 1)) {
x224.value = 3
()
} else {
val x230 = new Entry(1, 3)
x224.next = x230
x195.size = ((x195.size) + 1)
()
}
()
}
x195.resize()
val x243 = x195.table
var x248:Entry[Int, Int] = (x243((x18 & ((x243.length) - 1))))
val x273 = if (((x248) == null)) {
val x118 = None
x118
} else {
while ({
(if (((x248).hasNext)) {

(((x248).key) != 1)
} else false
)
}) {
x248 = ((x248).next)
()
}
val x265 = x248
(if (((x265.key) == 1)) {
while ({
(if (((x248).hasNext)) {

(((x248).key) != 1)
} else false
)
}) {
x248 = ((x248).next)
()
}
val x265 = x248
(Some((x265.value)))
} else {
val x118 = None
x118
})
}
println(x273)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
