/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapSize extends ((Int)=>(Unit)) {
def apply(x143:Int): Unit = {
val x144 = new HashMap[Int,Int]()
val x145 = x144.table
val x146 = x145.length
val x2 = 1.hashCode
val x3 = x2.toLong
val x4 = x3 >>> 20
val x5 = x3 >>> 12
val x6 = x4 ^ x5
val x7 = x6 ^ x3
val x8 = x7 >>> 7
val x9 = x7 ^ x8
val x10 = x7 >>> 4
val x11 = x9 ^ x10
val x12 = x11.toInt
val x147 = x146 - 1
val x148 = x12 & x147
val x149 = x145(x148)
var x150 = x149
val x151 = x150
val x152 = x151 == null
if (x152) {
val x153 = new Entry(1, 2)
x145(x148) = x153
val x155 = x144.size
val x156 = x155 + 1
x144.size = x156

} else {
while ({
val x159 = x150
val x160 = x159.hasNext
val x166 = if (x160) {
val x161 = x150
val x162 = x161.key
val x163 = x162 != 1

x163
} else false

x166
}) {
val x168 = x150
val x169 = x168.next
x150 = x169
()
}
val x173 = x150
val x174 = x173.key
val x175 = x174 == 1
if (x175) {
x173.value = 2

} else {
val x178 = new Entry(1, 2)
x173.next = x178
val x180 = x144.size
val x181 = x180 + 1
x144.size = x181

}

}
var x187 = x149
val x188 = x187
val x189 = x188 == null
if (x189) {
val x190 = new Entry(1, 2)
x145(x148) = x190
val x192 = x144.size
val x193 = x192 + 1
x144.size = x193

} else {
while ({
val x196 = x187
val x197 = x196.hasNext
val x203 = if (x197) {
val x198 = x187
val x199 = x198.key
val x200 = x199 != 1

x200
} else false

x203
}) {
val x205 = x187
val x206 = x205.next
x187 = x206
()
}
val x210 = x187
val x211 = x210.key
val x212 = x211 == 1
if (x212) {
x210.value = 2

} else {
val x215 = new Entry(1, 2)
x210.next = x215
val x217 = x144.size
val x218 = x217 + 1
x144.size = x218

}

}
val x91 = 2.hashCode
val x92 = x91.toLong
val x93 = x92 >>> 20
val x94 = x92 >>> 12
val x95 = x93 ^ x94
val x96 = x95 ^ x92
val x97 = x96 >>> 7
val x98 = x96 ^ x97
val x99 = x96 >>> 4
val x100 = x98 ^ x99
val x101 = x100.toInt
val x224 = x101 & x147
val x225 = x145(x224)
var x226 = x225
val x227 = x226
val x228 = x227 == null
if (x228) {
val x229 = new Entry(2, 3)
x145(x224) = x229
val x231 = x144.size
val x232 = x231 + 1
x144.size = x232

} else {
while ({
val x235 = x226
val x236 = x235.hasNext
val x242 = if (x236) {
val x237 = x226
val x238 = x237.key
val x239 = x238 != 2

x239
} else false

x242
}) {
val x244 = x226
val x245 = x244.next
x226 = x245
()
}
val x249 = x226
val x250 = x249.key
val x251 = x250 == 2
if (x251) {
x249.value = 3

} else {
val x254 = new Entry(2, 3)
x249.next = x254
val x256 = x144.size
val x257 = x256 + 1
x144.size = x257

}

}
val x263 = x144.size
println(x263)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
