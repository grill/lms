AliasRep: List(Sym(23), Sym(24)) deps: List(Sym(0), Sym(1), Sym(23), Sym(24))
AliasRep: List(Sym(39)) deps: List(Sym(38), Sym(39))
AliasRep: List(Sym(47)) deps: List(Sym(0), Sym(1), Sym(16), Sym(46), Sym(47))
AliasRep: List(Sym(51), Sym(52), Sym(53)) deps: List(Sym(0), Sym(1), Sym(16), Sym(50), Sym(51), Sym(52), Sym(53))
AliasRep: List(Sym(79)) deps: List(Sym(79))
AliasRep: List(Sym(101), Sym(102), Sym(103)) deps: List(Sym(100), Sym(101), Sym(102), Sym(103))
AliasRep: List(Sym(105), Sym(106)) deps: List(Sym(105), Sym(106))
AliasRep: List(Sym(99)) deps: List(Sym(84), Sym(98), Sym(99), Sym(100), Sym(105))
AliasRep: List(Sym(126), Sym(127), Sym(128)) deps: List(Sym(74), Sym(125), Sym(126), Sym(127), Sym(128))
AliasRep: List(Sym(130), Sym(131)) deps: List(Sym(74), Sym(130), Sym(131))
AliasRep: List(Sym(68)) deps: List(Sym(73), Sym(134), Sym(135))
AliasRep: List(Sym(67), Sym(140)) deps: List(Sym(0), Sym(59), Sym(67), Sym(140))
AliasRep: List(Sym(172), Sym(173)) deps: List(Sym(0), Sym(59), Sym(150), Sym(172), Sym(173))
AliasRep: List(Sym(188)) deps: List(Sym(187), Sym(188))
AliasRep: List(Sym(196)) deps: List(Sym(0), Sym(59), Sym(150), Sym(165), Sym(195), Sym(196))
AliasRep: List(Sym(200), Sym(201), Sym(202)) deps: List(Sym(0), Sym(59), Sym(150), Sym(165), Sym(199), Sym(200), Sym(201), Sym(202))
AliasRep: List(Sym(227)) deps: List(Sym(227))
AliasRep: List(Sym(249), Sym(250), Sym(251)) deps: List(Sym(248), Sym(249), Sym(250), Sym(251))
AliasRep: List(Sym(253), Sym(254)) deps: List(Sym(253), Sym(254))
AliasRep: List(Sym(247)) deps: List(Sym(232), Sym(246), Sym(247), Sym(248), Sym(253))
AliasRep: List(Sym(274), Sym(275), Sym(276)) deps: List(Sym(222), Sym(273), Sym(274), Sym(275), Sym(276))
AliasRep: List(Sym(278), Sym(279)) deps: List(Sym(222), Sym(278), Sym(279))
AliasRep: List(Sym(216)) deps: List(Sym(221), Sym(282), Sym(283))
AliasRep: List(Sym(215), Sym(288)) deps: List(Sym(0), Sym(59), Sym(208), Sym(215), Sym(288))
AliasRep: List(Sym(317)) deps: List(Sym(316), Sym(317))
AliasRep: List(Sym(344), Sym(345)) deps: List(Sym(0), Sym(59), Sym(208), Sym(333), Sym(344), Sym(345))
AliasRep: List(Sym(360)) deps: List(Sym(359), Sym(360))
AliasRep: List(Sym(368)) deps: List(Sym(0), Sym(59), Sym(208), Sym(333), Sym(337), Sym(367), Sym(368))
AliasRep: List(Sym(372), Sym(373), Sym(374)) deps: List(Sym(0), Sym(59), Sym(208), Sym(333), Sym(337), Sym(371), Sym(372), Sym(373), Sym(374))
AliasRep: List(Sym(399)) deps: List(Sym(399))
AliasRep: List(Sym(421), Sym(422), Sym(423)) deps: List(Sym(420), Sym(421), Sym(422), Sym(423))
AliasRep: List(Sym(425), Sym(426)) deps: List(Sym(425), Sym(426))
AliasRep: List(Sym(419)) deps: List(Sym(404), Sym(418), Sym(419), Sym(420), Sym(425))
AliasRep: List(Sym(446), Sym(447), Sym(448)) deps: List(Sym(394), Sym(445), Sym(446), Sym(447), Sym(448))
AliasRep: List(Sym(450), Sym(451)) deps: List(Sym(394), Sym(450), Sym(451))
AliasRep: List(Sym(388)) deps: List(Sym(393), Sym(454), Sym(455))
AliasRep: List(Sym(387), Sym(460)) deps: List(Sym(0), Sym(59), Sym(208), Sym(380), Sym(387), Sym(460))
AliasRep: List(Sym(488)) deps: List(Sym(487), Sym(488))
AliasRep: List(Sym(516), Sym(517)) deps: List(Sym(504), Sym(505), Sym(516), Sym(517))
AliasRep: List(Sym(532)) deps: List(Sym(531), Sym(532))
AliasRep: List(Sym(540)) deps: List(Sym(504), Sym(505), Sym(509), Sym(539), Sym(540))
AliasRep: List(Sym(544), Sym(545), Sym(546)) deps: List(Sym(504), Sym(505), Sym(509), Sym(543), Sym(544), Sym(545), Sym(546))
AliasRep: List(Sym(571)) deps: List(Sym(571))
AliasRep: List(Sym(593), Sym(594), Sym(595)) deps: List(Sym(592), Sym(593), Sym(594), Sym(595))
AliasRep: List(Sym(597), Sym(598)) deps: List(Sym(597), Sym(598))
AliasRep: List(Sym(591)) deps: List(Sym(576), Sym(590), Sym(591), Sym(592), Sym(597))
AliasRep: List(Sym(618), Sym(619), Sym(620)) deps: List(Sym(566), Sym(617), Sym(618), Sym(619), Sym(620))
AliasRep: List(Sym(622), Sym(623)) deps: List(Sym(566), Sym(622), Sym(623))
AliasRep: List(Sym(560)) deps: List(Sym(565), Sym(626), Sym(627))
AliasRep: List(Sym(559), Sym(632)) deps: List(Sym(504), Sym(552), Sym(559), Sym(632))
AliasRep: List(Sym(653), Sym(654)) deps: List(Sym(504), Sym(552), Sym(642), Sym(653), Sym(654))
AliasRep: List(Sym(669)) deps: List(Sym(668), Sym(669))
AliasRep: List(Sym(677)) deps: List(Sym(504), Sym(552), Sym(642), Sym(646), Sym(676), Sym(677))
AliasRep: List(Sym(681), Sym(682), Sym(683)) deps: List(Sym(504), Sym(552), Sym(642), Sym(646), Sym(680), Sym(681), Sym(682), Sym(683))
AliasRep: List(Sym(708)) deps: List(Sym(708))
AliasRep: List(Sym(730), Sym(731), Sym(732)) deps: List(Sym(729), Sym(730), Sym(731), Sym(732))
AliasRep: List(Sym(734), Sym(735)) deps: List(Sym(734), Sym(735))
AliasRep: List(Sym(728)) deps: List(Sym(713), Sym(727), Sym(728), Sym(729), Sym(734))
AliasRep: List(Sym(755), Sym(756), Sym(757)) deps: List(Sym(703), Sym(754), Sym(755), Sym(756), Sym(757))
AliasRep: List(Sym(759), Sym(760)) deps: List(Sym(703), Sym(759), Sym(760))
AliasRep: List(Sym(697)) deps: List(Sym(702), Sym(763), Sym(764))
AliasRep: List(Sym(696), Sym(769)) deps: List(Sym(504), Sym(552), Sym(689), Sym(696), Sym(769))
AliasRep: List(Sym(797)) deps: List(Sym(796), Sym(797))
AliasRep: List(Sym(824), Sym(825)) deps: List(Sym(504), Sym(552), Sym(689), Sym(813), Sym(824), Sym(825))
AliasRep: List(Sym(840)) deps: List(Sym(839), Sym(840))
AliasRep: List(Sym(848)) deps: List(Sym(504), Sym(552), Sym(689), Sym(813), Sym(817), Sym(847), Sym(848))
AliasRep: List(Sym(852), Sym(853), Sym(854)) deps: List(Sym(504), Sym(552), Sym(689), Sym(813), Sym(817), Sym(851), Sym(852), Sym(853), Sym(854))
AliasRep: List(Sym(879)) deps: List(Sym(879))
AliasRep: List(Sym(901), Sym(902), Sym(903)) deps: List(Sym(900), Sym(901), Sym(902), Sym(903))
AliasRep: List(Sym(905), Sym(906)) deps: List(Sym(905), Sym(906))
AliasRep: List(Sym(899)) deps: List(Sym(884), Sym(898), Sym(899), Sym(900), Sym(905))
AliasRep: List(Sym(926), Sym(927), Sym(928)) deps: List(Sym(874), Sym(925), Sym(926), Sym(927), Sym(928))
AliasRep: List(Sym(930), Sym(931)) deps: List(Sym(874), Sym(930), Sym(931))
AliasRep: List(Sym(868)) deps: List(Sym(873), Sym(934), Sym(935))
AliasRep: List(Sym(867), Sym(940)) deps: List(Sym(504), Sym(552), Sym(689), Sym(860), Sym(867), Sym(940))
AliasRep: List(Sym(968)) deps: List(Sym(967), Sym(968))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdateOpt extends ((Int)=>(Unit)) {
def apply(x503:Int): Unit = {
val x504 = new HashMap[Int,Int](200)
val x505 = x504.table
val x506 = x505.length
val x2 = 1.hashCode
val x3 = x2.toLong
val x4 = x3 >>> 20
val x5 = x3 >>> 12
val x6 = x4 ^ x5
val x7 = x6 ^ x3
val x8 = x7 >>> 7
val x9 = x7 ^ x8
val x10 = x7 >>> 4
val x11 = x9 ^ x10
val x12 = x11.toInt
val x507 = x506 - 1
val x508 = x12 & x507
val x509 = x505(x508)
var x510 = x509
val x511 = x504.size
val x512 = x504.threshold
val x513 = x504.MAXIMUM_CAPACITY
val x514 = x510
val x515 = x514 == null
if (x515) {
val x516 = new Entry(1, 2)
val x517 = x505(x508)
x505(x508) = x516
val x519 = x511 + 1
x504.size = x519

} else {
while ({
val x522 = x510
val x523 = x522.hasNext
val x529 = if (x523) {
val x524 = x510
val x525 = x524.key
val x526 = x525 != 1

x526
} else false

x529
}) {
val x531 = x510
val x532 = x531.next
x510 = x532
()
}
val x536 = x510
val x537 = x536.key
val x538 = x537 == 1
if (x538) {
val x539 = x510
val x540 = x539.value
x539.value = 2

} else {
val x543 = x510
val x544 = new Entry(1, 2)
val x545 = x543.next
val x546 = x543.hasNext
x543.next = x544
val x519 = x511 + 1
x504.size = x519

}

}
val x553 = x511 >= x512
if (x553) {
val x554 = x505.length
val x555 = x554 == x513
if (x555) {
val x63 = scala.Int.MaxValue
x504.threshold = x63

} else {
val x558 = 2 * x554
val x559 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x558)
var x560 = 0
val x588 = x558 - 1
val x589 = x12 & x588
while ({
val x561 = x560
val x562 = x505.length
val x563 = x561 < x562
x563
}) {
val x565 = x560
val x566 = x505(x565)
var x567 = x566
val x568 = x567
val x569 = x568 != null
if (x569) {
val x570 = x560
val x571 = x505(x570)
x505(x570) = null
while ({
val x573 = x567
val x574 = x573.hasNext
x574
}) {
val x576 = x567
val x577 = x576.key
val x590 = x567
val x591 = x590.next
val x592 = x567
val x593 = x559(x589)
val x594 = x592.next
val x595 = x592.hasNext
x592.next = x593
val x597 = x567
val x598 = x559(x589)
x559(x589) = x597
x567 = x591
()
}
val x603 = x567
val x604 = x603.key
val x615 = x567
val x616 = x615.next
val x617 = x567
val x618 = x559(x589)
val x619 = x617.next
val x620 = x617.hasNext
x617.next = x618
val x622 = x567
val x623 = x559(x589)
x559(x589) = x622

} else {
()
}
val x627 = x560
val x628 = x627 + 1
x560 = x628
()
}
val x632 = x504.table
x504.table = x559
val x634 = x504.loadFactor
val x635 = x634 * x558
val x636 = x635.asInstanceOf[Int]
x504.threshold = x636

}

} else {
()
}
val x642 = x504.table
val x643 = x642.length
val x151 = 2.hashCode
val x152 = x151.toLong
val x153 = x152 >>> 20
val x154 = x152 >>> 12
val x155 = x153 ^ x154
val x156 = x155 ^ x152
val x157 = x156 >>> 7
val x158 = x156 ^ x157
val x159 = x156 >>> 4
val x160 = x158 ^ x159
val x161 = x160.toInt
val x644 = x643 - 1
val x645 = x161 & x644
val x646 = x642(x645)
var x647 = x646
val x648 = x504.size
val x649 = x504.threshold
val x650 = x504.MAXIMUM_CAPACITY
val x651 = x647
val x652 = x651 == null
if (x652) {
val x653 = new Entry(2, 3)
val x654 = x642(x645)
x642(x645) = x653
val x656 = x648 + 1
x504.size = x656

} else {
while ({
val x659 = x647
val x660 = x659.hasNext
val x666 = if (x660) {
val x661 = x647
val x662 = x661.key
val x663 = x662 != 2

x663
} else false

x666
}) {
val x668 = x647
val x669 = x668.next
x647 = x669
()
}
val x673 = x647
val x674 = x673.key
val x675 = x674 == 2
if (x675) {
val x676 = x647
val x677 = x676.value
x676.value = 3

} else {
val x680 = x647
val x681 = new Entry(2, 3)
val x682 = x680.next
val x683 = x680.hasNext
x680.next = x681
val x656 = x648 + 1
x504.size = x656

}

}
val x690 = x648 >= x649
if (x690) {
val x691 = x642.length
val x692 = x691 == x650
if (x692) {
val x63 = scala.Int.MaxValue
x504.threshold = x63

} else {
val x695 = 2 * x691
val x696 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x695)
var x697 = 0
val x725 = x695 - 1
val x726 = x161 & x725
while ({
val x698 = x697
val x699 = x642.length
val x700 = x698 < x699
x700
}) {
val x702 = x697
val x703 = x642(x702)
var x704 = x703
val x705 = x704
val x706 = x705 != null
if (x706) {
val x707 = x697
val x708 = x642(x707)
x642(x707) = null
while ({
val x710 = x704
val x711 = x710.hasNext
x711
}) {
val x713 = x704
val x714 = x713.key
val x727 = x704
val x728 = x727.next
val x729 = x704
val x730 = x696(x726)
val x731 = x729.next
val x732 = x729.hasNext
x729.next = x730
val x734 = x704
val x735 = x696(x726)
x696(x726) = x734
x704 = x728
()
}
val x740 = x704
val x741 = x740.key
val x752 = x704
val x753 = x752.next
val x754 = x704
val x755 = x696(x726)
val x756 = x754.next
val x757 = x754.hasNext
x754.next = x755
val x759 = x704
val x760 = x696(x726)
x696(x726) = x759

} else {
()
}
val x764 = x697
val x765 = x764 + 1
x697 = x765
()
}
val x769 = x504.table
x504.table = x696
val x771 = x504.loadFactor
val x772 = x771 * x695
val x773 = x772.asInstanceOf[Int]
x504.threshold = x773

}

} else {
()
}
val x779 = x504.table
val x780 = x779.length
val x781 = x780 - 1
val x782 = x12 & x781
val x783 = x779(x782)
var x784 = x783
val x785 = x784
val x786 = x785 == null
val x810 = if (x786) {
val x306 = None
x306
} else {
while ({
val x787 = x784
val x788 = x787.hasNext
val x794 = if (x788) {
val x789 = x784
val x790 = x789.key
val x791 = x790 != 1

x791
} else false

x794
}) {
val x796 = x784
val x797 = x796.next
x784 = x797
()
}
val x801 = x784
val x802 = x801.key
val x803 = x802 == 1
val x808 = if (x803) {
val x804 = x784
val x805 = x804.value
val x806 = Some(x805)
x806
} else {
val x306 = None
x306
}
x808
}
val x811 = x810.asInstanceOf[Int]
val x813 = x504.table
val x814 = x813.length
val x815 = x814 - 1
val x816 = x12 & x815
val x817 = x813(x816)
var x818 = x817
val x819 = x504.size
val x820 = x504.threshold
val x821 = x504.MAXIMUM_CAPACITY
val x822 = x818
val x823 = x822 == null
if (x823) {
val x812 = x811 + 1
val x824 = new Entry(1, x812)
val x825 = x813(x816)
x813(x816) = x824
val x827 = x819 + 1
x504.size = x827

} else {
while ({
val x830 = x818
val x831 = x830.hasNext
val x837 = if (x831) {
val x832 = x818
val x833 = x832.key
val x834 = x833 != 1

x834
} else false

x837
}) {
val x839 = x818
val x840 = x839.next
x818 = x840
()
}
val x844 = x818
val x845 = x844.key
val x846 = x845 == 1
if (x846) {
val x847 = x818
val x848 = x847.value
val x812 = x811 + 1
x847.value = x812

} else {
val x851 = x818
val x812 = x811 + 1
val x852 = new Entry(1, x812)
val x853 = x851.next
val x854 = x851.hasNext
x851.next = x852
val x827 = x819 + 1
x504.size = x827

}

}
val x861 = x819 >= x820
if (x861) {
val x862 = x813.length
val x863 = x862 == x821
if (x863) {
val x63 = scala.Int.MaxValue
x504.threshold = x63

} else {
val x866 = 2 * x862
val x867 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x866)
var x868 = 0
val x896 = x866 - 1
val x897 = x12 & x896
while ({
val x869 = x868
val x870 = x813.length
val x871 = x869 < x870
x871
}) {
val x873 = x868
val x874 = x813(x873)
var x875 = x874
val x876 = x875
val x877 = x876 != null
if (x877) {
val x878 = x868
val x879 = x813(x878)
x813(x878) = null
while ({
val x881 = x875
val x882 = x881.hasNext
x882
}) {
val x884 = x875
val x885 = x884.key
val x898 = x875
val x899 = x898.next
val x900 = x875
val x901 = x867(x897)
val x902 = x900.next
val x903 = x900.hasNext
x900.next = x901
val x905 = x875
val x906 = x867(x897)
x867(x897) = x905
x875 = x899
()
}
val x911 = x875
val x912 = x911.key
val x923 = x875
val x924 = x923.next
val x925 = x875
val x926 = x867(x897)
val x927 = x925.next
val x928 = x925.hasNext
x925.next = x926
val x930 = x875
val x931 = x867(x897)
x867(x897) = x930

} else {
()
}
val x935 = x868
val x936 = x935 + 1
x868 = x936
()
}
val x940 = x504.table
x504.table = x867
val x942 = x504.loadFactor
val x943 = x942 * x866
val x944 = x943.asInstanceOf[Int]
x504.threshold = x944

}

} else {
()
}
val x950 = x504.table
val x951 = x950.length
val x952 = x951 - 1
val x953 = x12 & x952
val x954 = x950(x953)
var x955 = x954
val x956 = x955
val x957 = x956 == null
val x981 = if (x957) {
val x306 = None
x306
} else {
while ({
val x958 = x955
val x959 = x958.hasNext
val x965 = if (x959) {
val x960 = x955
val x961 = x960.key
val x962 = x961 != 1

x962
} else false

x965
}) {
val x967 = x955
val x968 = x967.next
x955 = x968
()
}
val x972 = x955
val x973 = x972.key
val x974 = x973 == 1
val x979 = if (x974) {
val x975 = x955
val x976 = x975.value
val x977 = Some(x976)
x977
} else {
val x306 = None
x306
}
x979
}
println(x981)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
