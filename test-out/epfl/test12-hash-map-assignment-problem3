reflectReadMutable: WrappedArray(Sym(0)) Def: HashMapGetSize(Sym(0))
Context: List(Sym(0))
ReflectReadMutable: List(Sym(1)) deps: List(Sym(0))
reflectReadMutable: WrappedArray(Sym(3)) Def: ReadVar(Variable(Sym(3)))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3))
ReflectReadMutable: List(Sym(4)) deps: List(Sym(0), Sym(3))
reflectReadMutable: WrappedArray(Sym(5)) Def: ReadVar(Variable(Sym(5)))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5))
ReflectReadMutable: List(Sym(6)) deps: List(Sym(0), Sym(4), Sym(5))
reflectReadMutable: WrappedArray(Sym(0)) Def: HashMapGetSize(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7))
ReflectReadMutable: List(Sym(8)) deps: List(Sym(0))
reflectReadMutable: WrappedArray(Sym(11)) Def: HashMapGetSize(Sym(11))
Context: List(Sym(11))
ReflectReadMutable: List(Sym(12)) deps: List(Sym(11))
reflectReadMutable: WrappedArray(Sym(14)) Def: ReadVar(Variable(Sym(14)))
Context: List(Sym(11), Sym(12), Sym(13), Sym(14))
ReflectReadMutable: List(Sym(15)) deps: List(Sym(11), Sym(14))
reflectReadMutable: WrappedArray(Sym(16)) Def: ReadVar(Variable(Sym(16)))
Context: List(Sym(11), Sym(12), Sym(13), Sym(14), Sym(15), Sym(16))
ReflectReadMutable: List(Sym(17)) deps: List(Sym(11), Sym(15), Sym(16))
reflectReadMutable: WrappedArray(Sym(11)) Def: HashMapGetSize(Sym(11))
Context: List(Sym(11), Sym(12), Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18))
ReflectReadMutable: List(Sym(19)) deps: List(Sym(11))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapAssignmentProblem3 extends ((Int)=>(Unit)) {
def apply(x10:Int): Unit = {
val x11 = new HashMap[Int,Int](200)
val x12 = x11.size
println(x12)
var x14 = x11
val x15 = x14
var x16 = x15
val x17 = x16
x17.size = 3
val x19 = x11.size
println(x19)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
