/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapForEach extends ((Int)=>(Unit)) {
def apply(x367:Int): Unit = {
val x368 = new HashMap[Int,Int](200)
val x369 = x368.table
val x370 = x369(0)
val x371 = x368.size
val x372 = x368.loadFactor
val x373 = x368.MAXIMUM_CAPACITY
val x374 = x368.threshold
val x375 = x369.length
val x8 = 1.hashCode
val x9 = x8.toLong
val x10 = x9 >>> 20
val x11 = x9 >>> 12
val x12 = x10 ^ x11
val x13 = x12 ^ x9
val x14 = x13 >>> 7
val x15 = x13 ^ x14
val x16 = x13 >>> 4
val x17 = x15 ^ x16
val x18 = x17.toInt
val x376 = x375 - 1
val x377 = x18 & x376
val x378 = x369(x377)
var x379: Entry[Int, Int] = x378
val x381 = x379
val x382 = x381 == null
val x385 = x371 + 1
if (x382) {
val x383 = new Entry(1, 2)
x369(x377) = x383
x368.size = x385

} else {
while ({
val x388 = x379
val x389 = x388.hasNext
val x395 = if (x389) {
val x390 = x379
val x391 = x390.key
val x392 = x391 != 1

x392
} else false

x395
}) {
val x397 = x379
val x398 = x397.next
x379 = x398
()
}
val x402 = x379
val x403 = x402.key
val x404 = x403 == 1
if (x404) {
val x405 = x402.value
x402.value = 2

} else {
val x408 = new Entry(1, 2)
val x409 = x402.next
val x410 = x402.hasNext
x402.next = x408
x368.size = x385

}

}
val x417 = x368.size
val x418 = x417 >= x374
val x64 = scala.Int.MaxValue
if (x418) {
val x419 = x369.length
val x420 = x419 == x373
if (x420) {
x368.threshold = x64

} else {
val x423 = 2 * x419
val x424 = new Array[Entry[Int, Int]](x423)
var x425: Int = 0
val x453 = x423 - 1
while ({
val x426 = x425
val x427 = x369.length
val x428 = x426 < x427
x428
}) {
val x430 = x425
val x431 = x369(x430)
var x432: Entry[Int, Int] = x431
val x434 = x432
val x435 = x434 != null
if (x435) {
x369(x430) = null
while ({
val x437 = x432
val x438 = x437 != null
x438
}) {
val x440 = x432
val x441 = x440.key
val x455 = x440.next
val x442 = x441.hashCode
val x443 = x442.toLong
val x444 = x443 >>> 20
val x445 = x443 >>> 12
val x446 = x444 ^ x445
val x447 = x446 ^ x443
val x448 = x447 >>> 7
val x449 = x447 ^ x448
val x450 = x447 >>> 4
val x451 = x449 ^ x450
val x452 = x451.toInt
val x454 = x452 & x453
val x456 = x424(x454)
val x457 = x440.hasNext
x440.next = x456
x424(x454) = x440
x432 = x455
()
}

} else {
()
}
val x465 = x430 + 1
x425 = x465
()
}
x368.table = x424
val x470 = x372 * x423
val x471 = x470.asInstanceOf[Int]
x368.threshold = x471

}

} else {
()
}
val x477 = x368.table
val x478 = x477.length
val x479 = x478 - 1
val x480 = x18 & x479
val x481 = x477(x480)
var x482: Entry[Int, Int] = x481
val x483 = x482
val x484 = x483 == null
val x487 = x417 + 1
if (x484) {
val x485 = new Entry(1, 2)
x477(x480) = x485
x368.size = x487

} else {
while ({
val x490 = x482
val x491 = x490.hasNext
val x497 = if (x491) {
val x492 = x482
val x493 = x492.key
val x494 = x493 != 1

x494
} else false

x497
}) {
val x499 = x482
val x500 = x499.next
x482 = x500
()
}
val x504 = x482
val x505 = x504.key
val x506 = x505 == 1
if (x506) {
val x507 = x504.value
x504.value = 2

} else {
val x510 = new Entry(1, 2)
val x511 = x504.next
val x512 = x504.hasNext
x504.next = x510
x368.size = x487

}

}
val x519 = x368.threshold
val x520 = x368.size
val x521 = x520 >= x519
if (x521) {
val x522 = x477.length
val x523 = x522 == x373
if (x523) {
x368.threshold = x64

} else {
val x526 = 2 * x522
val x527 = new Array[Entry[Int, Int]](x526)
var x528: Int = 0
val x556 = x526 - 1
while ({
val x529 = x528
val x530 = x477.length
val x531 = x529 < x530
x531
}) {
val x533 = x528
val x534 = x477(x533)
var x535: Entry[Int, Int] = x534
val x537 = x535
val x538 = x537 != null
if (x538) {
x477(x533) = null
while ({
val x540 = x535
val x541 = x540 != null
x541
}) {
val x543 = x535
val x544 = x543.key
val x558 = x543.next
val x545 = x544.hashCode
val x546 = x545.toLong
val x547 = x546 >>> 20
val x548 = x546 >>> 12
val x549 = x547 ^ x548
val x550 = x549 ^ x546
val x551 = x550 >>> 7
val x552 = x550 ^ x551
val x553 = x550 >>> 4
val x554 = x552 ^ x553
val x555 = x554.toInt
val x557 = x555 & x556
val x559 = x527(x557)
val x560 = x543.hasNext
x543.next = x559
x527(x557) = x543
x535 = x558
()
}

} else {
()
}
val x568 = x533 + 1
x528 = x568
()
}
x368.table = x527
val x573 = x372 * x526
val x574 = x573.asInstanceOf[Int]
x368.threshold = x574

}

} else {
()
}
val x580 = x368.table
val x581 = x580.length
val x226 = 2.hashCode
val x227 = x226.toLong
val x228 = x227 >>> 20
val x229 = x227 >>> 12
val x230 = x228 ^ x229
val x231 = x230 ^ x227
val x232 = x231 >>> 7
val x233 = x231 ^ x232
val x234 = x231 >>> 4
val x235 = x233 ^ x234
val x236 = x235.toInt
val x582 = x581 - 1
val x583 = x236 & x582
val x584 = x580(x583)
var x585: Entry[Int, Int] = x584
val x586 = x585
val x587 = x586 == null
val x590 = x520 + 1
if (x587) {
val x588 = new Entry(2, 3)
x580(x583) = x588
x368.size = x590

} else {
while ({
val x593 = x585
val x594 = x593.hasNext
val x600 = if (x594) {
val x595 = x585
val x596 = x595.key
val x597 = x596 != 2

x597
} else false

x600
}) {
val x602 = x585
val x603 = x602.next
x585 = x603
()
}
val x607 = x585
val x608 = x607.key
val x609 = x608 == 2
if (x609) {
val x610 = x607.value
x607.value = 3

} else {
val x613 = new Entry(2, 3)
val x614 = x607.next
val x615 = x607.hasNext
x607.next = x613
x368.size = x590

}

}
val x622 = x368.threshold
val x623 = x368.size
val x624 = x623 >= x622
if (x624) {
val x625 = x580.length
val x626 = x625 == x373
if (x626) {
x368.threshold = x64

} else {
val x629 = 2 * x625
val x630 = new Array[Entry[Int, Int]](x629)
var x631: Int = 0
val x659 = x629 - 1
while ({
val x632 = x631
val x633 = x580.length
val x634 = x632 < x633
x634
}) {
val x636 = x631
val x637 = x580(x636)
var x638: Entry[Int, Int] = x637
val x640 = x638
val x641 = x640 != null
if (x641) {
x580(x636) = null
while ({
val x643 = x638
val x644 = x643 != null
x644
}) {
val x646 = x638
val x647 = x646.key
val x661 = x646.next
val x648 = x647.hashCode
val x649 = x648.toLong
val x650 = x649 >>> 20
val x651 = x649 >>> 12
val x652 = x650 ^ x651
val x653 = x652 ^ x649
val x654 = x653 >>> 7
val x655 = x653 ^ x654
val x656 = x653 >>> 4
val x657 = x655 ^ x656
val x658 = x657.toInt
val x660 = x658 & x659
val x662 = x630(x660)
val x663 = x646.hasNext
x646.next = x662
x630(x660) = x646
x638 = x661
()
}

} else {
()
}
val x671 = x636 + 1
x631 = x671
()
}
x368.table = x630
val x676 = x372 * x629
val x677 = x676.asInstanceOf[Int]
x368.threshold = x677

}

} else {
()
}
val x683 = x368.table
var x684: Int = 0
val x340 = null.asInstanceOf[Entry[Int, Int]]
var x685: Entry[Int, Int] = x340
while ({
val x686 = x684
val x687 = x683.length
val x688 = x686 < x687
x688
}) {
val x690 = x684
val x691 = x683(x690)
val x692 = x691 != null
if (x692) {
x685 = x691
println(x691)
while ({
val x695 = x685
val x696 = x695.hasNext
x696
}) {
val x698 = x685
val x699 = x698.next
x685 = x699
val x701 = x685
println(x701)

}

} else {
()
}
val x707 = x690 + 1
x684 = x707
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
