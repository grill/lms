/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapForEach extends ((Int)=>(Unit)) {
def apply(x195:Int): Unit = {
val x196 = new HashMap[Int,Int](200)
val x197 = x196.table
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x18 = ((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt
val x205 = x18 & ((x197.length) - 1)
var x207:Entry[Int, Int] = (x197(x205))
val x213 = (x196.size) + 1
if (((x207) == null)) {
val x211 = new Entry(1, 2)
x197(x205) = x211
x196.size = x213
()
} else {
while ({
(if (((x207).hasNext)) {

(((x207).key) != 1)
} else false
)
}) {
x207 = ((x207).next)
()
}
val x230 = x207
if (((x230.key) == 1)) {
x230.value = 2
()
} else {
val x236 = new Entry(1, 2)
x230.next = x236
x196.size = x213
()
}
()
}
x196.resize()
val x246 = x196.table
val x249 = x18 & ((x246.length) - 1)
var x251:Entry[Int, Int] = (x246(x249))
if (((x251) == null)) {
val x254 = new Entry(1, 2)
x246(x249) = x254
x196.size = ((x196.size) + 1)
()
} else {
while ({
(if (((x251).hasNext)) {

(((x251).key) != 1)
} else false
)
}) {
x251 = ((x251).next)
()
}
val x274 = x251
if (((x274.key) == 1)) {
x274.value = 2
()
} else {
val x280 = new Entry(1, 2)
x274.next = x280
x196.size = ((x196.size) + 1)
()
}
()
}
x196.resize()
val x293 = x196.table
val x111 = (2.hashCode).toLong
val x115 = ((x111 >>> 20) ^ (x111 >>> 12)) ^ x111
val x296 = (((x115 ^ (x115 >>> 7)) ^ (x115 >>> 4)).toInt) & ((x293.length) - 1)
var x298:Entry[Int, Int] = (x293(x296))
if (((x298) == null)) {
val x301 = new Entry(2, 3)
x293(x296) = x301
x196.size = ((x196.size) + 1)
()
} else {
while ({
(if (((x298).hasNext)) {

(((x298).key) != 2)
} else false
)
}) {
x298 = ((x298).next)
()
}
val x321 = x298
if (((x321.key) == 2)) {
x321.value = 3
()
} else {
val x327 = new Entry(2, 3)
x321.next = x327
x196.size = ((x196.size) + 1)
()
}
()
}
x196.resize()
val x340 = x196.table
var x341:Int = 0
var x342:Entry[Int, Int] = (null.asInstanceOf[Entry[Int, Int]])
while ({
((x341) < (x340.length))
}) {
val x347 = x341
val x348 = x340(x347)
if ((x348 != null)) {
x342 = x348
println(x348)
while ({
((x342).hasNext)
}) {
x342 = ((x342).next)
println((x342))
()
}
()
} else {
()
}
x341 = (x347 + 1)
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
