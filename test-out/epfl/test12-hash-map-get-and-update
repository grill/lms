/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdate extends ((Int)=>(Unit)) {
def apply(x94:Int): Unit = {
val x95 = new HashMap[Int,Int](200)
val x96 = x95.table
val x98 = x95.size
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x18 = ((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt
val x104 = x18 & ((x96.length) - 1)
var x106:Entry[Int, Int] = (x96(x104))
if (((x106) == null)) {
val x110 = new Entry(1, 2)
x96(x104) = x110
val x112 = x98 + 1
x95.size = x112
()
} else {
while ({
(if (((x106).hasNext)) {

(((x106).key) != 1)
} else false
)
}) {
x106 = ((x106).next)
()
}
val x129 = x106
if (((x129.key) == 1)) {
x129.value = 2
()
} else {
val x135 = new Entry(1, 2)
x129.next = x135
val x112 = x98 + 1
x95.size = x112
()
}
()
}
x95.resize()
val x145 = x95.table
var x150:Entry[Int, Int] = (x145((x18 & ((x145.length) - 1))))
val x175 = if (((x150) == null)) {
val x69 = None
x69
} else {
while ({
(if (((x150).hasNext)) {

(((x150).key) != 1)
} else false
)
}) {
x150 = ((x150).next)
()
}
val x167 = x150
(if (((x167.key) == 1)) {
while ({
(if (((x150).hasNext)) {

(((x150).key) != 1)
} else false
)
}) {
x150 = ((x150).next)
()
}
val x167 = x150
(Some((x167.value)))
} else {
val x69 = None
x69
})
}
println(x175)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
