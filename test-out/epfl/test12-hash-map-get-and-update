AliasRep: List(Sym(23), Sym(24)) deps: List(Sym(0), Sym(1), Sym(23), Sym(24))
AliasRep: List(Sym(39)) deps: List(Sym(38), Sym(39))
AliasRep: List(Sym(47)) deps: List(Sym(0), Sym(1), Sym(16), Sym(46), Sym(47))
AliasRep: List(Sym(51), Sym(52), Sym(53)) deps: List(Sym(0), Sym(1), Sym(16), Sym(50), Sym(51), Sym(52), Sym(53))
AliasRep: List(Sym(79)) deps: List(Sym(79))
AliasRep: List(Sym(101), Sym(102), Sym(103)) deps: List(Sym(100), Sym(101), Sym(102), Sym(103))
AliasRep: List(Sym(105), Sym(106)) deps: List(Sym(105), Sym(106))
AliasRep: List(Sym(99)) deps: List(Sym(84), Sym(98), Sym(99), Sym(100), Sym(105))
AliasRep: List(Sym(126), Sym(127), Sym(128)) deps: List(Sym(74), Sym(125), Sym(126), Sym(127), Sym(128))
AliasRep: List(Sym(130), Sym(131)) deps: List(Sym(74), Sym(130), Sym(131))
AliasRep: List(Sym(68)) deps: List(Sym(73), Sym(134), Sym(135))
AliasRep: List(Sym(67), Sym(140)) deps: List(Sym(0), Sym(59), Sym(67), Sym(140))
AliasRep: List(Sym(169)) deps: List(Sym(168), Sym(169))
AliasRep: List(Sym(197), Sym(198)) deps: List(Sym(185), Sym(186), Sym(197), Sym(198))
AliasRep: List(Sym(213)) deps: List(Sym(212), Sym(213))
AliasRep: List(Sym(221)) deps: List(Sym(185), Sym(186), Sym(190), Sym(220), Sym(221))
AliasRep: List(Sym(225), Sym(226), Sym(227)) deps: List(Sym(185), Sym(186), Sym(190), Sym(224), Sym(225), Sym(226), Sym(227))
AliasRep: List(Sym(252)) deps: List(Sym(252))
AliasRep: List(Sym(274), Sym(275), Sym(276)) deps: List(Sym(273), Sym(274), Sym(275), Sym(276))
AliasRep: List(Sym(278), Sym(279)) deps: List(Sym(278), Sym(279))
AliasRep: List(Sym(272)) deps: List(Sym(257), Sym(271), Sym(272), Sym(273), Sym(278))
AliasRep: List(Sym(299), Sym(300), Sym(301)) deps: List(Sym(247), Sym(298), Sym(299), Sym(300), Sym(301))
AliasRep: List(Sym(303), Sym(304)) deps: List(Sym(247), Sym(303), Sym(304))
AliasRep: List(Sym(241)) deps: List(Sym(246), Sym(307), Sym(308))
AliasRep: List(Sym(240), Sym(313)) deps: List(Sym(185), Sym(233), Sym(240), Sym(313))
AliasRep: List(Sym(341)) deps: List(Sym(340), Sym(341))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdate extends ((Int)=>(Unit)) {
def apply(x184:Int): Unit = {
val x185 = new HashMap[Int,Int](200)
val x186 = x185.table
val x187 = x186.length
val x2 = 1.hashCode
val x3 = x2.toLong
val x4 = x3 >>> 20
val x5 = x3 >>> 12
val x6 = x4 ^ x5
val x7 = x6 ^ x3
val x8 = x7 >>> 7
val x9 = x7 ^ x8
val x10 = x7 >>> 4
val x11 = x9 ^ x10
val x12 = x11.toInt
val x188 = x187 - 1
val x189 = x12 & x188
val x190 = x186(x189)
var x191 = x190
val x192 = x185.size
val x193 = x185.threshold
val x194 = x185.MAXIMUM_CAPACITY
val x195 = x191
val x196 = x195 == null
if (x196) {
val x197 = new Entry(1, 2)
val x198 = x186(x189)
x186(x189) = x197
val x200 = x192 + 1
x185.size = x200

} else {
while ({
val x203 = x191
val x204 = x203.hasNext
val x210 = if (x204) {
val x205 = x191
val x206 = x205.key
val x207 = x206 != 1

x207
} else false

x210
}) {
val x212 = x191
val x213 = x212.next
x191 = x213
()
}
val x217 = x191
val x218 = x217.key
val x219 = x218 == 1
if (x219) {
val x220 = x191
val x221 = x220.value
x220.value = 2

} else {
val x224 = x191
val x225 = new Entry(1, 2)
val x226 = x224.next
val x227 = x224.hasNext
x224.next = x225
val x200 = x192 + 1
x185.size = x200

}

}
val x234 = x192 >= x193
if (x234) {
val x235 = x186.length
val x236 = x235 == x194
if (x236) {
val x63 = scala.Int.MaxValue
x185.threshold = x63

} else {
val x239 = 2 * x235
val x240 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x239)
var x241 = 0
val x269 = x239 - 1
val x270 = x12 & x269
while ({
val x242 = x241
val x243 = x186.length
val x244 = x242 < x243
x244
}) {
val x246 = x241
val x247 = x186(x246)
var x248 = x247
val x249 = x248
val x250 = x249 != null
if (x250) {
val x251 = x241
val x252 = x186(x251)
x186(x251) = null
while ({
val x254 = x248
val x255 = x254.hasNext
x255
}) {
val x257 = x248
val x258 = x257.key
val x271 = x248
val x272 = x271.next
val x273 = x248
val x274 = x240(x270)
val x275 = x273.next
val x276 = x273.hasNext
x273.next = x274
val x278 = x248
val x279 = x240(x270)
x240(x270) = x278
x248 = x272
()
}
val x284 = x248
val x285 = x284.key
val x296 = x248
val x297 = x296.next
val x298 = x248
val x299 = x240(x270)
val x300 = x298.next
val x301 = x298.hasNext
x298.next = x299
val x303 = x248
val x304 = x240(x270)
x240(x270) = x303

} else {
()
}
val x308 = x241
val x309 = x308 + 1
x241 = x309
()
}
val x313 = x185.table
x185.table = x240
val x315 = x185.loadFactor
val x316 = x315 * x239
val x317 = x316.asInstanceOf[Int]
x185.threshold = x317

}

} else {
()
}
val x323 = x185.table
val x324 = x323.length
val x325 = x324 - 1
val x326 = x12 & x325
val x327 = x323(x326)
var x328 = x327
val x329 = x328
val x330 = x329 == null
val x354 = if (x330) {
val x158 = None
x158
} else {
while ({
val x331 = x328
val x332 = x331.hasNext
val x338 = if (x332) {
val x333 = x328
val x334 = x333.key
val x335 = x334 != 1

x335
} else false

x338
}) {
val x340 = x328
val x341 = x340.next
x328 = x341
()
}
val x345 = x328
val x346 = x345.key
val x347 = x346 == 1
val x352 = if (x347) {
val x348 = x328
val x349 = x348.value
val x350 = Some(x349)
x350
} else {
val x158 = None
x158
}
x352
}
println(x354)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
