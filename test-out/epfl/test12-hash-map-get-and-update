/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdate extends ((Int)=>(Unit)) {
def apply(x150:Int): Unit = {
val x151 = new HashMap[Int,Int](200)
val x152 = x151.table
val x153 = x151.size
val x154 = x151.loadFactor
val x155 = x151.MAXIMUM_CAPACITY
val x156 = x151.threshold
val x157 = x152.length
val x6 = 1.hashCode
val x7 = x6.toLong
val x8 = x7 >>> 20
val x9 = x7 >>> 12
val x10 = x8 ^ x9
val x11 = x10 ^ x7
val x12 = x11 >>> 7
val x13 = x11 ^ x12
val x14 = x11 >>> 4
val x15 = x13 ^ x14
val x16 = x15.toInt
val x158 = x157 - 1
val x159 = x16 & x158
val x160 = x152(x159)
var x161 = x160
val x162 = x161
val x163 = x162 == null
if (x163) {
val x164 = new Entry(1, 2)
x152(x159) = x164
val x166 = x153 + 1
x151.size = x166

} else {
while ({
val x169 = x161
val x170 = x169.hasNext
val x176 = if (x170) {
val x171 = x161
val x172 = x171.key
val x173 = x172 != 1

x173
} else false

x176
}) {
val x178 = x161
val x179 = x178.next
x161 = x179
()
}
val x183 = x161
val x184 = x183.key
val x185 = x184 == 1
if (x185) {
val x186 = x183.value
x183.value = 2

} else {
val x189 = new Entry(1, 2)
val x190 = x183.next
val x191 = x183.hasNext
x183.next = x189
val x166 = x153 + 1
x151.size = x166

}

}
val x198 = x151.size
val x199 = x198 >= x156
if (x199) {
val x200 = x157 == x155
if (x200) {
val x61 = scala.Int.MaxValue
x151.threshold = x61

} else {
val x203 = 2 * x157
val x204 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x203)
var x205 = 0
val x232 = x203 - 1
while ({
val x206 = x205
val x207 = x152.length
val x208 = x206 < x207
x208
}) {
val x210 = x205
val x211 = x152(x210)
var x212 = x211
val x213 = x212
val x214 = x213 != null
if (x214) {
x152(x210) = null
while ({
val x216 = x212
val x217 = x216 != null
x217
}) {
val x219 = x212
val x220 = x219.key
val x234 = x219.next
val x221 = x220.hashCode
val x222 = x221.toLong
val x223 = x222 >>> 20
val x224 = x222 >>> 12
val x225 = x223 ^ x224
val x226 = x225 ^ x222
val x227 = x226 >>> 7
val x228 = x226 ^ x227
val x229 = x226 >>> 4
val x230 = x228 ^ x229
val x231 = x230.toInt
val x233 = x231 & x232
val x235 = x204(x233)
val x236 = x219.hasNext
x219.next = x235
x204(x233) = x219
x212 = x234
()
}

} else {
()
}
val x244 = x210 + 1
x205 = x244
()
}
x151.table = x204
val x249 = x154 * x203
val x250 = x249.asInstanceOf[Int]
x151.threshold = x250

}

} else {
()
}
val x256 = x151.table
val x257 = x256.length
val x258 = x257 - 1
val x259 = x16 & x258
val x260 = x256(x259)
var x261 = x260
val x262 = x261
val x263 = x262 == null
val x286 = if (x263) {
val x125 = None
x125
} else {
while ({
val x264 = x261
val x265 = x264.hasNext
val x271 = if (x265) {
val x266 = x261
val x267 = x266.key
val x268 = x267 != 1

x268
} else false

x271
}) {
val x273 = x261
val x274 = x273.next
x261 = x274
()
}
val x278 = x261
val x279 = x278.key
val x280 = x279 == 1
val x284 = if (x280) {
val x281 = x278.value
val x282 = Some(x281)
x282
} else {
val x125 = None
x125
}
x284
}
println(x286)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
