/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapComplexNested extends ((Int)=>(Unit)) {
def apply(x807:Int): Unit = {
val x808 = new HashMap[Int,scala.virtualization.lms.epfl.test12.HashMap[Int, Int]](1)
val x809 = x808.table
val x815 = new HashMap[Int,Int](1)
val x816 = x815.table
val x818 = x815.size
val x822 = new HashMap[Int,Int](1)
val x23 = (1.hashCode).toLong
val x27 = ((x23 >>> 20) ^ (x23 >>> 12)) ^ x23
val x32 = ((x27 ^ (x27 >>> 7)) ^ (x27 >>> 4)).toInt
val x831 = x32 & ((x809.length) - 1)
var x833:Entry[Int, HashMap[Int, Int]] = (x809(x831))
val x839 = (x808.size) + 1
if (((x833) == null)) {
val x837 = new Entry(1, x815)
x809(x831) = x837
x808.size = x839
()
} else {
while ({
(if (((x833).hasNext)) {

(((x833).key) != 1)
} else false
)
}) {
x833 = ((x833).next)
()
}
val x856 = x833
if (((x856.key) == 1)) {
x856.value = x815
()
} else {
val x862 = new Entry(1, x815)
x856.next = x862
x808.size = x839
()
}
()
}
x808.resize()
val x872 = x808.table
val x78 = (2.hashCode).toLong
val x82 = ((x78 >>> 20) ^ (x78 >>> 12)) ^ x78
val x875 = (((x82 ^ (x82 >>> 7)) ^ (x82 >>> 4)).toInt) & ((x872.length) - 1)
var x877:Entry[Int, HashMap[Int, Int]] = (x872(x875))
if (((x877) == null)) {
val x880 = new Entry(2, x822)
x872(x875) = x880
x808.size = ((x808.size) + 1)
()
} else {
while ({
(if (((x877).hasNext)) {

(((x877).key) != 2)
} else false
)
}) {
x877 = ((x877).next)
()
}
val x900 = x877
if (((x900.key) == 2)) {
x900.value = x822
()
} else {
val x906 = new Entry(2, x822)
x900.next = x906
x808.size = ((x808.size) + 1)
()
}
()
}
x808.resize()
val x921 = x32 & ((x816.length) - 1)
var x923:Entry[Int, Int] = (x816(x921))
if (((x923) == null)) {
val x926 = new Entry(1, 1)
x816(x921) = x926
val x928 = x818 + 1
x815.size = x928
()
} else {
while ({
(if (((x923).hasNext)) {

(((x923).key) != 1)
} else false
)
}) {
x923 = ((x923).next)
()
}
val x945 = x923
if (((x945.key) == 1)) {
x945.value = 1
()
} else {
val x951 = new Entry(1, 1)
x945.next = x951
val x928 = x818 + 1
x815.size = x928
()
}
()
}
x815.resize()
val x961 = x808.table
var x966:Entry[Int, HashMap[Int, Int]] = (x961((x32 & ((x961.length) - 1))))
val x183 = None
val x991 = if (((x966) == null)) {
x183
} else {
while ({
(if (((x966).hasNext)) {

(((x966).key) != 1)
} else false
)
}) {
x966 = ((x966).next)
()
}
val x983 = x966
(if (((x983.key) == 1)) {
while ({
(if (((x966).hasNext)) {

(((x966).key) != 1)
} else false
)
}) {
x966 = ((x966).next)
()
}
val x983 = x966
(Some((x983.value)))
} else {
x183
})
}
val x992 = x991.get
val x993 = x992.table
val x996 = x32 & ((x993.length) - 1)
var x998:Entry[Int, Int] = (x993(x996))
if (((x998) == null)) {
val x1001 = new Entry(1, 2)
x993(x996) = x1001
x992.size = ((x992.size) + 1)
()
} else {
while ({
(if (((x998).hasNext)) {

(((x998).key) != 1)
} else false
)
}) {
x998 = ((x998).next)
()
}
val x1021 = x998
if (((x1021.key) == 1)) {
x1021.value = 2
()
} else {
val x1027 = new Entry(1, 2)
x1021.next = x1027
x992.size = ((x992.size) + 1)
()
}
()
}
x992.resize()
var x1040:Int = 0
val x256 = null.asInstanceOf[Entry[Int, HashMap[Int, Int]]]
var x1041:Entry[Int, HashMap[Int, Int]] = x256
val x271 = null.asInstanceOf[Entry[Int, Int]]
while ({
((x1040) < (x961.length))
}) {
val x1046 = x1040
val x1047 = x961(x1046)
if ((x1047 != null)) {
x1041 = x1047
println(x1047)
val x1052 = (x1047.value).table
var x1053:Int = 0
var x1055:Entry[Int, Int] = x271
while ({
((x1053) < (x1052.length))
}) {
val x1060 = x1053
val x1061 = x1052(x1060)
if ((x1061 != null)) {
x1055 = x1061
println(x1061)
while ({
((x1055).hasNext)
}) {
x1055 = ((x1055).next)
println((x1055))
()
}
()
} else {
()
}
x1053 = (x1060 + 1)
()
}
while ({
((x1041).hasNext)
}) {
x1041 = ((x1041).next)
val x1087 = x1041
println(x1087)
val x1090 = (x1087.value).table
var x1091:Int = 0
var x1093:Entry[Int, Int] = x271
while ({
((x1091) < (x1090.length))
}) {
val x1098 = x1091
val x1099 = x1090(x1098)
if ((x1099 != null)) {
x1093 = x1099
println(x1099)
while ({
((x1093).hasNext)
}) {
x1093 = ((x1093).next)
println((x1093))
()
}
()
} else {
()
}
x1091 = (x1098 + 1)
()
}
()
}
()
} else {
()
}
x1040 = (x1046 + 1)
()
}
var x1127:Int = 0
var x1128:Entry[Int, HashMap[Int, Int]] = x256
val x355 = null.asInstanceOf[HashMap[Int, Int]]
while ({
((x1127) < (x961.length))
}) {
val x1133 = x1127
val x1134 = x961(x1133)
if ((x1134 != null)) {
x1128 = x1134
val x1137 = x1134.key
val x1138 = x808.table
val x1141 = (x1137.hashCode).toLong
val x1145 = ((x1141 >>> 20) ^ (x1141 >>> 12)) ^ x1141
val x1152 = (((x1145 ^ (x1145 >>> 7)) ^ (x1145 >>> 4)).toInt) & ((x1138.length) - 1)
var x1154:Entry[Int, HashMap[Int, Int]] = (x1138(x1152))
if (((x1154) == null)) {
val x1158 = new Entry(x1137, x355)
x1138(x1152) = x1158
x808.size = ((x808.size) + 1)
()
} else {
while ({
(if (((x1154).hasNext)) {

(((x1154).key) != x1137)
} else false
)
}) {
x1154 = ((x1154).next)
()
}
val x1178 = x1154
if (((x1178.key) == x1137)) {
x1178.value = x355
()
} else {
val x1184 = new Entry(x1137, x355)
x1178.next = x1184
x808.size = ((x808.size) + 1)
()
}
()
}
x808.resize()
while ({
((x1128).hasNext)
}) {
x1128 = ((x1128).next)
val x1204 = (x1128).key
val x1205 = x808.table
val x1208 = (x1204.hashCode).toLong
val x1212 = ((x1208 >>> 20) ^ (x1208 >>> 12)) ^ x1208
val x1219 = (((x1212 ^ (x1212 >>> 7)) ^ (x1212 >>> 4)).toInt) & ((x1205.length) - 1)
var x1221:Entry[Int, HashMap[Int, Int]] = (x1205(x1219))
if (((x1221) == null)) {
val x1225 = new Entry(x1204, x355)
x1205(x1219) = x1225
x808.size = ((x808.size) + 1)
()
} else {
while ({
(if (((x1221).hasNext)) {

(((x1221).key) != x1204)
} else false
)
}) {
x1221 = ((x1221).next)
()
}
val x1245 = x1221
if (((x1245.key) == x1204)) {
x1245.value = x355
()
} else {
val x1251 = new Entry(x1204, x355)
x1245.next = x1251
x808.size = ((x808.size) + 1)
()
}
()
}
x808.resize()
()
}
()
} else {
()
}
x1127 = (x1133 + 1)
()
}
var x1272:Int = 0
var x1273:Entry[Int, HashMap[Int, Int]] = x256
while ({
((x1272) < (x961.length))
}) {
val x1278 = x1272
val x1279 = x961(x1278)
if ((x1279 != null)) {
x1273 = x1279
println(x1279)
while ({
((x1273).hasNext)
}) {
x1273 = ((x1273).next)
println((x1273))
()
}
()
} else {
()
}
x1272 = (x1278 + 1)
()
}
var x1299:Int = 0
var x1300:Entry[Int, HashMap[Int, Int]] = x256
while ({
((x1299) < (x961.length))
}) {
val x1305 = x1299
val x1306 = x961(x1305)
if ((x1306 != null)) {
x1300 = x1306
val x1309 = x1306.key
val x1310 = x808.table
var x1325:Entry[Int, HashMap[Int, Int]] = x256
val x1313 = (x1309.hashCode).toLong
val x1317 = ((x1313 >>> 20) ^ (x1313 >>> 12)) ^ x1313
val x1324 = (((x1317 ^ (x1317 >>> 7)) ^ (x1317 >>> 4)).toInt) & ((x1310.length) - 1)
var x1328:Entry[Int, HashMap[Int, Int]] = (x1310(x1324))
if (((x1328) != null)) {
while ({
(if (((x1328).hasNext)) {

(((x1328).key) != x1309)
} else false
)
}) {
val x1340 = x1328
x1325 = x1340
x1328 = (x1340.next)
()
}
val x1346 = x1325
if ((x1346 == null)) {
x1310(x1324) = null
x808.size = ((x808.size) - 1)
()
} else {
val x1353 = x1328
if (((x1353.key) == x1309)) {
x1346.next = (x1353.next)
x808.size = ((x808.size) - 1)
()
} else {
()
}
()
}
()
} else {
()
}
while ({
((x1300).hasNext)
}) {
x1300 = ((x1300).next)
val x1376 = (x1300).key
val x1377 = x808.table
var x1392:Entry[Int, HashMap[Int, Int]] = x256
val x1380 = (x1376.hashCode).toLong
val x1384 = ((x1380 >>> 20) ^ (x1380 >>> 12)) ^ x1380
val x1391 = (((x1384 ^ (x1384 >>> 7)) ^ (x1384 >>> 4)).toInt) & ((x1377.length) - 1)
var x1395:Entry[Int, HashMap[Int, Int]] = (x1377(x1391))
if (((x1395) != null)) {
while ({
(if (((x1395).hasNext)) {

(((x1395).key) != x1376)
} else false
)
}) {
val x1407 = x1395
x1392 = x1407
x1395 = (x1407.next)
()
}
val x1413 = x1392
if ((x1413 == null)) {
x1377(x1391) = null
x808.size = ((x808.size) - 1)
()
} else {
val x1420 = x1395
if (((x1420.key) == x1376)) {
x1413.next = (x1420.next)
x808.size = ((x808.size) - 1)
()
} else {
()
}
()
}
()
} else {
()
}
()
}
()
} else {
()
}
x1299 = (x1305 + 1)
()
}
val x664 = (3.hashCode).toLong
val x668 = ((x664 >>> 20) ^ (x664 >>> 12)) ^ x664
val x1446 = (((x668 ^ (x668 >>> 7)) ^ (x668 >>> 4)).toInt) & ((x961.length) - 1)
var x1448:Entry[Int, HashMap[Int, Int]] = (x961(x1446))
if (((x1448) == null)) {
val x1451 = new Entry(3, x815)
x961(x1446) = x1451
x808.size = ((x808.size) + 1)
()
} else {
while ({
(if (((x1448).hasNext)) {

(((x1448).key) != 3)
} else false
)
}) {
x1448 = ((x1448).next)
()
}
val x1471 = x1448
if (((x1471.key) == 3)) {
x1471.value = x815
()
} else {
val x1477 = new Entry(3, x815)
x1471.next = x1477
x808.size = ((x808.size) + 1)
()
}
()
}
x808.resize()
val x1490 = x808.table
var x1491:Int = 0
var x1492:Entry[Int, HashMap[Int, Int]] = x256
while ({
((x1491) < (x1490.length))
}) {
val x1497 = x1491
val x1498 = x1490(x1497)
if ((x1498 != null)) {
x1492 = x1498
println(x1498)
val x1503 = (x1498.value).table
var x1504:Int = 0
var x1506:Entry[Int, Int] = x271
while ({
((x1504) < (x1503.length))
}) {
val x1511 = x1504
val x1512 = x1503(x1511)
if ((x1512 != null)) {
x1506 = x1512
println(x1512)
while ({
((x1506).hasNext)
}) {
x1506 = ((x1506).next)
println((x1506))
()
}
()
} else {
()
}
x1504 = (x1511 + 1)
()
}
while ({
((x1492).hasNext)
}) {
x1492 = ((x1492).next)
val x1538 = x1492
println(x1538)
val x1541 = (x1538.value).table
var x1542:Int = 0
var x1544:Entry[Int, Int] = x271
while ({
((x1542) < (x1541.length))
}) {
val x1549 = x1542
val x1550 = x1541(x1549)
if ((x1550 != null)) {
x1544 = x1550
println(x1550)
while ({
((x1544).hasNext)
}) {
x1544 = ((x1544).next)
println((x1544))
()
}
()
} else {
()
}
x1542 = (x1549 + 1)
()
}
()
}
()
} else {
()
}
x1491 = (x1497 + 1)
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
