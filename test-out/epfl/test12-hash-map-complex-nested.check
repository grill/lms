/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapComplexNested extends ((Int)=>(Unit)) {
def apply(x1221:Int): Unit = {
val x1222 = new HashMap[Int,scala.virtualization.lms.epfl.test12.HashMap[Int, Int]](1)
val x1223 = x1222.table
val x1224 = x1223(0)
val x1225 = x1222.size
val x1226 = x1222.loadFactor
val x1227 = x1222.MAXIMUM_CAPACITY
val x1228 = x1222.threshold
val x1229 = new HashMap[Int,Int](1)
val x1230 = x1229.table
val x1231 = x1230(0)
val x1232 = x1229.size
val x1233 = x1229.loadFactor
val x1234 = x1229.MAXIMUM_CAPACITY
val x1235 = x1229.threshold
val x1236 = new HashMap[Int,Int](1)
val x1237 = x1236.table
val x1238 = x1237(0)
val x1239 = x1236.size
val x1240 = x1236.loadFactor
val x1241 = x1236.MAXIMUM_CAPACITY
val x1242 = x1236.threshold
val x1243 = x1223.length
val x22 = 1.hashCode
val x23 = x22.toLong
val x24 = x23 >>> 20
val x25 = x23 >>> 12
val x26 = x24 ^ x25
val x27 = x26 ^ x23
val x28 = x27 >>> 7
val x29 = x27 ^ x28
val x30 = x27 >>> 4
val x31 = x29 ^ x30
val x32 = x31.toInt
val x1244 = x1243 - 1
val x1245 = x32 & x1244
val x1246 = x1223(x1245)
var x1247: Entry[Int, HashMap[Int, Int]] = x1246
val x1249 = x1247
val x1250 = x1249 == null
val x1253 = x1225 + 1
if (x1250) {
val x1251 = new Entry(1, x1229)
x1223(x1245) = x1251
x1222.size = x1253

} else {
while ({
val x1256 = x1247
val x1257 = x1256.hasNext
val x1263 = if (x1257) {
val x1258 = x1247
val x1259 = x1258.key
val x1260 = x1259 != 1

x1260
} else false

x1263
}) {
val x1265 = x1247
val x1266 = x1265.next
x1247 = x1266
()
}
val x1270 = x1247
val x1271 = x1270.key
val x1272 = x1271 == 1
if (x1272) {
val x1273 = x1270.value
x1270.value = x1229

} else {
val x1276 = new Entry(1, x1229)
val x1277 = x1270.next
val x1278 = x1270.hasNext
x1270.next = x1276
x1222.size = x1253

}

}
val x1285 = x1222.size
val x1286 = x1285 >= x1228
val x78 = scala.Int.MaxValue
if (x1286) {
val x1287 = x1223.length
val x1288 = x1287 == x1227
if (x1288) {
x1222.threshold = x78

} else {
val x1291 = 2 * x1287
val x1292 = new Array[Entry[Int, HashMap[Int, Int]]](x1291)
var x1293: Int = 0
val x1321 = x1291 - 1
while ({
val x1294 = x1293
val x1295 = x1223.length
val x1296 = x1294 < x1295
x1296
}) {
val x1298 = x1293
val x1299 = x1223(x1298)
var x1300: Entry[Int, HashMap[Int, Int]] = x1299
val x1302 = x1300
val x1303 = x1302 != null
if (x1303) {
x1223(x1298) = null
while ({
val x1305 = x1300
val x1306 = x1305 != null
x1306
}) {
val x1308 = x1300
val x1309 = x1308.key
val x1323 = x1308.next
val x1310 = x1309.hashCode
val x1311 = x1310.toLong
val x1312 = x1311 >>> 20
val x1313 = x1311 >>> 12
val x1314 = x1312 ^ x1313
val x1315 = x1314 ^ x1311
val x1316 = x1315 >>> 7
val x1317 = x1315 ^ x1316
val x1318 = x1315 >>> 4
val x1319 = x1317 ^ x1318
val x1320 = x1319.toInt
val x1322 = x1320 & x1321
val x1324 = x1292(x1322)
val x1325 = x1308.hasNext
x1308.next = x1324
x1292(x1322) = x1308
x1300 = x1323
()
}

} else {
()
}
val x1333 = x1298 + 1
x1293 = x1333
()
}
x1222.table = x1292
val x1338 = x1226 * x1291
val x1339 = x1338.asInstanceOf[Int]
x1222.threshold = x1339

}

} else {
()
}
val x1345 = x1222.table
val x1346 = x1345.length
val x137 = 2.hashCode
val x138 = x137.toLong
val x139 = x138 >>> 20
val x140 = x138 >>> 12
val x141 = x139 ^ x140
val x142 = x141 ^ x138
val x143 = x142 >>> 7
val x144 = x142 ^ x143
val x145 = x142 >>> 4
val x146 = x144 ^ x145
val x147 = x146.toInt
val x1347 = x1346 - 1
val x1348 = x147 & x1347
val x1349 = x1345(x1348)
var x1350: Entry[Int, HashMap[Int, Int]] = x1349
val x1351 = x1350
val x1352 = x1351 == null
val x1355 = x1285 + 1
if (x1352) {
val x1353 = new Entry(2, x1236)
x1345(x1348) = x1353
x1222.size = x1355

} else {
while ({
val x1358 = x1350
val x1359 = x1358.hasNext
val x1365 = if (x1359) {
val x1360 = x1350
val x1361 = x1360.key
val x1362 = x1361 != 2

x1362
} else false

x1365
}) {
val x1367 = x1350
val x1368 = x1367.next
x1350 = x1368
()
}
val x1372 = x1350
val x1373 = x1372.key
val x1374 = x1373 == 2
if (x1374) {
val x1375 = x1372.value
x1372.value = x1236

} else {
val x1378 = new Entry(2, x1236)
val x1379 = x1372.next
val x1380 = x1372.hasNext
x1372.next = x1378
x1222.size = x1355

}

}
val x1387 = x1222.threshold
val x1388 = x1222.size
val x1389 = x1388 >= x1387
if (x1389) {
val x1390 = x1345.length
val x1391 = x1390 == x1227
if (x1391) {
x1222.threshold = x78

} else {
val x1394 = 2 * x1390
val x1395 = new Array[Entry[Int, HashMap[Int, Int]]](x1394)
var x1396: Int = 0
val x1424 = x1394 - 1
while ({
val x1397 = x1396
val x1398 = x1345.length
val x1399 = x1397 < x1398
x1399
}) {
val x1401 = x1396
val x1402 = x1345(x1401)
var x1403: Entry[Int, HashMap[Int, Int]] = x1402
val x1405 = x1403
val x1406 = x1405 != null
if (x1406) {
x1345(x1401) = null
while ({
val x1408 = x1403
val x1409 = x1408 != null
x1409
}) {
val x1411 = x1403
val x1412 = x1411.key
val x1426 = x1411.next
val x1413 = x1412.hashCode
val x1414 = x1413.toLong
val x1415 = x1414 >>> 20
val x1416 = x1414 >>> 12
val x1417 = x1415 ^ x1416
val x1418 = x1417 ^ x1414
val x1419 = x1418 >>> 7
val x1420 = x1418 ^ x1419
val x1421 = x1418 >>> 4
val x1422 = x1420 ^ x1421
val x1423 = x1422.toInt
val x1425 = x1423 & x1424
val x1427 = x1395(x1425)
val x1428 = x1411.hasNext
x1411.next = x1427
x1395(x1425) = x1411
x1403 = x1426
()
}

} else {
()
}
val x1436 = x1401 + 1
x1396 = x1436
()
}
x1222.table = x1395
val x1441 = x1226 * x1394
val x1442 = x1441.asInstanceOf[Int]
x1222.threshold = x1442

}

} else {
()
}
val x1448 = x1230.length
val x1449 = x1448 - 1
val x1450 = x32 & x1449
val x1451 = x1230(x1450)
var x1452: Entry[Int, Int] = x1451
val x1453 = x1452
val x1454 = x1453 == null
val x1457 = x1232 + 1
if (x1454) {
val x1455 = new Entry(1, 1)
x1230(x1450) = x1455
x1229.size = x1457

} else {
while ({
val x1460 = x1452
val x1461 = x1460.hasNext
val x1467 = if (x1461) {
val x1462 = x1452
val x1463 = x1462.key
val x1464 = x1463 != 1

x1464
} else false

x1467
}) {
val x1469 = x1452
val x1470 = x1469.next
x1452 = x1470
()
}
val x1474 = x1452
val x1475 = x1474.key
val x1476 = x1475 == 1
if (x1476) {
val x1477 = x1474.value
x1474.value = 1

} else {
val x1480 = new Entry(1, 1)
val x1481 = x1474.next
val x1482 = x1474.hasNext
x1474.next = x1480
x1229.size = x1457

}

}
val x1489 = x1229.size
val x1490 = x1489 >= x1235
if (x1490) {
val x1491 = x1230.length
val x1492 = x1491 == x1234
if (x1492) {
x1229.threshold = x78

} else {
val x1495 = 2 * x1491
val x1496 = new Array[Entry[Int, Int]](x1495)
var x1497: Int = 0
val x1525 = x1495 - 1
while ({
val x1498 = x1497
val x1499 = x1230.length
val x1500 = x1498 < x1499
x1500
}) {
val x1502 = x1497
val x1503 = x1230(x1502)
var x1504: Entry[Int, Int] = x1503
val x1506 = x1504
val x1507 = x1506 != null
if (x1507) {
x1230(x1502) = null
while ({
val x1509 = x1504
val x1510 = x1509 != null
x1510
}) {
val x1512 = x1504
val x1513 = x1512.key
val x1527 = x1512.next
val x1514 = x1513.hashCode
val x1515 = x1514.toLong
val x1516 = x1515 >>> 20
val x1517 = x1515 >>> 12
val x1518 = x1516 ^ x1517
val x1519 = x1518 ^ x1515
val x1520 = x1519 >>> 7
val x1521 = x1519 ^ x1520
val x1522 = x1519 >>> 4
val x1523 = x1521 ^ x1522
val x1524 = x1523.toInt
val x1526 = x1524 & x1525
val x1528 = x1496(x1526)
val x1529 = x1512.hasNext
x1512.next = x1528
x1496(x1526) = x1512
x1504 = x1527
()
}

} else {
()
}
val x1537 = x1502 + 1
x1497 = x1537
()
}
x1229.table = x1496
val x1542 = x1233 * x1495
val x1543 = x1542.asInstanceOf[Int]
x1229.threshold = x1543

}

} else {
()
}
val x1549 = x1222.table
val x1550 = x1549.length
val x1551 = x1550 - 1
val x1552 = x32 & x1551
val x1553 = x1549(x1552)
var x1554: Entry[Int, HashMap[Int, Int]] = x1553
val x1555 = x1554
val x1556 = x1555 == null
val x358 = None
val x1579 = if (x1556) {
x358
} else {
while ({
val x1557 = x1554
val x1558 = x1557.hasNext
val x1564 = if (x1558) {
val x1559 = x1554
val x1560 = x1559.key
val x1561 = x1560 != 1

x1561
} else false

x1564
}) {
val x1566 = x1554
val x1567 = x1566.next
x1554 = x1567
()
}
val x1571 = x1554
val x1572 = x1571.key
val x1573 = x1572 == 1
val x1577 = if (x1573) {
val x1574 = x1571.value
val x1575 = Some(x1574)
x1575
} else {
x358
}
x1577
}
val x1580 = x1579.get
val x1581 = x1580.table
val x1582 = x1581.length
val x1583 = x1582 - 1
val x1584 = x32 & x1583
val x1585 = x1581(x1584)
var x1586: Entry[Int, Int] = x1585
val x1587 = x1586
val x1588 = x1587 == null
if (x1588) {
val x1589 = new Entry(1, 2)
x1581(x1584) = x1589
val x1591 = x1580.size
val x1592 = x1591 + 1
x1580.size = x1592

} else {
while ({
val x1595 = x1586
val x1596 = x1595.hasNext
val x1602 = if (x1596) {
val x1597 = x1586
val x1598 = x1597.key
val x1599 = x1598 != 1

x1599
} else false

x1602
}) {
val x1604 = x1586
val x1605 = x1604.next
x1586 = x1605
()
}
val x1609 = x1586
val x1610 = x1609.key
val x1611 = x1610 == 1
if (x1611) {
val x1612 = x1609.value
x1609.value = 2

} else {
val x1615 = new Entry(1, 2)
val x1616 = x1609.next
val x1617 = x1609.hasNext
x1609.next = x1615
val x1619 = x1580.size
val x1620 = x1619 + 1
x1580.size = x1620

}

}
val x1626 = x1580.threshold
val x1627 = x1580.MAXIMUM_CAPACITY
val x1628 = x1580.size
val x1629 = x1628 >= x1626
if (x1629) {
val x1630 = x1581.length
val x1631 = x1630 == x1627
if (x1631) {
x1580.threshold = x78

} else {
val x1634 = 2 * x1630
val x1635 = new Array[Entry[Int, Int]](x1634)
var x1636: Int = 0
val x1664 = x1634 - 1
while ({
val x1637 = x1636
val x1638 = x1581.length
val x1639 = x1637 < x1638
x1639
}) {
val x1641 = x1636
val x1642 = x1581(x1641)
var x1643: Entry[Int, Int] = x1642
val x1645 = x1643
val x1646 = x1645 != null
if (x1646) {
x1581(x1641) = null
while ({
val x1648 = x1643
val x1649 = x1648 != null
x1649
}) {
val x1651 = x1643
val x1652 = x1651.key
val x1666 = x1651.next
val x1653 = x1652.hashCode
val x1654 = x1653.toLong
val x1655 = x1654 >>> 20
val x1656 = x1654 >>> 12
val x1657 = x1655 ^ x1656
val x1658 = x1657 ^ x1654
val x1659 = x1658 >>> 7
val x1660 = x1658 ^ x1659
val x1661 = x1658 >>> 4
val x1662 = x1660 ^ x1661
val x1663 = x1662.toInt
val x1665 = x1663 & x1664
val x1667 = x1635(x1665)
val x1668 = x1651.hasNext
x1651.next = x1667
x1635(x1665) = x1651
x1643 = x1666
()
}

} else {
()
}
val x1676 = x1641 + 1
x1636 = x1676
()
}
x1580.table = x1635
val x1681 = x1580.loadFactor
val x1682 = x1681 * x1634
val x1683 = x1682.asInstanceOf[Int]
x1580.threshold = x1683

}

} else {
()
}
var x1689: Int = 0
val x492 = null.asInstanceOf[Entry[Int, HashMap[Int, Int]]]
var x1690: Entry[Int, HashMap[Int, Int]] = x492
val x507 = null.asInstanceOf[Entry[Int, Int]]
while ({
val x1691 = x1689
val x1692 = x1549.length
val x1693 = x1691 < x1692
x1693
}) {
val x1695 = x1689
val x1696 = x1549(x1695)
val x1697 = x1696 != null
if (x1697) {
x1690 = x1696
println(x1696)
val x1700 = x1696.value
val x1701 = x1700.table
var x1702: Int = 0
var x1704: Entry[Int, Int] = x507
while ({
val x1705 = x1702
val x1706 = x1701.length
val x1707 = x1705 < x1706
x1707
}) {
val x1709 = x1702
val x1710 = x1701(x1709)
val x1711 = x1710 != null
if (x1711) {
x1704 = x1710
println(x1710)
while ({
val x1714 = x1704
val x1715 = x1714.hasNext
x1715
}) {
val x1717 = x1704
val x1718 = x1717.next
x1704 = x1718
val x1720 = x1704
println(x1720)

}

} else {
()
}
val x1726 = x1709 + 1
x1702 = x1726
()
}
while ({
val x1730 = x1690
val x1731 = x1730.hasNext
x1731
}) {
val x1733 = x1690
val x1734 = x1733.next
x1690 = x1734
val x1736 = x1690
println(x1736)
val x1738 = x1736.value
val x1739 = x1738.table
var x1740: Int = 0
var x1742: Entry[Int, Int] = x507
while ({
val x1743 = x1740
val x1744 = x1739.length
val x1745 = x1743 < x1744
x1745
}) {
val x1747 = x1740
val x1748 = x1739(x1747)
val x1749 = x1748 != null
if (x1749) {
x1742 = x1748
println(x1748)
while ({
val x1752 = x1742
val x1753 = x1752.hasNext
x1753
}) {
val x1755 = x1742
val x1756 = x1755.next
x1742 = x1756
val x1758 = x1742
println(x1758)

}

} else {
()
}
val x1764 = x1747 + 1
x1740 = x1764
()
}

}

} else {
()
}
val x1772 = x1695 + 1
x1689 = x1772
()
}
var x1776: Int = 0
var x1777: Entry[Int, HashMap[Int, Int]] = x492
val x591 = null.asInstanceOf[HashMap[Int, Int]]
while ({
val x1778 = x1776
val x1779 = x1549.length
val x1780 = x1778 < x1779
x1780
}) {
val x1782 = x1776
val x1783 = x1549(x1782)
val x1784 = x1783 != null
if (x1784) {
x1777 = x1783
val x1786 = x1783.key
val x1787 = x1222.table
val x1788 = x1787.length
val x1789 = x1786.hashCode
val x1790 = x1789.toLong
val x1791 = x1790 >>> 20
val x1792 = x1790 >>> 12
val x1793 = x1791 ^ x1792
val x1794 = x1793 ^ x1790
val x1795 = x1794 >>> 7
val x1796 = x1794 ^ x1795
val x1797 = x1794 >>> 4
val x1798 = x1796 ^ x1797
val x1799 = x1798.toInt
val x1800 = x1788 - 1
val x1801 = x1799 & x1800
val x1802 = x1787(x1801)
var x1803: Entry[Int, HashMap[Int, Int]] = x1802
val x1805 = x1803
val x1806 = x1805 == null
if (x1806) {
val x1807 = new Entry(x1786, x591)
x1787(x1801) = x1807
val x1809 = x1222.size
val x1810 = x1809 + 1
x1222.size = x1810

} else {
while ({
val x1813 = x1803
val x1814 = x1813.hasNext
val x1820 = if (x1814) {
val x1815 = x1803
val x1816 = x1815.key
val x1817 = x1816 != x1786

x1817
} else false

x1820
}) {
val x1822 = x1803
val x1823 = x1822.next
x1803 = x1823
()
}
val x1827 = x1803
val x1828 = x1827.key
val x1829 = x1828 == x1786
if (x1829) {
val x1830 = x1827.value
x1827.value = x591

} else {
val x1833 = new Entry(x1786, x591)
val x1834 = x1827.next
val x1835 = x1827.hasNext
x1827.next = x1833
val x1837 = x1222.size
val x1838 = x1837 + 1
x1222.size = x1838

}

}
val x1844 = x1222.threshold
val x1845 = x1222.MAXIMUM_CAPACITY
val x1846 = x1222.size
val x1847 = x1846 >= x1844
if (x1847) {
val x1848 = x1787.length
val x1849 = x1848 == x1845
if (x1849) {
x1222.threshold = x78

} else {
val x1852 = 2 * x1848
val x1853 = new Array[Entry[Int, HashMap[Int, Int]]](x1852)
var x1854: Int = 0
val x1882 = x1852 - 1
while ({
val x1855 = x1854
val x1856 = x1787.length
val x1857 = x1855 < x1856
x1857
}) {
val x1859 = x1854
val x1860 = x1787(x1859)
var x1861: Entry[Int, HashMap[Int, Int]] = x1860
val x1863 = x1861
val x1864 = x1863 != null
if (x1864) {
x1787(x1859) = null
while ({
val x1866 = x1861
val x1867 = x1866 != null
x1867
}) {
val x1869 = x1861
val x1870 = x1869.key
val x1884 = x1869.next
val x1871 = x1870.hashCode
val x1872 = x1871.toLong
val x1873 = x1872 >>> 20
val x1874 = x1872 >>> 12
val x1875 = x1873 ^ x1874
val x1876 = x1875 ^ x1872
val x1877 = x1876 >>> 7
val x1878 = x1876 ^ x1877
val x1879 = x1876 >>> 4
val x1880 = x1878 ^ x1879
val x1881 = x1880.toInt
val x1883 = x1881 & x1882
val x1885 = x1853(x1883)
val x1886 = x1869.hasNext
x1869.next = x1885
x1853(x1883) = x1869
x1861 = x1884
()
}

} else {
()
}
val x1894 = x1859 + 1
x1854 = x1894
()
}
x1222.table = x1853
val x1899 = x1222.loadFactor
val x1900 = x1899 * x1852
val x1901 = x1900.asInstanceOf[Int]
x1222.threshold = x1901

}

} else {
()
}
while ({
val x1907 = x1777
val x1908 = x1907.hasNext
x1908
}) {
val x1910 = x1777
val x1911 = x1910.next
x1777 = x1911
val x1913 = x1777
val x1914 = x1913.key
val x1915 = x1222.table
val x1916 = x1915.length
val x1917 = x1914.hashCode
val x1918 = x1917.toLong
val x1919 = x1918 >>> 20
val x1920 = x1918 >>> 12
val x1921 = x1919 ^ x1920
val x1922 = x1921 ^ x1918
val x1923 = x1922 >>> 7
val x1924 = x1922 ^ x1923
val x1925 = x1922 >>> 4
val x1926 = x1924 ^ x1925
val x1927 = x1926.toInt
val x1928 = x1916 - 1
val x1929 = x1927 & x1928
val x1930 = x1915(x1929)
var x1931: Entry[Int, HashMap[Int, Int]] = x1930
val x1933 = x1931
val x1934 = x1933 == null
if (x1934) {
val x1935 = new Entry(x1914, x591)
x1915(x1929) = x1935
val x1937 = x1222.size
val x1938 = x1937 + 1
x1222.size = x1938

} else {
while ({
val x1941 = x1931
val x1942 = x1941.hasNext
val x1948 = if (x1942) {
val x1943 = x1931
val x1944 = x1943.key
val x1945 = x1944 != x1914

x1945
} else false

x1948
}) {
val x1950 = x1931
val x1951 = x1950.next
x1931 = x1951
()
}
val x1955 = x1931
val x1956 = x1955.key
val x1957 = x1956 == x1914
if (x1957) {
val x1958 = x1955.value
x1955.value = x591

} else {
val x1961 = new Entry(x1914, x591)
val x1962 = x1955.next
val x1963 = x1955.hasNext
x1955.next = x1961
val x1965 = x1222.size
val x1966 = x1965 + 1
x1222.size = x1966

}

}
val x1972 = x1222.threshold
val x1973 = x1222.MAXIMUM_CAPACITY
val x1974 = x1222.size
val x1975 = x1974 >= x1972
if (x1975) {
val x1976 = x1915.length
val x1977 = x1976 == x1973
if (x1977) {
x1222.threshold = x78

} else {
val x1980 = 2 * x1976
val x1981 = new Array[Entry[Int, HashMap[Int, Int]]](x1980)
var x1982: Int = 0
val x2010 = x1980 - 1
while ({
val x1983 = x1982
val x1984 = x1915.length
val x1985 = x1983 < x1984
x1985
}) {
val x1987 = x1982
val x1988 = x1915(x1987)
var x1989: Entry[Int, HashMap[Int, Int]] = x1988
val x1991 = x1989
val x1992 = x1991 != null
if (x1992) {
x1915(x1987) = null
while ({
val x1994 = x1989
val x1995 = x1994 != null
x1995
}) {
val x1997 = x1989
val x1998 = x1997.key
val x2012 = x1997.next
val x1999 = x1998.hashCode
val x2000 = x1999.toLong
val x2001 = x2000 >>> 20
val x2002 = x2000 >>> 12
val x2003 = x2001 ^ x2002
val x2004 = x2003 ^ x2000
val x2005 = x2004 >>> 7
val x2006 = x2004 ^ x2005
val x2007 = x2004 >>> 4
val x2008 = x2006 ^ x2007
val x2009 = x2008.toInt
val x2011 = x2009 & x2010
val x2013 = x1981(x2011)
val x2014 = x1997.hasNext
x1997.next = x2013
x1981(x2011) = x1997
x1989 = x2012
()
}

} else {
()
}
val x2022 = x1987 + 1
x1982 = x2022
()
}
x1222.table = x1981
val x2027 = x1222.loadFactor
val x2028 = x2027 * x1980
val x2029 = x2028.asInstanceOf[Int]
x1222.threshold = x2029

}

} else {
()
}

}

} else {
()
}
val x2039 = x1782 + 1
x1776 = x2039
()
}
var x2043: Int = 0
var x2044: Entry[Int, HashMap[Int, Int]] = x492
while ({
val x2045 = x2043
val x2046 = x1549.length
val x2047 = x2045 < x2046
x2047
}) {
val x2049 = x2043
val x2050 = x1549(x2049)
val x2051 = x2050 != null
if (x2051) {
x2044 = x2050
println(x2050)
while ({
val x2054 = x2044
val x2055 = x2054.hasNext
x2055
}) {
val x2057 = x2044
val x2058 = x2057.next
x2044 = x2058
val x2060 = x2044
println(x2060)

}

} else {
()
}
val x2066 = x2049 + 1
x2043 = x2066
()
}
var x2070: Int = 0
var x2071: Entry[Int, HashMap[Int, Int]] = x492
while ({
val x2072 = x2070
val x2073 = x1549.length
val x2074 = x2072 < x2073
x2074
}) {
val x2076 = x2070
val x2077 = x1549(x2076)
val x2078 = x2077 != null
if (x2078) {
x2071 = x2077
val x2080 = x2077.key
val x2081 = x1222.table
val x2082 = x2081.length
var x2096: Entry[Int, HashMap[Int, Int]] = x492
val x2083 = x2080.hashCode
val x2084 = x2083.toLong
val x2085 = x2084 >>> 20
val x2086 = x2084 >>> 12
val x2087 = x2085 ^ x2086
val x2088 = x2087 ^ x2084
val x2089 = x2088 >>> 7
val x2090 = x2088 ^ x2089
val x2091 = x2088 >>> 4
val x2092 = x2090 ^ x2091
val x2093 = x2092.toInt
val x2094 = x2082 - 1
val x2095 = x2093 & x2094
val x2098 = x2081(x2095)
var x2099: Entry[Int, HashMap[Int, Int]] = x2098
val x2100 = x2099
val x2101 = x2100 != null
if (x2101) {
while ({
val x2102 = x2099
val x2103 = x2102.hasNext
val x2109 = if (x2103) {
val x2104 = x2099
val x2105 = x2104.key
val x2106 = x2105 != x2080

x2106
} else false

x2109
}) {
val x2111 = x2099
x2096 = x2111
val x2113 = x2111.next
x2099 = x2113
()
}
val x2117 = x2096
val x2118 = x2117 == null
if (x2118) {
x2081(x2095) = null
val x2120 = x1222.size
val x2121 = x2120 - 1
x1222.size = x2121

} else {
val x2124 = x2099
val x2125 = x2124.key
val x2126 = x2125 == x2080
if (x2126) {
val x2127 = x2124.next
val x2128 = x2117.next
val x2129 = x2117.hasNext
x2117.next = x2127
val x2131 = x1222.size
val x2132 = x2131 - 1
x1222.size = x2132

} else {
()
}

}

} else {
()
}
while ({
val x2140 = x2071
val x2141 = x2140.hasNext
x2141
}) {
val x2143 = x2071
val x2144 = x2143.next
x2071 = x2144
val x2146 = x2071
val x2147 = x2146.key
val x2148 = x1222.table
val x2149 = x2148.length
var x2163: Entry[Int, HashMap[Int, Int]] = x492
val x2150 = x2147.hashCode
val x2151 = x2150.toLong
val x2152 = x2151 >>> 20
val x2153 = x2151 >>> 12
val x2154 = x2152 ^ x2153
val x2155 = x2154 ^ x2151
val x2156 = x2155 >>> 7
val x2157 = x2155 ^ x2156
val x2158 = x2155 >>> 4
val x2159 = x2157 ^ x2158
val x2160 = x2159.toInt
val x2161 = x2149 - 1
val x2162 = x2160 & x2161
val x2165 = x2148(x2162)
var x2166: Entry[Int, HashMap[Int, Int]] = x2165
val x2167 = x2166
val x2168 = x2167 != null
if (x2168) {
while ({
val x2169 = x2166
val x2170 = x2169.hasNext
val x2176 = if (x2170) {
val x2171 = x2166
val x2172 = x2171.key
val x2173 = x2172 != x2147

x2173
} else false

x2176
}) {
val x2178 = x2166
x2163 = x2178
val x2180 = x2178.next
x2166 = x2180
()
}
val x2184 = x2163
val x2185 = x2184 == null
if (x2185) {
x2148(x2162) = null
val x2187 = x1222.size
val x2188 = x2187 - 1
x1222.size = x2188

} else {
val x2191 = x2166
val x2192 = x2191.key
val x2193 = x2192 == x2147
if (x2193) {
val x2194 = x2191.next
val x2195 = x2184.next
val x2196 = x2184.hasNext
x2184.next = x2194
val x2198 = x1222.size
val x2199 = x2198 - 1
x1222.size = x2199

} else {
()
}

}

} else {
()
}

}

} else {
()
}
val x2211 = x2076 + 1
x2070 = x2211
()
}
val x2215 = x1549.length
val x1021 = 3.hashCode
val x1022 = x1021.toLong
val x1023 = x1022 >>> 20
val x1024 = x1022 >>> 12
val x1025 = x1023 ^ x1024
val x1026 = x1025 ^ x1022
val x1027 = x1026 >>> 7
val x1028 = x1026 ^ x1027
val x1029 = x1026 >>> 4
val x1030 = x1028 ^ x1029
val x1031 = x1030.toInt
val x2216 = x2215 - 1
val x2217 = x1031 & x2216
val x2218 = x1549(x2217)
var x2219: Entry[Int, HashMap[Int, Int]] = x2218
val x2220 = x2219
val x2221 = x2220 == null
val x2224 = x1388 + 1
if (x2221) {
val x2222 = new Entry(3, x1229)
x1549(x2217) = x2222
x1222.size = x2224

} else {
while ({
val x2227 = x2219
val x2228 = x2227.hasNext
val x2234 = if (x2228) {
val x2229 = x2219
val x2230 = x2229.key
val x2231 = x2230 != 3

x2231
} else false

x2234
}) {
val x2236 = x2219
val x2237 = x2236.next
x2219 = x2237
()
}
val x2241 = x2219
val x2242 = x2241.key
val x2243 = x2242 == 3
if (x2243) {
val x2244 = x2241.value
x2241.value = x1229

} else {
val x2247 = new Entry(3, x1229)
val x2248 = x2241.next
val x2249 = x2241.hasNext
x2241.next = x2247
x1222.size = x2224

}

}
val x2256 = x1222.threshold
val x2257 = x1222.size
val x2258 = x2257 >= x2256
if (x2258) {
val x2259 = x1549.length
val x2260 = x2259 == x1227
if (x2260) {
x1222.threshold = x78

} else {
val x2263 = 2 * x2259
val x2264 = new Array[Entry[Int, HashMap[Int, Int]]](x2263)
var x2265: Int = 0
val x2293 = x2263 - 1
while ({
val x2266 = x2265
val x2267 = x1549.length
val x2268 = x2266 < x2267
x2268
}) {
val x2270 = x2265
val x2271 = x1549(x2270)
var x2272: Entry[Int, HashMap[Int, Int]] = x2271
val x2274 = x2272
val x2275 = x2274 != null
if (x2275) {
x1549(x2270) = null
while ({
val x2277 = x2272
val x2278 = x2277 != null
x2278
}) {
val x2280 = x2272
val x2281 = x2280.key
val x2295 = x2280.next
val x2282 = x2281.hashCode
val x2283 = x2282.toLong
val x2284 = x2283 >>> 20
val x2285 = x2283 >>> 12
val x2286 = x2284 ^ x2285
val x2287 = x2286 ^ x2283
val x2288 = x2287 >>> 7
val x2289 = x2287 ^ x2288
val x2290 = x2287 >>> 4
val x2291 = x2289 ^ x2290
val x2292 = x2291.toInt
val x2294 = x2292 & x2293
val x2296 = x2264(x2294)
val x2297 = x2280.hasNext
x2280.next = x2296
x2264(x2294) = x2280
x2272 = x2295
()
}

} else {
()
}
val x2305 = x2270 + 1
x2265 = x2305
()
}
x1222.table = x2264
val x2310 = x1226 * x2263
val x2311 = x2310.asInstanceOf[Int]
x1222.threshold = x2311

}

} else {
()
}
val x2317 = x1222.table
var x2318: Int = 0
var x2319: Entry[Int, HashMap[Int, Int]] = x492
while ({
val x2320 = x2318
val x2321 = x2317.length
val x2322 = x2320 < x2321
x2322
}) {
val x2324 = x2318
val x2325 = x2317(x2324)
val x2326 = x2325 != null
if (x2326) {
x2319 = x2325
println(x2325)
val x2329 = x2325.value
val x2330 = x2329.table
var x2331: Int = 0
var x2333: Entry[Int, Int] = x507
while ({
val x2334 = x2331
val x2335 = x2330.length
val x2336 = x2334 < x2335
x2336
}) {
val x2338 = x2331
val x2339 = x2330(x2338)
val x2340 = x2339 != null
if (x2340) {
x2333 = x2339
println(x2339)
while ({
val x2343 = x2333
val x2344 = x2343.hasNext
x2344
}) {
val x2346 = x2333
val x2347 = x2346.next
x2333 = x2347
val x2349 = x2333
println(x2349)

}

} else {
()
}
val x2355 = x2338 + 1
x2331 = x2355
()
}
while ({
val x2359 = x2319
val x2360 = x2359.hasNext
x2360
}) {
val x2362 = x2319
val x2363 = x2362.next
x2319 = x2363
val x2365 = x2319
println(x2365)
val x2367 = x2365.value
val x2368 = x2367.table
var x2369: Int = 0
var x2371: Entry[Int, Int] = x507
while ({
val x2372 = x2369
val x2373 = x2368.length
val x2374 = x2372 < x2373
x2374
}) {
val x2376 = x2369
val x2377 = x2368(x2376)
val x2378 = x2377 != null
if (x2378) {
x2371 = x2377
println(x2377)
while ({
val x2381 = x2371
val x2382 = x2381.hasNext
x2382
}) {
val x2384 = x2371
val x2385 = x2384.next
x2371 = x2385
val x2387 = x2371
println(x2387)

}

} else {
()
}
val x2393 = x2376 + 1
x2369 = x2393
()
}

}

} else {
()
}
val x2401 = x2324 + 1
x2318 = x2401
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
