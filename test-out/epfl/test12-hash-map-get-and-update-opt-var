/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdateOptVar extends ((Int)=>(Unit)) {
def apply(x269:Int): Unit = {
val x270 = new HashMap[Int,Int](1)
val x271 = x270.table
var x277:Int = 1
x277 = 2
val x280 = x277
val x13 = (2.hashCode).toLong
val x17 = ((x13 >>> 20) ^ (x13 >>> 12)) ^ x13
val x22 = ((x17 ^ (x17 >>> 7)) ^ (x17 >>> 4)).toInt
val x283 = x22 & ((x271.length) - 1)
var x285:Entry[Int, Int] = (x271(x283))
val x290 = (x270.size) + 1
if (((x285) == null)) {
val x288 = new Entry(2, x280)
x271(x283) = x288
x270.size = x290
()
} else {
while ({
(if (((x285).hasNext)) {

(((x285).key) != 2)
} else false
)
}) {
x285 = ((x285).next)
()
}
val x307 = x285
if (((x307.key) == 2)) {
x307.value = x280
()
} else {
val x313 = new Entry(2, x280)
x307.next = x313
x270.size = x290
()
}
()
}
x270.resize()
val x323 = x277
val x324 = x270.table
val x327 = (x323.hashCode).toLong
val x331 = ((x327 >>> 20) ^ (x327 >>> 12)) ^ x327
var x340:Entry[Int, Int] = (x324(((((x331 ^ (x331 >>> 7)) ^ (x331 >>> 4)).toInt) & ((x324.length) - 1))))
val x84 = None
val x365 = if (((x340) == null)) {
x84
} else {
while ({
(if (((x340).hasNext)) {

(((x340).key) != x323)
} else false
)
}) {
x340 = ((x340).next)
()
}
val x357 = x340
(if (((x357.key) == x323)) {
while ({
(if (((x340).hasNext)) {

(((x340).key) != x323)
} else false
)
}) {
x340 = ((x340).next)
()
}
val x357 = x340
(Some((x357.value)))
} else {
x84
})
}
val x112 = (3.hashCode).toLong
val x116 = ((x112 >>> 20) ^ (x112 >>> 12)) ^ x112
val x370 = (((x116 ^ (x116 >>> 7)) ^ (x116 >>> 4)).toInt) & ((x324.length) - 1)
var x372:Entry[Int, Int] = (x324(x370))
val x367 = (x365.get) + 1
if (((x372) == null)) {
val x375 = new Entry(3, x367)
x324(x370) = x375
x270.size = ((x270.size) + 1)
()
} else {
while ({
(if (((x372).hasNext)) {

(((x372).key) != 3)
} else false
)
}) {
x372 = ((x372).next)
()
}
val x395 = x372
if (((x395.key) == 3)) {
x395.value = x367
()
} else {
val x401 = new Entry(3, x367)
x395.next = x401
x270.size = ((x270.size) + 1)
()
}
()
}
x270.resize()
val x414 = x270.table
var x415:Int = 0
val x169 = null.asInstanceOf[Entry[Int, Int]]
var x416:Entry[Int, Int] = x169
while ({
((x415) < (x414.length))
}) {
val x421 = x415
val x422 = x414(x421)
if ((x422 != null)) {
x416 = x422
println(x422)
while ({
((x416).hasNext)
}) {
x416 = ((x416).next)
println((x416))
()
}
()
} else {
()
}
x415 = (x421 + 1)
()
}
var x445:Entry[Int, Int] = x169
val x444 = x22 & ((x414.length) - 1)
var x447:Entry[Int, Int] = (x414(x444))
if (((x447) != null)) {
while ({
(if (((x447).hasNext)) {

(((x447).key) != 2)
} else false
)
}) {
val x459 = x447
x445 = x459
x447 = (x459.next)
()
}
val x465 = x445
if ((x465 == null)) {
x414(x444) = null
x270.size = ((x270.size) - 1)
()
} else {
val x472 = x447
if (((x472.key) == 2)) {
x465.next = (x472.next)
x270.size = ((x270.size) - 1)
()
} else {
()
}
()
}
()
} else {
()
}
var x488:Int = 0
var x489:Entry[Int, Int] = x169
while ({
((x488) < (x414.length))
}) {
val x494 = x488
val x495 = x414(x494)
if ((x495 != null)) {
x489 = x495
println(x495)
while ({
((x489).hasNext)
}) {
x489 = ((x489).next)
println((x489))
()
}
()
} else {
()
}
x488 = (x494 + 1)
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
