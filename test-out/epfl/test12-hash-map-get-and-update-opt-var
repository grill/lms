AliasRep: List(Sym(1)) deps: List(Sym(1))
AliasRep: List(Sym(26), Sym(27)) deps: List(Sym(0), Sym(4), Sym(26), Sym(27))
AliasRep: List(Sym(42)) deps: List(Sym(41), Sym(42))
AliasRep: List(Sym(3), Sym(50)) deps: List(Sym(0), Sym(4), Sym(19), Sym(49), Sym(50))
AliasRep: List(Sym(54), Sym(55), Sym(56)) deps: List(Sym(0), Sym(4), Sym(19), Sym(53), Sym(54), Sym(55), Sym(56))
AliasRep: List(Sym(82)) deps: List(Sym(82))
AliasRep: List(Sym(104), Sym(105), Sym(106)) deps: List(Sym(103), Sym(104), Sym(105), Sym(106))
AliasRep: List(Sym(108), Sym(109)) deps: List(Sym(108), Sym(109))
AliasRep: List(Sym(102)) deps: List(Sym(87), Sym(101), Sym(102), Sym(103), Sym(108))
AliasRep: List(Sym(129), Sym(130), Sym(131)) deps: List(Sym(77), Sym(128), Sym(129), Sym(130), Sym(131))
AliasRep: List(Sym(133), Sym(134)) deps: List(Sym(77), Sym(133), Sym(134))
AliasRep: List(Sym(71)) deps: List(Sym(76), Sym(137), Sym(138))
AliasRep: List(Sym(70), Sym(143)) deps: List(Sym(0), Sym(62), Sym(70), Sym(143))
AliasRep: List(Sym(184)) deps: List(Sym(183), Sym(184))
AliasRep: List(Sym(222), Sym(223)) deps: List(Sym(0), Sym(62), Sym(200), Sym(222), Sym(223))
AliasRep: List(Sym(238)) deps: List(Sym(237), Sym(238))
AliasRep: List(Sym(246)) deps: List(Sym(0), Sym(62), Sym(200), Sym(215), Sym(245), Sym(246))
AliasRep: List(Sym(250), Sym(251), Sym(252)) deps: List(Sym(0), Sym(62), Sym(200), Sym(215), Sym(249), Sym(250), Sym(251), Sym(252))
AliasRep: List(Sym(277)) deps: List(Sym(277))
AliasRep: List(Sym(299), Sym(300), Sym(301)) deps: List(Sym(298), Sym(299), Sym(300), Sym(301))
AliasRep: List(Sym(303), Sym(304)) deps: List(Sym(303), Sym(304))
AliasRep: List(Sym(297)) deps: List(Sym(282), Sym(296), Sym(297), Sym(298), Sym(303))
AliasRep: List(Sym(324), Sym(325), Sym(326)) deps: List(Sym(272), Sym(323), Sym(324), Sym(325), Sym(326))
AliasRep: List(Sym(328), Sym(329)) deps: List(Sym(272), Sym(328), Sym(329))
AliasRep: List(Sym(266)) deps: List(Sym(271), Sym(332), Sym(333))
AliasRep: List(Sym(265), Sym(338)) deps: List(Sym(0), Sym(62), Sym(258), Sym(265), Sym(338))
AliasRep: List(Sym(357), Sym(351)) deps: List(Sym(357))
AliasRep: List(Sym(365), Sym(351)) deps: List(Sym(364), Sym(365))
AliasRep: List(Sym(349)) deps: List(Sym(356), Sym(373))
AliasRep: List(Sym(385)) deps: List(Sym(385))
AliasRep: List(Sym(379)) deps: List(Sym(384), Sym(387))
AliasRep: List(Sym(400), Sym(394)) deps: List(Sym(400))
AliasRep: List(Sym(408), Sym(394)) deps: List(Sym(407), Sym(408))
AliasRep: List(Sym(393)) deps: List(Sym(399), Sym(416))
AliasRep: List(Sym(423)) deps: List(Sym(423))
AliasRep: List(Sym(437), Sym(438)) deps: List(Sym(422), Sym(426), Sym(437), Sym(438))
AliasRep: List(Sym(453)) deps: List(Sym(452), Sym(453))
AliasRep: List(Sym(425), Sym(461)) deps: List(Sym(422), Sym(426), Sym(430), Sym(460), Sym(461))
AliasRep: List(Sym(465), Sym(466), Sym(467)) deps: List(Sym(422), Sym(426), Sym(430), Sym(464), Sym(465), Sym(466), Sym(467))
AliasRep: List(Sym(492)) deps: List(Sym(492))
AliasRep: List(Sym(514), Sym(515), Sym(516)) deps: List(Sym(513), Sym(514), Sym(515), Sym(516))
AliasRep: List(Sym(518), Sym(519)) deps: List(Sym(518), Sym(519))
AliasRep: List(Sym(512)) deps: List(Sym(497), Sym(511), Sym(512), Sym(513), Sym(518))
AliasRep: List(Sym(539), Sym(540), Sym(541)) deps: List(Sym(487), Sym(538), Sym(539), Sym(540), Sym(541))
AliasRep: List(Sym(543), Sym(544)) deps: List(Sym(487), Sym(543), Sym(544))
AliasRep: List(Sym(481)) deps: List(Sym(486), Sym(547), Sym(548))
AliasRep: List(Sym(480), Sym(553)) deps: List(Sym(422), Sym(473), Sym(480), Sym(553))
AliasRep: List(Sym(593)) deps: List(Sym(592), Sym(593))
AliasRep: List(Sym(620), Sym(621)) deps: List(Sym(422), Sym(473), Sym(609), Sym(620), Sym(621))
AliasRep: List(Sym(636)) deps: List(Sym(635), Sym(636))
AliasRep: List(Sym(644)) deps: List(Sym(422), Sym(473), Sym(609), Sym(613), Sym(643), Sym(644))
AliasRep: List(Sym(648), Sym(649), Sym(650)) deps: List(Sym(422), Sym(473), Sym(609), Sym(613), Sym(647), Sym(648), Sym(649), Sym(650))
AliasRep: List(Sym(675)) deps: List(Sym(675))
AliasRep: List(Sym(697), Sym(698), Sym(699)) deps: List(Sym(696), Sym(697), Sym(698), Sym(699))
AliasRep: List(Sym(701), Sym(702)) deps: List(Sym(701), Sym(702))
AliasRep: List(Sym(695)) deps: List(Sym(680), Sym(694), Sym(695), Sym(696), Sym(701))
AliasRep: List(Sym(722), Sym(723), Sym(724)) deps: List(Sym(670), Sym(721), Sym(722), Sym(723), Sym(724))
AliasRep: List(Sym(726), Sym(727)) deps: List(Sym(670), Sym(726), Sym(727))
AliasRep: List(Sym(664)) deps: List(Sym(669), Sym(730), Sym(731))
AliasRep: List(Sym(663), Sym(736)) deps: List(Sym(422), Sym(473), Sym(656), Sym(663), Sym(736))
AliasRep: List(Sym(754), Sym(748)) deps: List(Sym(754))
AliasRep: List(Sym(762), Sym(748)) deps: List(Sym(761), Sym(762))
AliasRep: List(Sym(747)) deps: List(Sym(753), Sym(770))
AliasRep: List(Sym(782)) deps: List(Sym(782))
AliasRep: List(Sym(776)) deps: List(Sym(781), Sym(784))
AliasRep: List(Sym(797), Sym(791)) deps: List(Sym(797))
AliasRep: List(Sym(805), Sym(791)) deps: List(Sym(804), Sym(805))
AliasRep: List(Sym(790)) deps: List(Sym(796), Sym(813))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdateOptVar extends ((Int)=>(Unit)) {
def apply(x421:Int): Unit = {
val x422 = new HashMap[Int,Int](1)
var x423 = 1
x423 = 2
val x425 = x423
val x426 = x422.table
val x427 = x426.length
val x5 = 2.hashCode
val x6 = x5.toLong
val x7 = x6 >>> 20
val x8 = x6 >>> 12
val x9 = x7 ^ x8
val x10 = x9 ^ x6
val x11 = x10 >>> 7
val x12 = x10 ^ x11
val x13 = x10 >>> 4
val x14 = x12 ^ x13
val x15 = x14.toInt
val x428 = x427 - 1
val x429 = x15 & x428
val x430 = x426(x429)
var x431 = x430
val x432 = x422.size
val x433 = x422.threshold
val x434 = x422.MAXIMUM_CAPACITY
val x435 = x431
val x436 = x435 == null
val x440 = x432 + 1
if (x436) {
val x437 = new Entry(2, x425)
val x438 = x426(x429)
x426(x429) = x437
x422.size = x440

} else {
while ({
val x443 = x431
val x444 = x443.hasNext
val x450 = if (x444) {
val x445 = x431
val x446 = x445.key
val x447 = x446 != 2

x447
} else false

x450
}) {
val x452 = x431
val x453 = x452.next
x431 = x453
()
}
val x457 = x431
val x458 = x457.key
val x459 = x458 == 2
if (x459) {
val x460 = x431
val x461 = x460.value
x460.value = x425

} else {
val x464 = x431
val x465 = new Entry(2, x425)
val x466 = x464.next
val x467 = x464.hasNext
x464.next = x465
x422.size = x440

}

}
val x474 = x432 >= x433
val x66 = scala.Int.MaxValue
if (x474) {
val x475 = x426.length
val x476 = x475 == x434
if (x476) {
x422.threshold = x66

} else {
val x479 = 2 * x475
val x480 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x479)
var x481 = 0
val x509 = x479 - 1
val x510 = x15 & x509
while ({
val x482 = x481
val x483 = x426.length
val x484 = x482 < x483
x484
}) {
val x486 = x481
val x487 = x426(x486)
var x488 = x487
val x489 = x488
val x490 = x489 != null
if (x490) {
val x491 = x481
val x492 = x426(x491)
x426(x491) = null
while ({
val x494 = x488
val x495 = x494.hasNext
x495
}) {
val x497 = x488
val x498 = x497.key
val x511 = x488
val x512 = x511.next
val x513 = x488
val x514 = x480(x510)
val x515 = x513.next
val x516 = x513.hasNext
x513.next = x514
val x518 = x488
val x519 = x480(x510)
x480(x510) = x518
x488 = x512
()
}
val x524 = x488
val x525 = x524.key
val x536 = x488
val x537 = x536.next
val x538 = x488
val x539 = x480(x510)
val x540 = x538.next
val x541 = x538.hasNext
x538.next = x539
val x543 = x488
val x544 = x480(x510)
x480(x510) = x543

} else {
()
}
val x548 = x481
val x549 = x548 + 1
x481 = x549
()
}
val x553 = x422.table
x422.table = x480
val x555 = x422.loadFactor
val x556 = x555 * x479
val x557 = x556.asInstanceOf[Int]
x422.threshold = x557

}

} else {
()
}
val x563 = x423
val x564 = x422.table
val x576 = x564.length
val x565 = x563.hashCode
val x566 = x565.toLong
val x567 = x566 >>> 20
val x568 = x566 >>> 12
val x569 = x567 ^ x568
val x570 = x569 ^ x566
val x571 = x570 >>> 7
val x572 = x570 ^ x571
val x573 = x570 >>> 4
val x574 = x572 ^ x573
val x575 = x574.toInt
val x577 = x576 - 1
val x578 = x575 & x577
val x579 = x564(x578)
var x580 = x579
val x581 = x580
val x582 = x581 == null
val x173 = None
val x606 = if (x582) {
x173
} else {
while ({
val x583 = x580
val x584 = x583.hasNext
val x590 = if (x584) {
val x585 = x580
val x586 = x585.key
val x587 = x586 != x563

x587
} else false

x590
}) {
val x592 = x580
val x593 = x592.next
x580 = x593
()
}
val x597 = x580
val x598 = x597.key
val x599 = x598 == x563
val x604 = if (x599) {
val x600 = x580
val x601 = x600.value
val x602 = Some(x601)
x602
} else {
x173
}
x604
}
val x607 = x606.get
val x609 = x422.table
val x610 = x609.length
val x201 = 3.hashCode
val x202 = x201.toLong
val x203 = x202 >>> 20
val x204 = x202 >>> 12
val x205 = x203 ^ x204
val x206 = x205 ^ x202
val x207 = x206 >>> 7
val x208 = x206 ^ x207
val x209 = x206 >>> 4
val x210 = x208 ^ x209
val x211 = x210.toInt
val x611 = x610 - 1
val x612 = x211 & x611
val x613 = x609(x612)
var x614 = x613
val x615 = x422.size
val x616 = x422.threshold
val x617 = x422.MAXIMUM_CAPACITY
val x618 = x614
val x619 = x618 == null
val x608 = x607 + 1
val x623 = x615 + 1
if (x619) {
val x620 = new Entry(3, x608)
val x621 = x609(x612)
x609(x612) = x620
x422.size = x623

} else {
while ({
val x626 = x614
val x627 = x626.hasNext
val x633 = if (x627) {
val x628 = x614
val x629 = x628.key
val x630 = x629 != 3

x630
} else false

x633
}) {
val x635 = x614
val x636 = x635.next
x614 = x636
()
}
val x640 = x614
val x641 = x640.key
val x642 = x641 == 3
if (x642) {
val x643 = x614
val x644 = x643.value
x643.value = x608

} else {
val x647 = x614
val x648 = new Entry(3, x608)
val x649 = x647.next
val x650 = x647.hasNext
x647.next = x648
x422.size = x623

}

}
val x657 = x615 >= x616
if (x657) {
val x658 = x609.length
val x659 = x658 == x617
if (x659) {
x422.threshold = x66

} else {
val x662 = 2 * x658
val x663 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x662)
var x664 = 0
val x692 = x662 - 1
val x693 = x211 & x692
while ({
val x665 = x664
val x666 = x609.length
val x667 = x665 < x666
x667
}) {
val x669 = x664
val x670 = x609(x669)
var x671 = x670
val x672 = x671
val x673 = x672 != null
if (x673) {
val x674 = x664
val x675 = x609(x674)
x609(x674) = null
while ({
val x677 = x671
val x678 = x677.hasNext
x678
}) {
val x680 = x671
val x681 = x680.key
val x694 = x671
val x695 = x694.next
val x696 = x671
val x697 = x663(x693)
val x698 = x696.next
val x699 = x696.hasNext
x696.next = x697
val x701 = x671
val x702 = x663(x693)
x663(x693) = x701
x671 = x695
()
}
val x707 = x671
val x708 = x707.key
val x719 = x671
val x720 = x719.next
val x721 = x671
val x722 = x663(x693)
val x723 = x721.next
val x724 = x721.hasNext
x721.next = x722
val x726 = x671
val x727 = x663(x693)
x663(x693) = x726

} else {
()
}
val x731 = x664
val x732 = x731 + 1
x664 = x732
()
}
val x736 = x422.table
x422.table = x663
val x738 = x422.loadFactor
val x739 = x738 * x662
val x740 = x739.asInstanceOf[Int]
x422.threshold = x740

}

} else {
()
}
val x746 = x422.table
var x747 = 0
val x350 = null.asInstanceOf[scala.virtualization.lms.epfl.test12.Entry[Int, Int]]
var x748 = x350
while ({
val x749 = x747
val x750 = x746.length
val x751 = x749 < x750
x751
}) {
val x753 = x747
val x754 = x746(x753)
val x755 = x754 != null
if (x755) {
x748 = x754
println(x754)
while ({
val x758 = x748
val x759 = x758.hasNext
x759
}) {
val x761 = x748
val x762 = x761.next
x748 = x762
val x764 = x748
println(x764)

}

} else {
()
}
val x770 = x747
val x771 = x770 + 1
x747 = x771
()
}
val x775 = x422.table
var x776 = 0
while ({
val x777 = x776
val x778 = x775.length
val x779 = x777 < x778
x779
}) {
val x781 = x776
val x782 = x775(x781)
x775(x781) = null
val x784 = x776
val x785 = x784 + 1
x776 = x785
()
}
val x789 = x422.table
var x790 = 0
var x791 = x350
while ({
val x792 = x790
val x793 = x789.length
val x794 = x792 < x793
x794
}) {
val x796 = x790
val x797 = x789(x796)
val x798 = x797 != null
if (x798) {
x791 = x797
println(x797)
while ({
val x801 = x791
val x802 = x801.hasNext
x802
}) {
val x804 = x791
val x805 = x804.next
x791 = x805
val x807 = x791
println(x807)

}

} else {
()
}
val x813 = x790
val x814 = x813 + 1
x790 = x814
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
