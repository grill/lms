/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdateOptVar extends ((Int)=>(Unit)) {
def apply(x370:Int): Unit = {
val x371 = new HashMap[Int,Int](1)
val x372 = x371.table
val x373 = x371.size
val x374 = x371.loadFactor
val x375 = x371.MAXIMUM_CAPACITY
val x376 = x371.threshold
var x377 = 1
x377 = 2
val x379 = x377
val x380 = x372.length
val x9 = 2.hashCode
val x10 = x9.toLong
val x11 = x10 >>> 20
val x12 = x10 >>> 12
val x13 = x11 ^ x12
val x14 = x13 ^ x10
val x15 = x14 >>> 7
val x16 = x14 ^ x15
val x17 = x14 >>> 4
val x18 = x16 ^ x17
val x19 = x18.toInt
val x381 = x380 - 1
val x382 = x19 & x381
val x383 = x372(x382)
var x384 = x383
val x385 = x384
val x386 = x385 == null
val x389 = x373 + 1
if (x386) {
val x387 = new Entry(2, x379)
x372(x382) = x387
x371.size = x389

} else {
while ({
val x392 = x384
val x393 = x392.hasNext
val x399 = if (x393) {
val x394 = x384
val x395 = x394.key
val x396 = x395 != 2

x396
} else false

x399
}) {
val x401 = x384
val x402 = x401.next
x384 = x402
()
}
val x406 = x384
val x407 = x406.key
val x408 = x407 == 2
if (x408) {
val x409 = x406.value
x406.value = x379

} else {
val x412 = new Entry(2, x379)
val x413 = x406.next
val x414 = x406.hasNext
x406.next = x412
x371.size = x389

}

}
val x421 = x371.size
val x422 = x421 >= x376
val x423 = x380 == x375
val x64 = scala.Int.MaxValue
val x426 = 2 * x380
val x455 = x426 - 1
val x472 = x374 * x426
val x473 = x472.asInstanceOf[Int]
if (x422) {
if (x423) {
x371.threshold = x64

} else {
val x427 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x426)
var x428 = 0
while ({
val x429 = x428
val x430 = x372.length
val x431 = x429 < x430
x431
}) {
val x433 = x428
val x434 = x372(x433)
var x435 = x434
val x436 = x435
val x437 = x436 != null
if (x437) {
x372(x433) = null
while ({
val x439 = x435
val x440 = x439 != null
x440
}) {
val x442 = x435
val x443 = x442.key
val x457 = x442.next
val x444 = x443.hashCode
val x445 = x444.toLong
val x446 = x445 >>> 20
val x447 = x445 >>> 12
val x448 = x446 ^ x447
val x449 = x448 ^ x445
val x450 = x449 >>> 7
val x451 = x449 ^ x450
val x452 = x449 >>> 4
val x453 = x451 ^ x452
val x454 = x453.toInt
val x456 = x454 & x455
val x458 = x427(x456)
val x459 = x442.hasNext
x442.next = x458
x427(x456) = x442
x435 = x457
()
}

} else {
()
}
val x467 = x433 + 1
x428 = x467
()
}
x371.table = x427
x371.threshold = x473

}

} else {
()
}
val x479 = x371.table
val x491 = x479.length
val x480 = x379.hashCode
val x481 = x480.toLong
val x482 = x481 >>> 20
val x483 = x481 >>> 12
val x484 = x482 ^ x483
val x485 = x484 ^ x481
val x486 = x485 >>> 7
val x487 = x485 ^ x486
val x488 = x485 >>> 4
val x489 = x487 ^ x488
val x490 = x489.toInt
val x492 = x491 - 1
val x493 = x490 & x492
val x494 = x479(x493)
var x495 = x494
val x496 = x495
val x497 = x496 == null
val x139 = None
val x520 = if (x497) {
x139
} else {
while ({
val x498 = x495
val x499 = x498.hasNext
val x505 = if (x499) {
val x500 = x495
val x501 = x500.key
val x502 = x501 != x379

x502
} else false

x505
}) {
val x507 = x495
val x508 = x507.next
x495 = x508
()
}
val x512 = x495
val x513 = x512.key
val x514 = x513 == x379
val x518 = if (x514) {
val x515 = x512.value
val x516 = Some(x515)
x516
} else {
x139
}
x518
}
val x521 = x520.get
val x165 = 3.hashCode
val x166 = x165.toLong
val x167 = x166 >>> 20
val x168 = x166 >>> 12
val x169 = x167 ^ x168
val x170 = x169 ^ x166
val x171 = x170 >>> 7
val x172 = x170 ^ x171
val x173 = x170 >>> 4
val x174 = x172 ^ x173
val x175 = x174.toInt
val x523 = x175 & x492
val x524 = x479(x523)
var x525 = x524
val x526 = x525
val x527 = x526 == null
val x522 = x521 + 1
val x530 = x421 + 1
if (x527) {
val x528 = new Entry(3, x522)
x479(x523) = x528
x371.size = x530

} else {
while ({
val x533 = x525
val x534 = x533.hasNext
val x540 = if (x534) {
val x535 = x525
val x536 = x535.key
val x537 = x536 != 3

x537
} else false

x540
}) {
val x542 = x525
val x543 = x542.next
x525 = x543
()
}
val x547 = x525
val x548 = x547.key
val x549 = x548 == 3
if (x549) {
val x550 = x547.value
x547.value = x522

} else {
val x553 = new Entry(3, x522)
val x554 = x547.next
val x555 = x547.hasNext
x547.next = x553
x371.size = x530

}

}
val x562 = x371.threshold
val x563 = x371.size
val x564 = x563 >= x562
val x565 = x491 == x375
val x568 = 2 * x491
val x597 = x568 - 1
val x614 = x374 * x568
val x615 = x614.asInstanceOf[Int]
if (x564) {
if (x565) {
x371.threshold = x64

} else {
val x569 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x568)
var x570 = 0
while ({
val x571 = x570
val x572 = x479.length
val x573 = x571 < x572
x573
}) {
val x575 = x570
val x576 = x479(x575)
var x577 = x576
val x578 = x577
val x579 = x578 != null
if (x579) {
x479(x575) = null
while ({
val x581 = x577
val x582 = x581 != null
x582
}) {
val x584 = x577
val x585 = x584.key
val x599 = x584.next
val x586 = x585.hashCode
val x587 = x586.toLong
val x588 = x587 >>> 20
val x589 = x587 >>> 12
val x590 = x588 ^ x589
val x591 = x590 ^ x587
val x592 = x591 >>> 7
val x593 = x591 ^ x592
val x594 = x591 >>> 4
val x595 = x593 ^ x594
val x596 = x595.toInt
val x598 = x596 & x597
val x600 = x569(x598)
val x601 = x584.hasNext
x584.next = x600
x569(x598) = x584
x577 = x599
()
}

} else {
()
}
val x609 = x575 + 1
x570 = x609
()
}
x371.table = x569
x371.threshold = x615

}

} else {
()
}
val x621 = x371.table
var x622 = 0
val x276 = null.asInstanceOf[scala.virtualization.lms.epfl.test12.Entry[Int, Int]]
var x623 = x276
while ({
val x624 = x622
val x625 = x621.length
val x626 = x624 < x625
x626
}) {
val x628 = x622
val x629 = x621(x628)
val x630 = x629 != null
if (x630) {
x623 = x629
println(x629)
while ({
val x633 = x623
val x634 = x633.hasNext
x634
}) {
val x636 = x623
val x637 = x636.next
x623 = x637
val x639 = x623
println(x639)

}

} else {
()
}
val x645 = x628 + 1
x622 = x645
()
}
val x649 = x621.length
var x652 = x276
val x650 = x649 - 1
val x651 = x19 & x650
val x653 = x621(x651)
var x654 = x653
val x655 = x654
val x656 = x655 != null
if (x656) {
while ({
val x657 = x654
val x658 = x657.hasNext
val x664 = if (x658) {
val x659 = x654
val x660 = x659.key
val x661 = x660 != 2

x661
} else false

x664
}) {
val x666 = x654
x652 = x666
val x668 = x666.next
x654 = x668
()
}
val x672 = x652
val x673 = x672 == null
if (x673) {
x621(x651) = null

} else {
val x676 = x654
val x677 = x676.key
val x678 = x677 == 2
if (x678) {
val x679 = x676.next
val x680 = x672.next
val x681 = x672.hasNext
x672.next = x679

} else {
()
}

}

} else {
()
}
var x689 = 0
var x690 = x276
while ({
val x691 = x689
val x692 = x621.length
val x693 = x691 < x692
x693
}) {
val x695 = x689
val x696 = x621(x695)
val x697 = x696 != null
if (x697) {
x690 = x696
println(x696)
while ({
val x700 = x690
val x701 = x700.hasNext
x701
}) {
val x703 = x690
val x704 = x703.next
x690 = x704
val x706 = x690
println(x706)

}

} else {
()
}
val x712 = x695 + 1
x689 = x712
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
