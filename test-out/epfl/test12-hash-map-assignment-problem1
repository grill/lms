AliasRep: List(Sym(23), Sym(24)) deps: List(Sym(0), Sym(1), Sym(23), Sym(24))
AliasRep: List(Sym(39)) deps: List(Sym(38), Sym(39))
AliasRep: List(Sym(47)) deps: List(Sym(0), Sym(1), Sym(16), Sym(46), Sym(47))
AliasRep: List(Sym(51), Sym(52), Sym(53)) deps: List(Sym(0), Sym(1), Sym(16), Sym(50), Sym(51), Sym(52), Sym(53))
AliasRep: List(Sym(79)) deps: List(Sym(79))
AliasRep: List(Sym(101), Sym(102), Sym(103)) deps: List(Sym(100), Sym(101), Sym(102), Sym(103))
AliasRep: List(Sym(105), Sym(106)) deps: List(Sym(105), Sym(106))
AliasRep: List(Sym(99)) deps: List(Sym(84), Sym(98), Sym(99), Sym(100), Sym(105))
AliasRep: List(Sym(126), Sym(127), Sym(128)) deps: List(Sym(74), Sym(125), Sym(126), Sym(127), Sym(128))
AliasRep: List(Sym(130), Sym(131)) deps: List(Sym(74), Sym(130), Sym(131))
AliasRep: List(Sym(68)) deps: List(Sym(73), Sym(134), Sym(135))
AliasRep: List(Sym(67), Sym(140)) deps: List(Sym(0), Sym(59), Sym(67), Sym(140))
AliasRep: List(Sym(163), Sym(164)) deps: List(Sym(0), Sym(59), Sym(151), Sym(152), Sym(163), Sym(164))
AliasRep: List(Sym(179)) deps: List(Sym(178), Sym(179))
AliasRep: List(Sym(187)) deps: List(Sym(0), Sym(59), Sym(151), Sym(152), Sym(156), Sym(186), Sym(187))
AliasRep: List(Sym(191), Sym(192), Sym(193)) deps: List(Sym(0), Sym(59), Sym(151), Sym(152), Sym(156), Sym(190), Sym(191), Sym(192), Sym(193))
AliasRep: List(Sym(218)) deps: List(Sym(218))
AliasRep: List(Sym(240), Sym(241), Sym(242)) deps: List(Sym(239), Sym(240), Sym(241), Sym(242))
AliasRep: List(Sym(244), Sym(245)) deps: List(Sym(244), Sym(245))
AliasRep: List(Sym(238)) deps: List(Sym(223), Sym(237), Sym(238), Sym(239), Sym(244))
AliasRep: List(Sym(265), Sym(266), Sym(267)) deps: List(Sym(213), Sym(264), Sym(265), Sym(266), Sym(267))
AliasRep: List(Sym(269), Sym(270)) deps: List(Sym(213), Sym(269), Sym(270))
AliasRep: List(Sym(207)) deps: List(Sym(212), Sym(273), Sym(274))
AliasRep: List(Sym(206), Sym(279)) deps: List(Sym(0), Sym(59), Sym(151), Sym(199), Sym(206), Sym(279))
AliasRep: List(Sym(309)) deps: List(Sym(308), Sym(309))
AliasRep: List(Sym(337), Sym(338)) deps: List(Sym(325), Sym(326), Sym(337), Sym(338))
AliasRep: List(Sym(353)) deps: List(Sym(352), Sym(353))
AliasRep: List(Sym(361)) deps: List(Sym(325), Sym(326), Sym(330), Sym(360), Sym(361))
AliasRep: List(Sym(365), Sym(366), Sym(367)) deps: List(Sym(325), Sym(326), Sym(330), Sym(364), Sym(365), Sym(366), Sym(367))
AliasRep: List(Sym(392)) deps: List(Sym(392))
AliasRep: List(Sym(414), Sym(415), Sym(416)) deps: List(Sym(413), Sym(414), Sym(415), Sym(416))
AliasRep: List(Sym(418), Sym(419)) deps: List(Sym(418), Sym(419))
AliasRep: List(Sym(412)) deps: List(Sym(397), Sym(411), Sym(412), Sym(413), Sym(418))
AliasRep: List(Sym(439), Sym(440), Sym(441)) deps: List(Sym(387), Sym(438), Sym(439), Sym(440), Sym(441))
AliasRep: List(Sym(443), Sym(444)) deps: List(Sym(387), Sym(443), Sym(444))
AliasRep: List(Sym(381)) deps: List(Sym(386), Sym(447), Sym(448))
AliasRep: List(Sym(380), Sym(453)) deps: List(Sym(325), Sym(373), Sym(380), Sym(453))
AliasRep: List(Sym(476), Sym(477)) deps: List(Sym(325), Sym(373), Sym(464), Sym(465), Sym(476), Sym(477))
AliasRep: List(Sym(492)) deps: List(Sym(491), Sym(492))
AliasRep: List(Sym(500)) deps: List(Sym(325), Sym(373), Sym(464), Sym(465), Sym(469), Sym(499), Sym(500))
AliasRep: List(Sym(504), Sym(505), Sym(506)) deps: List(Sym(325), Sym(373), Sym(464), Sym(465), Sym(469), Sym(503), Sym(504), Sym(505), Sym(506))
AliasRep: List(Sym(531)) deps: List(Sym(531))
AliasRep: List(Sym(553), Sym(554), Sym(555)) deps: List(Sym(552), Sym(553), Sym(554), Sym(555))
AliasRep: List(Sym(557), Sym(558)) deps: List(Sym(557), Sym(558))
AliasRep: List(Sym(551)) deps: List(Sym(536), Sym(550), Sym(551), Sym(552), Sym(557))
AliasRep: List(Sym(578), Sym(579), Sym(580)) deps: List(Sym(526), Sym(577), Sym(578), Sym(579), Sym(580))
AliasRep: List(Sym(582), Sym(583)) deps: List(Sym(526), Sym(582), Sym(583))
AliasRep: List(Sym(520)) deps: List(Sym(525), Sym(586), Sym(587))
AliasRep: List(Sym(519), Sym(592)) deps: List(Sym(325), Sym(373), Sym(464), Sym(512), Sym(519), Sym(592))
AliasRep: List(Sym(621)) deps: List(Sym(620), Sym(621))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapAssignmentProblem1 extends ((Int)=>(Unit)) {
def apply(x324:Int): Unit = {
val x325 = new HashMap[Int,Int](200)
val x326 = x325.table
val x327 = x326.length
val x2 = 1.hashCode
val x3 = x2.toLong
val x4 = x3 >>> 20
val x5 = x3 >>> 12
val x6 = x4 ^ x5
val x7 = x6 ^ x3
val x8 = x7 >>> 7
val x9 = x7 ^ x8
val x10 = x7 >>> 4
val x11 = x9 ^ x10
val x12 = x11.toInt
val x328 = x327 - 1
val x329 = x12 & x328
val x330 = x326(x329)
var x331 = x330
val x332 = x325.size
val x333 = x325.threshold
val x334 = x325.MAXIMUM_CAPACITY
val x335 = x331
val x336 = x335 == null
if (x336) {
val x337 = new Entry(1, 2)
val x338 = x326(x329)
x326(x329) = x337
val x340 = x332 + 1
x325.size = x340

} else {
while ({
val x343 = x331
val x344 = x343.hasNext
val x350 = if (x344) {
val x345 = x331
val x346 = x345.key
val x347 = x346 != 1

x347
} else false

x350
}) {
val x352 = x331
val x353 = x352.next
x331 = x353
()
}
val x357 = x331
val x358 = x357.key
val x359 = x358 == 1
if (x359) {
val x360 = x331
val x361 = x360.value
x360.value = 2

} else {
val x364 = x331
val x365 = new Entry(1, 2)
val x366 = x364.next
val x367 = x364.hasNext
x364.next = x365
val x340 = x332 + 1
x325.size = x340

}

}
val x374 = x332 >= x333
if (x374) {
val x375 = x326.length
val x376 = x375 == x334
if (x376) {
val x63 = scala.Int.MaxValue
x325.threshold = x63

} else {
val x379 = 2 * x375
val x380 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x379)
var x381 = 0
val x409 = x379 - 1
val x410 = x12 & x409
while ({
val x382 = x381
val x383 = x326.length
val x384 = x382 < x383
x384
}) {
val x386 = x381
val x387 = x326(x386)
var x388 = x387
val x389 = x388
val x390 = x389 != null
if (x390) {
val x391 = x381
val x392 = x326(x391)
x326(x391) = null
while ({
val x394 = x388
val x395 = x394.hasNext
x395
}) {
val x397 = x388
val x398 = x397.key
val x411 = x388
val x412 = x411.next
val x413 = x388
val x414 = x380(x410)
val x415 = x413.next
val x416 = x413.hasNext
x413.next = x414
val x418 = x388
val x419 = x380(x410)
x380(x410) = x418
x388 = x412
()
}
val x424 = x388
val x425 = x424.key
val x436 = x388
val x437 = x436.next
val x438 = x388
val x439 = x380(x410)
val x440 = x438.next
val x441 = x438.hasNext
x438.next = x439
val x443 = x388
val x444 = x380(x410)
x380(x410) = x443

} else {
()
}
val x448 = x381
val x449 = x448 + 1
x381 = x449
()
}
val x453 = x325.table
x325.table = x380
val x455 = x325.loadFactor
val x456 = x455 * x379
val x457 = x456.asInstanceOf[Int]
x325.threshold = x457

}

} else {
()
}
var x463 = x325
val x464 = x463
val x465 = x464.table
val x466 = x465.length
val x467 = x466 - 1
val x468 = x12 & x467
val x469 = x465(x468)
var x470 = x469
val x471 = x464.size
val x472 = x464.threshold
val x473 = x464.MAXIMUM_CAPACITY
val x474 = x470
val x475 = x474 == null
if (x475) {
val x476 = new Entry(1, 3)
val x477 = x465(x468)
x465(x468) = x476
val x479 = x471 + 1
x464.size = x479

} else {
while ({
val x482 = x470
val x483 = x482.hasNext
val x489 = if (x483) {
val x484 = x470
val x485 = x484.key
val x486 = x485 != 1

x486
} else false

x489
}) {
val x491 = x470
val x492 = x491.next
x470 = x492
()
}
val x496 = x470
val x497 = x496.key
val x498 = x497 == 1
if (x498) {
val x499 = x470
val x500 = x499.value
x499.value = 3

} else {
val x503 = x470
val x504 = new Entry(1, 3)
val x505 = x503.next
val x506 = x503.hasNext
x503.next = x504
val x479 = x471 + 1
x464.size = x479

}

}
val x513 = x471 >= x472
if (x513) {
val x514 = x465.length
val x515 = x514 == x473
if (x515) {
val x63 = scala.Int.MaxValue
x464.threshold = x63

} else {
val x518 = 2 * x514
val x519 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x518)
var x520 = 0
val x548 = x518 - 1
val x549 = x12 & x548
while ({
val x521 = x520
val x522 = x465.length
val x523 = x521 < x522
x523
}) {
val x525 = x520
val x526 = x465(x525)
var x527 = x526
val x528 = x527
val x529 = x528 != null
if (x529) {
val x530 = x520
val x531 = x465(x530)
x465(x530) = null
while ({
val x533 = x527
val x534 = x533.hasNext
x534
}) {
val x536 = x527
val x537 = x536.key
val x550 = x527
val x551 = x550.next
val x552 = x527
val x553 = x519(x549)
val x554 = x552.next
val x555 = x552.hasNext
x552.next = x553
val x557 = x527
val x558 = x519(x549)
x519(x549) = x557
x527 = x551
()
}
val x563 = x527
val x564 = x563.key
val x575 = x527
val x576 = x575.next
val x577 = x527
val x578 = x519(x549)
val x579 = x577.next
val x580 = x577.hasNext
x577.next = x578
val x582 = x527
val x583 = x519(x549)
x519(x549) = x582

} else {
()
}
val x587 = x520
val x588 = x587 + 1
x520 = x588
()
}
val x592 = x464.table
x464.table = x519
val x594 = x464.loadFactor
val x595 = x594 * x518
val x596 = x595.asInstanceOf[Int]
x464.threshold = x596

}

} else {
()
}
val x602 = x463
val x603 = x602.table
val x604 = x603.length
val x605 = x604 - 1
val x606 = x12 & x605
val x607 = x603(x606)
var x608 = x607
val x609 = x608
val x610 = x609 == null
val x634 = if (x610) {
val x298 = None
x298
} else {
while ({
val x611 = x608
val x612 = x611.hasNext
val x618 = if (x612) {
val x613 = x608
val x614 = x613.key
val x615 = x614 != 1

x615
} else false

x618
}) {
val x620 = x608
val x621 = x620.next
x608 = x621
()
}
val x625 = x608
val x626 = x625.key
val x627 = x626 == 1
val x632 = if (x627) {
val x628 = x608
val x629 = x628.value
val x630 = Some(x629)
x630
} else {
val x298 = None
x298
}
x632
}
println(x634)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
