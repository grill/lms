NestedDeps: List()
Reflect: Reflect(ArrayNew(Const(10),Const()),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1))
ReflectReadMutable repsW: List(Sym(0))
NestedDeps: List()
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(0)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Alias: List()
Write: WrappedArray(Sym(2))Def: HashMapSetTable(Sym(0),Sym(1))
reflectWriteMutable repsW: List(Sym(0)), repsR: List(Sym(1))
NestedDeps: List()
Reflect: Reflect(HashMapSetTable(Sym(0),Sym(1)),Summary(false,false,false,false,false,List(),List(Sym(1), Sym(0)),List(Sym(0), Sym(1)),List(Sym(0), Sym(1)),List(Sym(2)),List(Sym(2))),List(Sym(0), Sym(1), Sym(2)))
Alias: List(Sym(0), Sym(1))
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3))
ReflectReadMutable repsW: List(Sym(1), Sym(0))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(0)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
Alias: List()
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4))
ReflectReadMutable repsW: List(Sym(1), Sym(0))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(0)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
Alias: List()
Nested: WrappedArray(Sym(4)) Def: ArrayApply(Sym(4),Const(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4))
ReflectReadMutable repsW: List(Sym(4))
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(4),Const(0)),Summary(false,false,false,false,false,List((List(Sym(4)),List(ArrayApply(Sym(4),Const(0))))),List(Sym(4)),List(Sym(4), Sym(0)),List(Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4)))
Alias: List(Sym(0))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(5)),Summary(true,true,false,false,false,List(),List(),List(Sym(5), Sym(4), Sym(0)),List(Sym(5), Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4), Sym(5)))
Nested: WrappedArray(Sym(1)) Def: ArrayApply(Sym(1),Const(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6))
ReflectReadMutable repsW: List(Sym(1))
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(1),Const(0)),Summary(false,false,false,false,false,List((List(Sym(1)),List(ArrayApply(Sym(1),Const(0))))),List(Sym(1)),List(Sym(1)),List(Sym(1)),List(),List()),List(Sym(1)))
Alias: List()
NestedDeps: List()
Reflect: Reflect(EntryCreate(Const(0),Const(1)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Write: WrappedArray(Sym(7))Def: ArrayUpdate(Sym(1),Const(0),Sym(8))
NestedDeps: List()
Reflect: Reflect(ArrayUpdate(Sym(1),Const(0),Sym(8)),Summary(false,false,false,false,false,List(),List(),List(Sym(1), Sym(8)),List(Sym(1), Sym(8)),List(Sym(7)),List(Sym(7))),List(Sym(1), Sym(7), Sym(8)))
Alias: List(Sym(1), Sym(8))
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7), Sym(8), Sym(9))
ReflectReadMutable repsW: List(Sym(1), Sym(0))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(0)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
Alias: List()
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7), Sym(8), Sym(9))
ReflectReadMutable repsW: List(Sym(1), Sym(0))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(0)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
Alias: List()
Nested: WrappedArray(Sym(4)) Def: ArrayApply(Sym(4),Const(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7), Sym(8), Sym(9))
ReflectReadMutable repsW: List(Sym(4))
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(4),Const(0)),Summary(false,false,false,false,false,List((List(Sym(4)),List(ArrayApply(Sym(4),Const(0))))),List(Sym(4)),List(Sym(4), Sym(0)),List(Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4)))
Alias: List(Sym(0))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(5)),Summary(true,true,false,false,false,List(),List(),List(Sym(5), Sym(4), Sym(0)),List(Sym(5), Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4), Sym(5), Sym(6)))
NestedDeps: List()
Reflect: Reflect(NewHashMap(Int,Int),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
NestedDeps: List()
Reflect: Reflect(ArrayNew(Const(10),Const()),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Nested: WrappedArray(Sym(12)) Def: HashMapGetTable(Sym(12))
Context: List(Sym(12), Sym(13))
ReflectReadMutable repsW: List(Sym(12))
NestedDeps: List()
Reflect: Reflect(HashMapGetTable(Sym(12)),Summary(false,false,false,false,false,List((List(Sym(12)),List(HashMapGetTable(Sym(12))))),List(Sym(12)),List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12)))
Alias: List()
Write: WrappedArray(Sym(14))Def: HashMapSetTable(Sym(12),Sym(13))
reflectWriteMutable repsW: List(Sym(12)), repsR: List(Sym(13))
NestedDeps: List()
Reflect: Reflect(HashMapSetTable(Sym(12),Sym(13)),Summary(false,false,false,false,false,List(),List(Sym(13), Sym(12)),List(Sym(12), Sym(13)),List(Sym(12), Sym(13)),List(Sym(14)),List(Sym(14))),List(Sym(12), Sym(13), Sym(14)))
Alias: List(Sym(12), Sym(13))
Nested: WrappedArray(Sym(12)) Def: HashMapGetTable(Sym(12))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15))
ReflectReadMutable repsW: List(Sym(13), Sym(12))
NestedDeps: List(Sym(15))
Reflect: Reflect(HashMapGetTable(Sym(12)),Summary(false,false,false,false,false,List((List(Sym(12)),List(HashMapGetTable(Sym(12))))),List(Sym(13), Sym(12)),List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12), Sym(15)))
Alias: List()
Nested: WrappedArray(Sym(12)) Def: HashMapGetTable(Sym(12))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15), Sym(16))
ReflectReadMutable repsW: List(Sym(13), Sym(12))
NestedDeps: List(Sym(15))
Reflect: Reflect(HashMapGetTable(Sym(12)),Summary(false,false,false,false,false,List((List(Sym(12)),List(HashMapGetTable(Sym(12))))),List(Sym(13), Sym(12)),List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12), Sym(15)))
Alias: List()
Nested: WrappedArray(Sym(16)) Def: ArrayApply(Sym(16),Const(0))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15), Sym(16))
ReflectReadMutable repsW: List(Sym(16))
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(16),Const(0)),Summary(false,false,false,false,false,List((List(Sym(16)),List(ArrayApply(Sym(16),Const(0))))),List(Sym(16)),List(Sym(16), Sym(12)),List(Sym(16), Sym(12)),List(),List()),List(Sym(12), Sym(16)))
Alias: List(Sym(12))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(17)),Summary(true,true,false,false,false,List(),List(),List(Sym(17), Sym(16), Sym(12)),List(Sym(17), Sym(16), Sym(12)),List(),List()),List(Sym(12), Sym(16), Sym(17)))
Nested: WrappedArray(Sym(13)) Def: ArrayApply(Sym(13),Const(0))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18))
ReflectReadMutable repsW: List(Sym(13))
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(13),Const(0)),Summary(false,false,false,false,false,List((List(Sym(13)),List(ArrayApply(Sym(13),Const(0))))),List(Sym(13)),List(Sym(13)),List(Sym(13)),List(),List()),List(Sym(13)))
Alias: List()
NestedDeps: List()
Reflect: Reflect(EntryCreate(Const(0),Const(1)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Write: WrappedArray(Sym(19))Def: ArrayUpdate(Sym(13),Const(0),Sym(20))
NestedDeps: List()
Reflect: Reflect(ArrayUpdate(Sym(13),Const(0),Sym(20)),Summary(false,false,false,false,false,List(),List(),List(Sym(13), Sym(20)),List(Sym(13), Sym(20)),List(Sym(19)),List(Sym(19))),List(Sym(13), Sym(19), Sym(20)))
Alias: List(Sym(13), Sym(20))
Nested: WrappedArray(Sym(12)) Def: HashMapGetTable(Sym(12))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19), Sym(20), Sym(21))
ReflectReadMutable repsW: List(Sym(13), Sym(12))
NestedDeps: List(Sym(15))
Reflect: Reflect(HashMapGetTable(Sym(12)),Summary(false,false,false,false,false,List((List(Sym(12)),List(HashMapGetTable(Sym(12))))),List(Sym(13), Sym(12)),List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12), Sym(15)))
Alias: List()
Nested: WrappedArray(Sym(12)) Def: HashMapGetTable(Sym(12))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19), Sym(20), Sym(21))
ReflectReadMutable repsW: List(Sym(13), Sym(12))
NestedDeps: List(Sym(15))
Reflect: Reflect(HashMapGetTable(Sym(12)),Summary(false,false,false,false,false,List((List(Sym(12)),List(HashMapGetTable(Sym(12))))),List(Sym(13), Sym(12)),List(Sym(12)),List(Sym(12)),List(),List()),List(Sym(12), Sym(15)))
Alias: List()
Nested: WrappedArray(Sym(16)) Def: ArrayApply(Sym(16),Const(0))
Context: List(Sym(12), Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19), Sym(20), Sym(21))
ReflectReadMutable repsW: List(Sym(16))
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(16),Const(0)),Summary(false,false,false,false,false,List((List(Sym(16)),List(ArrayApply(Sym(16),Const(0))))),List(Sym(16)),List(Sym(16), Sym(12)),List(Sym(16), Sym(12)),List(),List()),List(Sym(12), Sym(16)))
Alias: List(Sym(12))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(17)),Summary(true,true,false,false,false,List(),List(),List(Sym(17), Sym(16), Sym(12)),List(Sym(17), Sym(16), Sym(12)),List(),List()),List(Sym(12), Sym(16), Sym(17), Sym(18)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapNestedMutability extends ((Int)=>(Unit)) {
def apply(x11:Int): Unit = {
val x12 = new HashMap[Int,Int]()
val x13 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](10)
val x14 = x12.table
x12.table = x13
val x16 = x12.table
val x17 = x16(0)
println(x17)
val x19 = x13(0)
val x20 = new Entry(0, 1)
x13(0) = x20
println(x17)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
