Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Reflect: Reflect(HashMapGetSize(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetSize(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Reflect: Reflect(HashMapGetLoadFactor(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetLoadFactor(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Reflect: Reflect(HashMapMAXIMUM_CAPACITY(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapMAXIMUM_CAPACITY(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Reflect: Reflect(HashMapGetThreshold(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetThreshold(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Reflect: Reflect(ArrayNew(Const(10),Const()),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Reflect: Reflect(HashMapSetTable(Sym(0),Sym(6)),Summary(false,false,false,false,false,List(),List(Sym(6), Sym(1)),List(Sym(0), Sym(6)),List(Sym(0), Sym(6)),List(Sym(1)),List(Sym(1))),List(Sym(0), Sym(1), Sym(6)))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(6), Sym(1)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(7)))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(6), Sym(1)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(7)))
Reflect: Reflect(ArrayApply(Sym(8),Const(0)),Summary(false,false,false,false,false,List((List(Sym(8)),List(ArrayApply(Sym(8),Const(0))))),List(),List(Sym(8), Sym(0)),List(Sym(8), Sym(0)),List(),List()),List(Sym(0), Sym(8)))
Reflect: Reflect(PrintLn(Sym(9)),Summary(true,true,false,false,false,List(),List(),List(Sym(9), Sym(8), Sym(0)),List(Sym(9), Sym(8), Sym(0)),List(),List()),List(Sym(0), Sym(8), Sym(9)))
Reflect: Reflect(ArrayApply(Sym(6),Const(0)),Summary(false,false,false,false,false,List((List(Sym(6)),List(ArrayApply(Sym(6),Const(0))))),List(),List(Sym(6)),List(Sym(6)),List(),List()),List(Sym(6)))
Reflect: Reflect(EntryCreate(Const(0),Const(1)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Reflect: Reflect(ArrayUpdate(Sym(6),Const(0),Sym(12)),Summary(false,false,false,false,false,List(),List(Sym(12), Sym(11)),List(Sym(6), Sym(12)),List(Sym(6), Sym(12)),List(Sym(11)),List(Sym(11))),List(Sym(6), Sym(11), Sym(12)))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(6), Sym(1)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(7)))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(6), Sym(1)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(7)))
Reflect: Reflect(ArrayApply(Sym(8),Const(0)),Summary(false,false,false,false,false,List((List(Sym(8)),List(ArrayApply(Sym(8),Const(0))))),List(Sym(12), Sym(11)),List(Sym(8), Sym(0)),List(Sym(8), Sym(0)),List(),List()),List(Sym(0), Sym(8), Sym(13)))
Reflect: Reflect(PrintLn(Sym(14)),Summary(true,true,false,false,false,List(),List(),List(Sym(14), Sym(8), Sym(0)),List(Sym(14), Sym(8), Sym(0)),List(),List()),List(Sym(0), Sym(8), Sym(10), Sym(14)))
Reflect: Reflect(NewHashMap(Int,Int,Const(200)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Reflect: Reflect(HashMapGetTable(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetTable(Sym(17))))),List(),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17)))
Reflect: Reflect(HashMapGetSize(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetSize(Sym(17))))),List(),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17)))
Reflect: Reflect(HashMapGetLoadFactor(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetLoadFactor(Sym(17))))),List(),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17)))
Reflect: Reflect(HashMapMAXIMUM_CAPACITY(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapMAXIMUM_CAPACITY(Sym(17))))),List(),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17)))
Reflect: Reflect(HashMapGetThreshold(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetThreshold(Sym(17))))),List(),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17)))
Reflect: Reflect(ArrayNew(Const(10),Const()),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Reflect: Reflect(HashMapGetTable(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetTable(Sym(17))))),List(),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17)))
Reflect: Reflect(HashMapSetTable(Sym(17),Sym(23)),Summary(false,false,false,false,false,List(),List(Sym(23), Sym(18)),List(Sym(17), Sym(23)),List(Sym(17), Sym(23)),List(Sym(18)),List(Sym(18))),List(Sym(17), Sym(18), Sym(23)))
Reflect: Reflect(HashMapGetTable(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetTable(Sym(17))))),List(Sym(23), Sym(18)),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17), Sym(24)))
Reflect: Reflect(HashMapGetTable(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetTable(Sym(17))))),List(Sym(23), Sym(18)),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17), Sym(24)))
Reflect: Reflect(ArrayApply(Sym(25),Const(0)),Summary(false,false,false,false,false,List((List(Sym(25)),List(ArrayApply(Sym(25),Const(0))))),List(),List(Sym(25), Sym(17)),List(Sym(25), Sym(17)),List(),List()),List(Sym(17), Sym(25)))
Reflect: Reflect(PrintLn(Sym(26)),Summary(true,true,false,false,false,List(),List(),List(Sym(26), Sym(25), Sym(17)),List(Sym(26), Sym(25), Sym(17)),List(),List()),List(Sym(17), Sym(25), Sym(26)))
Reflect: Reflect(ArrayApply(Sym(23),Const(0)),Summary(false,false,false,false,false,List((List(Sym(23)),List(ArrayApply(Sym(23),Const(0))))),List(),List(Sym(23)),List(Sym(23)),List(),List()),List(Sym(23)))
Reflect: Reflect(EntryCreate(Const(0),Const(1)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Reflect: Reflect(ArrayUpdate(Sym(23),Const(0),Sym(29)),Summary(false,false,false,false,false,List(),List(Sym(29), Sym(28)),List(Sym(23), Sym(29)),List(Sym(23), Sym(29)),List(Sym(28)),List(Sym(28))),List(Sym(23), Sym(28), Sym(29)))
Reflect: Reflect(HashMapGetTable(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetTable(Sym(17))))),List(Sym(23), Sym(18)),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17), Sym(24)))
Reflect: Reflect(HashMapGetTable(Sym(17)),Summary(false,false,false,false,false,List((List(Sym(17)),List(HashMapGetTable(Sym(17))))),List(Sym(23), Sym(18)),List(Sym(17)),List(Sym(17)),List(),List()),List(Sym(17), Sym(24)))
Reflect: Reflect(ArrayApply(Sym(25),Const(0)),Summary(false,false,false,false,false,List((List(Sym(25)),List(ArrayApply(Sym(25),Const(0))))),List(Sym(29), Sym(28)),List(Sym(25), Sym(17)),List(Sym(25), Sym(17)),List(),List()),List(Sym(17), Sym(25), Sym(30)))
Reflect: Reflect(PrintLn(Sym(31)),Summary(true,true,false,false,false,List(),List(),List(Sym(31), Sym(25), Sym(17)),List(Sym(31), Sym(25), Sym(17)),List(),List()),List(Sym(17), Sym(25), Sym(27), Sym(31)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapNestedMutability extends ((Int)=>(Unit)) {
def apply(x16:Int): Unit = {
val x17 = new HashMap[Int,Int](200)
val x18 = x17.table
val x19 = x17.size
val x20 = x17.loadFactor
val x21 = x17.MAXIMUM_CAPACITY
val x22 = x17.threshold
val x23 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](10)
x17.table = x23
val x25 = x17.table
val x26 = x25(0)
println(x26)
val x28 = x23(0)
val x29 = new Entry(0, 1)
x23(0) = x29
val x31 = x25(0)
println(x31)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
