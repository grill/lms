NestedDeps: List()
Reflect: Reflect(ArrayNew(Const(10),Const()),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1))
ReflectReadMutable repsW: List()
NestedDeps: List()
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
AliasRep: List(Sym(2)) deps: List(Sym(0))
Alias: List()
Write: WrappedArray(Sym(2))Def: HashMapSetTable(Sym(0),Sym(1))
reflectWriteMutable repsW: List(Sym(2)), repsR: List(Sym(1))
NestedDeps: List()
Reflect: Reflect(HashMapSetTable(Sym(0),Sym(1)),Summary(false,false,false,false,false,List(),List(Sym(1), Sym(2)),List(Sym(0), Sym(1)),List(Sym(0), Sym(1)),List(Sym(2)),List(Sym(2))),List(Sym(0), Sym(1), Sym(2)))
AliasRep: List(Sym(1), Sym(2)) deps: List(Sym(0), Sym(1), Sym(2))
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3))
ReflectReadMutable repsW: List(Sym(1), Sym(2))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(2)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
AliasRep: List(Sym(1), Sym(2)) deps: List(Sym(0), Sym(3))
Alias: List()
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4))
ReflectReadMutable repsW: List(Sym(1), Sym(2))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(2)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
AliasRep: List(Sym(1), Sym(2)) deps: List(Sym(0), Sym(3))
Alias: List()
Nested: WrappedArray(Sym(4)) Def: ArrayApply(Sym(4),Const(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4))
ReflectReadMutable repsW: List()
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(4),Const(0)),Summary(false,false,false,false,false,List((List(Sym(4)),List(ArrayApply(Sym(4),Const(0))))),List(),List(Sym(4), Sym(0)),List(Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4)))
AliasRep: List(Sym(5)) deps: List(Sym(0), Sym(4))
Alias: List(Sym(0))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(5)),Summary(true,true,false,false,false,List(),List(),List(Sym(5), Sym(4), Sym(0)),List(Sym(5), Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4), Sym(5)))
Nested: WrappedArray(Sym(1)) Def: ArrayApply(Sym(1),Const(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6))
ReflectReadMutable repsW: List()
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(1),Const(0)),Summary(false,false,false,false,false,List((List(Sym(1)),List(ArrayApply(Sym(1),Const(0))))),List(),List(Sym(1)),List(Sym(1)),List(),List()),List(Sym(1)))
AliasRep: List(Sym(7)) deps: List(Sym(1))
Alias: List()
NestedDeps: List()
Reflect: Reflect(EntryCreate(Const(0),Const(1)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Write: WrappedArray(Sym(7))Def: ArrayUpdate(Sym(1),Const(0),Sym(8))
reflectWriteMutable repsW: List(Sym(7)), repsR: List(Sym(8))
NestedDeps: List()
Reflect: Reflect(ArrayUpdate(Sym(1),Const(0),Sym(8)),Summary(false,false,false,false,false,List(),List(Sym(8), Sym(7)),List(Sym(1), Sym(8)),List(Sym(1), Sym(8)),List(Sym(7)),List(Sym(7))),List(Sym(1), Sym(7), Sym(8)))
AliasRep: List(Sym(8), Sym(7)) deps: List(Sym(1), Sym(7), Sym(8))
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7), Sym(8), Sym(9))
ReflectReadMutable repsW: List(Sym(1), Sym(2))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(2)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
AliasRep: List(Sym(1), Sym(2)) deps: List(Sym(0), Sym(3))
Alias: List()
Nested: WrappedArray(Sym(0)) Def: HashMapGetTable(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7), Sym(8), Sym(9))
ReflectReadMutable repsW: List(Sym(1), Sym(2))
NestedDeps: List(Sym(3))
Reflect: Reflect(HashMapGetTable(Sym(0)),Summary(false,false,false,false,false,List((List(Sym(0)),List(HashMapGetTable(Sym(0))))),List(Sym(1), Sym(2)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0), Sym(3)))
AliasRep: List(Sym(1), Sym(2)) deps: List(Sym(0), Sym(3))
Alias: List()
Nested: WrappedArray(Sym(4)) Def: ArrayApply(Sym(4),Const(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5), Sym(6), Sym(7), Sym(8), Sym(9))
ReflectReadMutable repsW: List(Sym(8), Sym(7))
NestedDeps: List(Sym(9))
Reflect: Reflect(ArrayApply(Sym(4),Const(0)),Summary(false,false,false,false,false,List((List(Sym(4)),List(ArrayApply(Sym(4),Const(0))))),List(Sym(8), Sym(7)),List(Sym(4), Sym(0)),List(Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4), Sym(9)))
AliasRep: List(Sym(8), Sym(7)) deps: List(Sym(0), Sym(4), Sym(9))
Alias: List(Sym(0))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(10)),Summary(true,true,false,false,false,List(),List(),List(Sym(10), Sym(4), Sym(0)),List(Sym(10), Sym(4), Sym(0)),List(),List()),List(Sym(0), Sym(4), Sym(6), Sym(10)))
NestedDeps: List()
Reflect: Reflect(NewHashMap(Int,Int),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
NestedDeps: List()
Reflect: Reflect(ArrayNew(Const(10),Const()),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Nested: WrappedArray(Sym(13)) Def: HashMapGetTable(Sym(13))
Context: List(Sym(13), Sym(14))
ReflectReadMutable repsW: List()
NestedDeps: List()
Reflect: Reflect(HashMapGetTable(Sym(13)),Summary(false,false,false,false,false,List((List(Sym(13)),List(HashMapGetTable(Sym(13))))),List(),List(Sym(13)),List(Sym(13)),List(),List()),List(Sym(13)))
AliasRep: List(Sym(15)) deps: List(Sym(13))
Alias: List()
Write: WrappedArray(Sym(15))Def: HashMapSetTable(Sym(13),Sym(14))
reflectWriteMutable repsW: List(Sym(15)), repsR: List(Sym(14))
NestedDeps: List()
Reflect: Reflect(HashMapSetTable(Sym(13),Sym(14)),Summary(false,false,false,false,false,List(),List(Sym(14), Sym(15)),List(Sym(13), Sym(14)),List(Sym(13), Sym(14)),List(Sym(15)),List(Sym(15))),List(Sym(13), Sym(14), Sym(15)))
AliasRep: List(Sym(14), Sym(15)) deps: List(Sym(13), Sym(14), Sym(15))
Nested: WrappedArray(Sym(13)) Def: HashMapGetTable(Sym(13))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16))
ReflectReadMutable repsW: List(Sym(14), Sym(15))
NestedDeps: List(Sym(16))
Reflect: Reflect(HashMapGetTable(Sym(13)),Summary(false,false,false,false,false,List((List(Sym(13)),List(HashMapGetTable(Sym(13))))),List(Sym(14), Sym(15)),List(Sym(13)),List(Sym(13)),List(),List()),List(Sym(13), Sym(16)))
AliasRep: List(Sym(14), Sym(15)) deps: List(Sym(13), Sym(16))
Alias: List()
Nested: WrappedArray(Sym(13)) Def: HashMapGetTable(Sym(13))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16), Sym(17))
ReflectReadMutable repsW: List(Sym(14), Sym(15))
NestedDeps: List(Sym(16))
Reflect: Reflect(HashMapGetTable(Sym(13)),Summary(false,false,false,false,false,List((List(Sym(13)),List(HashMapGetTable(Sym(13))))),List(Sym(14), Sym(15)),List(Sym(13)),List(Sym(13)),List(),List()),List(Sym(13), Sym(16)))
AliasRep: List(Sym(14), Sym(15)) deps: List(Sym(13), Sym(16))
Alias: List()
Nested: WrappedArray(Sym(17)) Def: ArrayApply(Sym(17),Const(0))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16), Sym(17))
ReflectReadMutable repsW: List()
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(17),Const(0)),Summary(false,false,false,false,false,List((List(Sym(17)),List(ArrayApply(Sym(17),Const(0))))),List(),List(Sym(17), Sym(13)),List(Sym(17), Sym(13)),List(),List()),List(Sym(13), Sym(17)))
AliasRep: List(Sym(18)) deps: List(Sym(13), Sym(17))
Alias: List(Sym(13))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(18)),Summary(true,true,false,false,false,List(),List(),List(Sym(18), Sym(17), Sym(13)),List(Sym(18), Sym(17), Sym(13)),List(),List()),List(Sym(13), Sym(17), Sym(18)))
Nested: WrappedArray(Sym(14)) Def: ArrayApply(Sym(14),Const(0))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19))
ReflectReadMutable repsW: List()
NestedDeps: List()
Reflect: Reflect(ArrayApply(Sym(14),Const(0)),Summary(false,false,false,false,false,List((List(Sym(14)),List(ArrayApply(Sym(14),Const(0))))),List(),List(Sym(14)),List(Sym(14)),List(),List()),List(Sym(14)))
AliasRep: List(Sym(20)) deps: List(Sym(14))
Alias: List()
NestedDeps: List()
Reflect: Reflect(EntryCreate(Const(0),Const(1)),Summary(false,false,false,false,true,List(),List(),List(),List(),List(),List()),List())
Write: WrappedArray(Sym(20))Def: ArrayUpdate(Sym(14),Const(0),Sym(21))
reflectWriteMutable repsW: List(Sym(20)), repsR: List(Sym(21))
NestedDeps: List()
Reflect: Reflect(ArrayUpdate(Sym(14),Const(0),Sym(21)),Summary(false,false,false,false,false,List(),List(Sym(21), Sym(20)),List(Sym(14), Sym(21)),List(Sym(14), Sym(21)),List(Sym(20)),List(Sym(20))),List(Sym(14), Sym(20), Sym(21)))
AliasRep: List(Sym(21), Sym(20)) deps: List(Sym(14), Sym(20), Sym(21))
Nested: WrappedArray(Sym(13)) Def: HashMapGetTable(Sym(13))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19), Sym(20), Sym(21), Sym(22))
ReflectReadMutable repsW: List(Sym(14), Sym(15))
NestedDeps: List(Sym(16))
Reflect: Reflect(HashMapGetTable(Sym(13)),Summary(false,false,false,false,false,List((List(Sym(13)),List(HashMapGetTable(Sym(13))))),List(Sym(14), Sym(15)),List(Sym(13)),List(Sym(13)),List(),List()),List(Sym(13), Sym(16)))
AliasRep: List(Sym(14), Sym(15)) deps: List(Sym(13), Sym(16))
Alias: List()
Nested: WrappedArray(Sym(13)) Def: HashMapGetTable(Sym(13))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19), Sym(20), Sym(21), Sym(22))
ReflectReadMutable repsW: List(Sym(14), Sym(15))
NestedDeps: List(Sym(16))
Reflect: Reflect(HashMapGetTable(Sym(13)),Summary(false,false,false,false,false,List((List(Sym(13)),List(HashMapGetTable(Sym(13))))),List(Sym(14), Sym(15)),List(Sym(13)),List(Sym(13)),List(),List()),List(Sym(13), Sym(16)))
AliasRep: List(Sym(14), Sym(15)) deps: List(Sym(13), Sym(16))
Alias: List()
Nested: WrappedArray(Sym(17)) Def: ArrayApply(Sym(17),Const(0))
Context: List(Sym(13), Sym(14), Sym(15), Sym(16), Sym(17), Sym(18), Sym(19), Sym(20), Sym(21), Sym(22))
ReflectReadMutable repsW: List(Sym(21), Sym(20))
NestedDeps: List(Sym(22))
Reflect: Reflect(ArrayApply(Sym(17),Const(0)),Summary(false,false,false,false,false,List((List(Sym(17)),List(ArrayApply(Sym(17),Const(0))))),List(Sym(21), Sym(20)),List(Sym(17), Sym(13)),List(Sym(17), Sym(13)),List(),List()),List(Sym(13), Sym(17), Sym(22)))
AliasRep: List(Sym(21), Sym(20)) deps: List(Sym(13), Sym(17), Sym(22))
Alias: List(Sym(13))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(23)),Summary(true,true,false,false,false,List(),List(),List(Sym(23), Sym(17), Sym(13)),List(Sym(23), Sym(17), Sym(13)),List(),List()),List(Sym(13), Sym(17), Sym(19), Sym(23)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapNestedMutability extends ((Int)=>(Unit)) {
def apply(x12:Int): Unit = {
val x13 = new HashMap[Int,Int]()
val x14 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](10)
val x15 = x13.table
x13.table = x14
val x17 = x13.table
val x18 = x17(0)
println(x18)
val x20 = x14(0)
val x21 = new Entry(0, 1)
x14(0) = x21
val x23 = x17(0)
println(x23)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
