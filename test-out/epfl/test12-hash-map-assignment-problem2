AliasRep: List(Sym(23), Sym(24)) deps: List(Sym(0), Sym(1), Sym(23), Sym(24))
AliasRep: List(Sym(39)) deps: List(Sym(38), Sym(39))
AliasRep: List(Sym(47)) deps: List(Sym(0), Sym(1), Sym(16), Sym(46), Sym(47))
AliasRep: List(Sym(51), Sym(52), Sym(53)) deps: List(Sym(0), Sym(1), Sym(16), Sym(50), Sym(51), Sym(52), Sym(53))
AliasRep: List(Sym(79)) deps: List(Sym(79))
AliasRep: List(Sym(101), Sym(102), Sym(103)) deps: List(Sym(100), Sym(101), Sym(102), Sym(103))
AliasRep: List(Sym(105), Sym(106)) deps: List(Sym(105), Sym(106))
AliasRep: List(Sym(99)) deps: List(Sym(84), Sym(98), Sym(99), Sym(100), Sym(105))
AliasRep: List(Sym(126), Sym(127), Sym(128)) deps: List(Sym(74), Sym(125), Sym(126), Sym(127), Sym(128))
AliasRep: List(Sym(130), Sym(131)) deps: List(Sym(74), Sym(130), Sym(131))
AliasRep: List(Sym(68)) deps: List(Sym(73), Sym(134), Sym(135))
AliasRep: List(Sym(67), Sym(140)) deps: List(Sym(0), Sym(59), Sym(67), Sym(140))
AliasRep: List(Sym(163), Sym(164)) deps: List(Sym(0), Sym(59), Sym(151), Sym(152), Sym(163), Sym(164))
AliasRep: List(Sym(179)) deps: List(Sym(178), Sym(179))
AliasRep: List(Sym(187)) deps: List(Sym(0), Sym(59), Sym(151), Sym(152), Sym(156), Sym(186), Sym(187))
AliasRep: List(Sym(191), Sym(192), Sym(193)) deps: List(Sym(0), Sym(59), Sym(151), Sym(152), Sym(156), Sym(190), Sym(191), Sym(192), Sym(193))
AliasRep: List(Sym(218)) deps: List(Sym(218))
AliasRep: List(Sym(240), Sym(241), Sym(242)) deps: List(Sym(239), Sym(240), Sym(241), Sym(242))
AliasRep: List(Sym(244), Sym(245)) deps: List(Sym(244), Sym(245))
AliasRep: List(Sym(238)) deps: List(Sym(223), Sym(237), Sym(238), Sym(239), Sym(244))
AliasRep: List(Sym(265), Sym(266), Sym(267)) deps: List(Sym(213), Sym(264), Sym(265), Sym(266), Sym(267))
AliasRep: List(Sym(269), Sym(270)) deps: List(Sym(213), Sym(269), Sym(270))
AliasRep: List(Sym(207)) deps: List(Sym(212), Sym(273), Sym(274))
AliasRep: List(Sym(206), Sym(279)) deps: List(Sym(0), Sym(59), Sym(151), Sym(199), Sym(206), Sym(279))
AliasRep: List(Sym(308)) deps: List(Sym(307), Sym(308))
AliasRep: List(Sym(336), Sym(337)) deps: List(Sym(324), Sym(325), Sym(336), Sym(337))
AliasRep: List(Sym(352)) deps: List(Sym(351), Sym(352))
AliasRep: List(Sym(360)) deps: List(Sym(324), Sym(325), Sym(329), Sym(359), Sym(360))
AliasRep: List(Sym(364), Sym(365), Sym(366)) deps: List(Sym(324), Sym(325), Sym(329), Sym(363), Sym(364), Sym(365), Sym(366))
AliasRep: List(Sym(391)) deps: List(Sym(391))
AliasRep: List(Sym(413), Sym(414), Sym(415)) deps: List(Sym(412), Sym(413), Sym(414), Sym(415))
AliasRep: List(Sym(417), Sym(418)) deps: List(Sym(417), Sym(418))
AliasRep: List(Sym(411)) deps: List(Sym(396), Sym(410), Sym(411), Sym(412), Sym(417))
AliasRep: List(Sym(438), Sym(439), Sym(440)) deps: List(Sym(386), Sym(437), Sym(438), Sym(439), Sym(440))
AliasRep: List(Sym(442), Sym(443)) deps: List(Sym(386), Sym(442), Sym(443))
AliasRep: List(Sym(380)) deps: List(Sym(385), Sym(446), Sym(447))
AliasRep: List(Sym(379), Sym(452)) deps: List(Sym(324), Sym(372), Sym(379), Sym(452))
AliasRep: List(Sym(475), Sym(476)) deps: List(Sym(324), Sym(372), Sym(463), Sym(464), Sym(475), Sym(476))
AliasRep: List(Sym(491)) deps: List(Sym(490), Sym(491))
AliasRep: List(Sym(499)) deps: List(Sym(324), Sym(372), Sym(463), Sym(464), Sym(468), Sym(498), Sym(499))
AliasRep: List(Sym(503), Sym(504), Sym(505)) deps: List(Sym(324), Sym(372), Sym(463), Sym(464), Sym(468), Sym(502), Sym(503), Sym(504), Sym(505))
AliasRep: List(Sym(530)) deps: List(Sym(530))
AliasRep: List(Sym(552), Sym(553), Sym(554)) deps: List(Sym(551), Sym(552), Sym(553), Sym(554))
AliasRep: List(Sym(556), Sym(557)) deps: List(Sym(556), Sym(557))
AliasRep: List(Sym(550)) deps: List(Sym(535), Sym(549), Sym(550), Sym(551), Sym(556))
AliasRep: List(Sym(577), Sym(578), Sym(579)) deps: List(Sym(525), Sym(576), Sym(577), Sym(578), Sym(579))
AliasRep: List(Sym(581), Sym(582)) deps: List(Sym(525), Sym(581), Sym(582))
AliasRep: List(Sym(519)) deps: List(Sym(524), Sym(585), Sym(586))
AliasRep: List(Sym(518), Sym(591)) deps: List(Sym(324), Sym(372), Sym(463), Sym(511), Sym(518), Sym(591))
AliasRep: List(Sym(619)) deps: List(Sym(618), Sym(619))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapAssignmentProblem2 extends ((Int)=>(Unit)) {
def apply(x323:Int): Unit = {
val x324 = new HashMap[Int,Int](200)
val x325 = x324.table
val x326 = x325.length
val x2 = 1.hashCode
val x3 = x2.toLong
val x4 = x3 >>> 20
val x5 = x3 >>> 12
val x6 = x4 ^ x5
val x7 = x6 ^ x3
val x8 = x7 >>> 7
val x9 = x7 ^ x8
val x10 = x7 >>> 4
val x11 = x9 ^ x10
val x12 = x11.toInt
val x327 = x326 - 1
val x328 = x12 & x327
val x329 = x325(x328)
var x330 = x329
val x331 = x324.size
val x332 = x324.threshold
val x333 = x324.MAXIMUM_CAPACITY
val x334 = x330
val x335 = x334 == null
if (x335) {
val x336 = new Entry(1, 2)
val x337 = x325(x328)
x325(x328) = x336
val x339 = x331 + 1
x324.size = x339

} else {
while ({
val x342 = x330
val x343 = x342.hasNext
val x349 = if (x343) {
val x344 = x330
val x345 = x344.key
val x346 = x345 != 1

x346
} else false

x349
}) {
val x351 = x330
val x352 = x351.next
x330 = x352
()
}
val x356 = x330
val x357 = x356.key
val x358 = x357 == 1
if (x358) {
val x359 = x330
val x360 = x359.value
x359.value = 2

} else {
val x363 = x330
val x364 = new Entry(1, 2)
val x365 = x363.next
val x366 = x363.hasNext
x363.next = x364
val x339 = x331 + 1
x324.size = x339

}

}
val x373 = x331 >= x332
if (x373) {
val x374 = x325.length
val x375 = x374 == x333
if (x375) {
val x63 = scala.Int.MaxValue
x324.threshold = x63

} else {
val x378 = 2 * x374
val x379 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x378)
var x380 = 0
val x408 = x378 - 1
val x409 = x12 & x408
while ({
val x381 = x380
val x382 = x325.length
val x383 = x381 < x382
x383
}) {
val x385 = x380
val x386 = x325(x385)
var x387 = x386
val x388 = x387
val x389 = x388 != null
if (x389) {
val x390 = x380
val x391 = x325(x390)
x325(x390) = null
while ({
val x393 = x387
val x394 = x393.hasNext
x394
}) {
val x396 = x387
val x397 = x396.key
val x410 = x387
val x411 = x410.next
val x412 = x387
val x413 = x379(x409)
val x414 = x412.next
val x415 = x412.hasNext
x412.next = x413
val x417 = x387
val x418 = x379(x409)
x379(x409) = x417
x387 = x411
()
}
val x423 = x387
val x424 = x423.key
val x435 = x387
val x436 = x435.next
val x437 = x387
val x438 = x379(x409)
val x439 = x437.next
val x440 = x437.hasNext
x437.next = x438
val x442 = x387
val x443 = x379(x409)
x379(x409) = x442

} else {
()
}
val x447 = x380
val x448 = x447 + 1
x380 = x448
()
}
val x452 = x324.table
x324.table = x379
val x454 = x324.loadFactor
val x455 = x454 * x378
val x456 = x455.asInstanceOf[Int]
x324.threshold = x456

}

} else {
()
}
var x462 = x324
val x463 = x462
val x464 = x463.table
val x465 = x464.length
val x466 = x465 - 1
val x467 = x12 & x466
val x468 = x464(x467)
var x469 = x468
val x470 = x463.size
val x471 = x463.threshold
val x472 = x463.MAXIMUM_CAPACITY
val x473 = x469
val x474 = x473 == null
if (x474) {
val x475 = new Entry(1, 3)
val x476 = x464(x467)
x464(x467) = x475
val x478 = x470 + 1
x463.size = x478

} else {
while ({
val x481 = x469
val x482 = x481.hasNext
val x488 = if (x482) {
val x483 = x469
val x484 = x483.key
val x485 = x484 != 1

x485
} else false

x488
}) {
val x490 = x469
val x491 = x490.next
x469 = x491
()
}
val x495 = x469
val x496 = x495.key
val x497 = x496 == 1
if (x497) {
val x498 = x469
val x499 = x498.value
x498.value = 3

} else {
val x502 = x469
val x503 = new Entry(1, 3)
val x504 = x502.next
val x505 = x502.hasNext
x502.next = x503
val x478 = x470 + 1
x463.size = x478

}

}
val x512 = x470 >= x471
if (x512) {
val x513 = x464.length
val x514 = x513 == x472
if (x514) {
val x63 = scala.Int.MaxValue
x463.threshold = x63

} else {
val x517 = 2 * x513
val x518 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x517)
var x519 = 0
val x547 = x517 - 1
val x548 = x12 & x547
while ({
val x520 = x519
val x521 = x464.length
val x522 = x520 < x521
x522
}) {
val x524 = x519
val x525 = x464(x524)
var x526 = x525
val x527 = x526
val x528 = x527 != null
if (x528) {
val x529 = x519
val x530 = x464(x529)
x464(x529) = null
while ({
val x532 = x526
val x533 = x532.hasNext
x533
}) {
val x535 = x526
val x536 = x535.key
val x549 = x526
val x550 = x549.next
val x551 = x526
val x552 = x518(x548)
val x553 = x551.next
val x554 = x551.hasNext
x551.next = x552
val x556 = x526
val x557 = x518(x548)
x518(x548) = x556
x526 = x550
()
}
val x562 = x526
val x563 = x562.key
val x574 = x526
val x575 = x574.next
val x576 = x526
val x577 = x518(x548)
val x578 = x576.next
val x579 = x576.hasNext
x576.next = x577
val x581 = x526
val x582 = x518(x548)
x518(x548) = x581

} else {
()
}
val x586 = x519
val x587 = x586 + 1
x519 = x587
()
}
val x591 = x463.table
x463.table = x518
val x593 = x463.loadFactor
val x594 = x593 * x517
val x595 = x594.asInstanceOf[Int]
x463.threshold = x595

}

} else {
()
}
val x601 = x324.table
val x602 = x601.length
val x603 = x602 - 1
val x604 = x12 & x603
val x605 = x601(x604)
var x606 = x605
val x607 = x606
val x608 = x607 == null
val x632 = if (x608) {
val x297 = None
x297
} else {
while ({
val x609 = x606
val x610 = x609.hasNext
val x616 = if (x610) {
val x611 = x606
val x612 = x611.key
val x613 = x612 != 1

x613
} else false

x616
}) {
val x618 = x606
val x619 = x618.next
x606 = x619
()
}
val x623 = x606
val x624 = x623.key
val x625 = x624 == 1
val x630 = if (x625) {
val x626 = x606
val x627 = x626.value
val x628 = Some(x627)
x628
} else {
val x297 = None
x297
}
x630
}
println(x632)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
