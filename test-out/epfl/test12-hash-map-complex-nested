/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapComplexNested extends ((Int)=>(Unit)) {
def apply(x1178:Int): Unit = {
val x1179 = new HashMap[Int,scala.virtualization.lms.epfl.test12.HashMap[Int, Int]](1)
val x1180 = x1179.table
val x1181 = x1180(0)
val x1182 = x1179.size
val x1183 = x1179.loadFactor
val x1184 = x1179.MAXIMUM_CAPACITY
val x1185 = x1179.threshold
val x1186 = new HashMap[Int,Int](1)
val x1187 = x1186.table
val x1188 = x1187(0)
val x1189 = x1186.size
val x1190 = x1186.loadFactor
val x1191 = x1186.MAXIMUM_CAPACITY
val x1192 = x1186.threshold
val x1193 = new HashMap[Int,Int](1)
val x1194 = x1193.table
val x1195 = x1194(0)
val x1196 = x1193.size
val x1197 = x1193.loadFactor
val x1198 = x1193.MAXIMUM_CAPACITY
val x1199 = x1193.threshold
val x1200 = x1180.length
val x21 = 1.hashCode
val x22 = x21.toLong
val x23 = x22 >>> 20
val x24 = x22 >>> 12
val x25 = x23 ^ x24
val x26 = x25 ^ x22
val x27 = x26 >>> 7
val x28 = x26 ^ x27
val x29 = x26 >>> 4
val x30 = x28 ^ x29
val x31 = x30.toInt
val x1201 = x1200 - 1
val x1202 = x31 & x1201
val x1203 = x1180(x1202)
var x1204: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1203
val x1205 = x1204
val x1206 = x1205 == null
val x1209 = x1182 + 1
if (x1206) {
val x1207 = new Entry(1, x1186)
x1180(x1202) = x1207
x1179.size = x1209

} else {
while ({
val x1212 = x1204
val x1213 = x1212.hasNext
val x1219 = if (x1213) {
val x1214 = x1204
val x1215 = x1214.key
val x1216 = x1215 != 1

x1216
} else false

x1219
}) {
val x1221 = x1204
val x1222 = x1221.next
x1204 = x1222
()
}
val x1226 = x1204
val x1227 = x1226.key
val x1228 = x1227 == 1
if (x1228) {
val x1229 = x1226.value
x1226.value = x1186

} else {
val x1232 = new Entry(1, x1186)
val x1233 = x1226.next
val x1234 = x1226.hasNext
x1226.next = x1232
x1179.size = x1209

}

}
val x1241 = x1179.size
val x1242 = x1241 >= x1185
val x1243 = x1200 == x1184
val x76 = scala.Int.MaxValue
val x1246 = 2 * x1200
val x1275 = x1246 - 1
val x1292 = x1183 * x1246
val x1293 = x1292.asInstanceOf[Int]
if (x1242) {
if (x1243) {
x1179.threshold = x76

} else {
val x1247 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]](x1246)
var x1248: Int = 0
while ({
val x1249 = x1248
val x1250 = x1180.length
val x1251 = x1249 < x1250
x1251
}) {
val x1253 = x1248
val x1254 = x1180(x1253)
var x1255: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1254
val x1256 = x1255
val x1257 = x1256 != null
if (x1257) {
x1180(x1253) = null
while ({
val x1259 = x1255
val x1260 = x1259 != null
x1260
}) {
val x1262 = x1255
val x1263 = x1262.key
val x1277 = x1262.next
val x1264 = x1263.hashCode
val x1265 = x1264.toLong
val x1266 = x1265 >>> 20
val x1267 = x1265 >>> 12
val x1268 = x1266 ^ x1267
val x1269 = x1268 ^ x1265
val x1270 = x1269 >>> 7
val x1271 = x1269 ^ x1270
val x1272 = x1269 >>> 4
val x1273 = x1271 ^ x1272
val x1274 = x1273.toInt
val x1276 = x1274 & x1275
val x1278 = x1247(x1276)
val x1279 = x1262.hasNext
x1262.next = x1278
x1247(x1276) = x1262
x1255 = x1277
()
}

} else {
()
}
val x1287 = x1253 + 1
x1248 = x1287
()
}
x1179.table = x1247
x1179.threshold = x1293

}

} else {
()
}
val x1299 = x1179.table
val x1300 = x1299.length
val x133 = 2.hashCode
val x134 = x133.toLong
val x135 = x134 >>> 20
val x136 = x134 >>> 12
val x137 = x135 ^ x136
val x138 = x137 ^ x134
val x139 = x138 >>> 7
val x140 = x138 ^ x139
val x141 = x138 >>> 4
val x142 = x140 ^ x141
val x143 = x142.toInt
val x1301 = x1300 - 1
val x1302 = x143 & x1301
val x1303 = x1299(x1302)
var x1304: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1303
val x1305 = x1304
val x1306 = x1305 == null
val x1309 = x1241 + 1
if (x1306) {
val x1307 = new Entry(2, x1193)
x1299(x1302) = x1307
x1179.size = x1309

} else {
while ({
val x1312 = x1304
val x1313 = x1312.hasNext
val x1319 = if (x1313) {
val x1314 = x1304
val x1315 = x1314.key
val x1316 = x1315 != 2

x1316
} else false

x1319
}) {
val x1321 = x1304
val x1322 = x1321.next
x1304 = x1322
()
}
val x1326 = x1304
val x1327 = x1326.key
val x1328 = x1327 == 2
if (x1328) {
val x1329 = x1326.value
x1326.value = x1193

} else {
val x1332 = new Entry(2, x1193)
val x1333 = x1326.next
val x1334 = x1326.hasNext
x1326.next = x1332
x1179.size = x1309

}

}
val x1341 = x1179.threshold
val x1342 = x1179.size
val x1343 = x1342 >= x1341
val x1344 = x1300 == x1184
val x1347 = 2 * x1300
val x1376 = x1347 - 1
val x1393 = x1183 * x1347
val x1394 = x1393.asInstanceOf[Int]
if (x1343) {
if (x1344) {
x1179.threshold = x76

} else {
val x1348 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]](x1347)
var x1349: Int = 0
while ({
val x1350 = x1349
val x1351 = x1299.length
val x1352 = x1350 < x1351
x1352
}) {
val x1354 = x1349
val x1355 = x1299(x1354)
var x1356: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1355
val x1357 = x1356
val x1358 = x1357 != null
if (x1358) {
x1299(x1354) = null
while ({
val x1360 = x1356
val x1361 = x1360 != null
x1361
}) {
val x1363 = x1356
val x1364 = x1363.key
val x1378 = x1363.next
val x1365 = x1364.hashCode
val x1366 = x1365.toLong
val x1367 = x1366 >>> 20
val x1368 = x1366 >>> 12
val x1369 = x1367 ^ x1368
val x1370 = x1369 ^ x1366
val x1371 = x1370 >>> 7
val x1372 = x1370 ^ x1371
val x1373 = x1370 >>> 4
val x1374 = x1372 ^ x1373
val x1375 = x1374.toInt
val x1377 = x1375 & x1376
val x1379 = x1348(x1377)
val x1380 = x1363.hasNext
x1363.next = x1379
x1348(x1377) = x1363
x1356 = x1378
()
}

} else {
()
}
val x1388 = x1354 + 1
x1349 = x1388
()
}
x1179.table = x1348
x1179.threshold = x1394

}

} else {
()
}
val x1400 = x1187.length
val x1401 = x1400 - 1
val x1402 = x31 & x1401
val x1403 = x1187(x1402)
var x1404: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x1403
val x1405 = x1404
val x1406 = x1405 == null
if (x1406) {
val x1407 = new Entry(1, 1)
x1187(x1402) = x1407
val x1409 = x1189 + 1
x1186.size = x1409

} else {
while ({
val x1412 = x1404
val x1413 = x1412.hasNext
val x1419 = if (x1413) {
val x1414 = x1404
val x1415 = x1414.key
val x1416 = x1415 != 1

x1416
} else false

x1419
}) {
val x1421 = x1404
val x1422 = x1421.next
x1404 = x1422
()
}
val x1426 = x1404
val x1427 = x1426.key
val x1428 = x1427 == 1
if (x1428) {
val x1429 = x1426.value
x1426.value = 1

} else {
val x1432 = new Entry(1, 1)
val x1433 = x1426.next
val x1434 = x1426.hasNext
x1426.next = x1432
val x1409 = x1189 + 1
x1186.size = x1409

}

}
val x1441 = x1186.size
val x1442 = x1441 >= x1192
if (x1442) {
val x1443 = x1400 == x1191
if (x1443) {
x1186.threshold = x76

} else {
val x1446 = 2 * x1400
val x1447 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x1446)
var x1448: Int = 0
val x1475 = x1446 - 1
while ({
val x1449 = x1448
val x1450 = x1187.length
val x1451 = x1449 < x1450
x1451
}) {
val x1453 = x1448
val x1454 = x1187(x1453)
var x1455: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x1454
val x1456 = x1455
val x1457 = x1456 != null
if (x1457) {
x1187(x1453) = null
while ({
val x1459 = x1455
val x1460 = x1459 != null
x1460
}) {
val x1462 = x1455
val x1463 = x1462.key
val x1477 = x1462.next
val x1464 = x1463.hashCode
val x1465 = x1464.toLong
val x1466 = x1465 >>> 20
val x1467 = x1465 >>> 12
val x1468 = x1466 ^ x1467
val x1469 = x1468 ^ x1465
val x1470 = x1469 >>> 7
val x1471 = x1469 ^ x1470
val x1472 = x1469 >>> 4
val x1473 = x1471 ^ x1472
val x1474 = x1473.toInt
val x1476 = x1474 & x1475
val x1478 = x1447(x1476)
val x1479 = x1462.hasNext
x1462.next = x1478
x1447(x1476) = x1462
x1455 = x1477
()
}

} else {
()
}
val x1487 = x1453 + 1
x1448 = x1487
()
}
x1186.table = x1447
val x1492 = x1190 * x1446
val x1493 = x1492.asInstanceOf[Int]
x1186.threshold = x1493

}

} else {
()
}
val x1499 = x1179.table
val x1500 = x1499.length
val x1501 = x1500 - 1
val x1502 = x31 & x1501
val x1503 = x1499(x1502)
var x1504: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1503
val x1505 = x1504
val x1506 = x1505 == null
val x351 = None
val x1529 = if (x1506) {
x351
} else {
while ({
val x1507 = x1504
val x1508 = x1507.hasNext
val x1514 = if (x1508) {
val x1509 = x1504
val x1510 = x1509.key
val x1511 = x1510 != 1

x1511
} else false

x1514
}) {
val x1516 = x1504
val x1517 = x1516.next
x1504 = x1517
()
}
val x1521 = x1504
val x1522 = x1521.key
val x1523 = x1522 == 1
val x1527 = if (x1523) {
val x1524 = x1521.value
val x1525 = Some(x1524)
x1525
} else {
x351
}
x1527
}
val x1530 = x1529.get
val x1531 = x1530.table
val x1532 = x1531.length
val x1533 = x1532 - 1
val x1534 = x31 & x1533
val x1535 = x1531(x1534)
var x1536: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x1535
val x1537 = x1530.size
val x1538 = x1536
val x1539 = x1538 == null
val x1542 = x1537 + 1
if (x1539) {
val x1540 = new Entry(1, 2)
x1531(x1534) = x1540
x1530.size = x1542

} else {
while ({
val x1545 = x1536
val x1546 = x1545.hasNext
val x1552 = if (x1546) {
val x1547 = x1536
val x1548 = x1547.key
val x1549 = x1548 != 1

x1549
} else false

x1552
}) {
val x1554 = x1536
val x1555 = x1554.next
x1536 = x1555
()
}
val x1559 = x1536
val x1560 = x1559.key
val x1561 = x1560 == 1
if (x1561) {
val x1562 = x1559.value
x1559.value = 2

} else {
val x1565 = new Entry(1, 2)
val x1566 = x1559.next
val x1567 = x1559.hasNext
x1559.next = x1565
x1530.size = x1542

}

}
val x1574 = x1530.threshold
val x1575 = x1530.MAXIMUM_CAPACITY
val x1576 = x1530.size
val x1577 = x1576 >= x1574
val x1578 = x1532 == x1575
val x1581 = 2 * x1532
val x1610 = x1581 - 1
if (x1577) {
if (x1578) {
x1530.threshold = x76

} else {
val x1582 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x1581)
var x1583: Int = 0
while ({
val x1584 = x1583
val x1585 = x1531.length
val x1586 = x1584 < x1585
x1586
}) {
val x1588 = x1583
val x1589 = x1531(x1588)
var x1590: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x1589
val x1591 = x1590
val x1592 = x1591 != null
if (x1592) {
x1531(x1588) = null
while ({
val x1594 = x1590
val x1595 = x1594 != null
x1595
}) {
val x1597 = x1590
val x1598 = x1597.key
val x1612 = x1597.next
val x1599 = x1598.hashCode
val x1600 = x1599.toLong
val x1601 = x1600 >>> 20
val x1602 = x1600 >>> 12
val x1603 = x1601 ^ x1602
val x1604 = x1603 ^ x1600
val x1605 = x1604 >>> 7
val x1606 = x1604 ^ x1605
val x1607 = x1604 >>> 4
val x1608 = x1606 ^ x1607
val x1609 = x1608.toInt
val x1611 = x1609 & x1610
val x1613 = x1582(x1611)
val x1614 = x1597.hasNext
x1597.next = x1613
x1582(x1611) = x1597
x1590 = x1612
()
}

} else {
()
}
val x1622 = x1588 + 1
x1583 = x1622
()
}
x1530.table = x1582
val x1627 = x1530.loadFactor
val x1628 = x1627 * x1581
val x1629 = x1628.asInstanceOf[Int]
x1530.threshold = x1629

}

} else {
()
}
var x1635: Int = 0
val x481 = null.asInstanceOf[scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]]
var x1636: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
val x495 = null.asInstanceOf[scala.virtualization.lms.epfl.test12.Entry[Int, Int]]
while ({
val x1637 = x1635
val x1638 = x1499.length
val x1639 = x1637 < x1638
x1639
}) {
val x1641 = x1635
val x1642 = x1499(x1641)
val x1643 = x1642 != null
if (x1643) {
x1636 = x1642
println(x1642)
val x1646 = x1642.value
val x1647 = x1646.table
var x1648: Int = 0
var x1649: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x495
while ({
val x1650 = x1648
val x1651 = x1647.length
val x1652 = x1650 < x1651
x1652
}) {
val x1654 = x1648
val x1655 = x1647(x1654)
val x1656 = x1655 != null
if (x1656) {
x1649 = x1655
println(x1655)
while ({
val x1659 = x1649
val x1660 = x1659.hasNext
x1660
}) {
val x1662 = x1649
val x1663 = x1662.next
x1649 = x1663
val x1665 = x1649
println(x1665)

}

} else {
()
}
val x1671 = x1654 + 1
x1648 = x1671
()
}
while ({
val x1675 = x1636
val x1676 = x1675.hasNext
x1676
}) {
val x1678 = x1636
val x1679 = x1678.next
x1636 = x1679
val x1681 = x1636
println(x1681)
val x1683 = x1681.value
val x1684 = x1683.table
var x1685: Int = 0
var x1686: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x495
while ({
val x1687 = x1685
val x1688 = x1684.length
val x1689 = x1687 < x1688
x1689
}) {
val x1691 = x1685
val x1692 = x1684(x1691)
val x1693 = x1692 != null
if (x1693) {
x1686 = x1692
println(x1692)
while ({
val x1696 = x1686
val x1697 = x1696.hasNext
x1697
}) {
val x1699 = x1686
val x1700 = x1699.next
x1686 = x1700
val x1702 = x1686
println(x1702)

}

} else {
()
}
val x1708 = x1691 + 1
x1685 = x1708
()
}

}

} else {
()
}
val x1716 = x1641 + 1
x1635 = x1716
()
}
var x1720: Int = 0
var x1721: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
val x578 = null.asInstanceOf[scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]
while ({
val x1722 = x1720
val x1723 = x1499.length
val x1724 = x1722 < x1723
x1724
}) {
val x1726 = x1720
val x1727 = x1499(x1726)
val x1728 = x1727 != null
if (x1728) {
x1721 = x1727
val x1730 = x1727.key
val x1731 = x1179.table
val x1743 = x1731.length
val x1732 = x1730.hashCode
val x1733 = x1732.toLong
val x1734 = x1733 >>> 20
val x1735 = x1733 >>> 12
val x1736 = x1734 ^ x1735
val x1737 = x1736 ^ x1733
val x1738 = x1737 >>> 7
val x1739 = x1737 ^ x1738
val x1740 = x1737 >>> 4
val x1741 = x1739 ^ x1740
val x1742 = x1741.toInt
val x1744 = x1743 - 1
val x1745 = x1742 & x1744
val x1746 = x1731(x1745)
var x1747: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1746
val x1748 = x1179.size
val x1749 = x1747
val x1750 = x1749 == null
if (x1750) {
val x1751 = new Entry(x1730, x578)
x1731(x1745) = x1751
val x1753 = x1748 + 1
x1179.size = x1753

} else {
while ({
val x1756 = x1747
val x1757 = x1756.hasNext
val x1763 = if (x1757) {
val x1758 = x1747
val x1759 = x1758.key
val x1760 = x1759 != x1730

x1760
} else false

x1763
}) {
val x1765 = x1747
val x1766 = x1765.next
x1747 = x1766
()
}
val x1770 = x1747
val x1771 = x1770.key
val x1772 = x1771 == x1730
if (x1772) {
val x1773 = x1770.value
x1770.value = x578

} else {
val x1776 = new Entry(x1730, x578)
val x1777 = x1770.next
val x1778 = x1770.hasNext
x1770.next = x1776
val x1753 = x1748 + 1
x1179.size = x1753

}

}
val x1785 = x1179.threshold
val x1786 = x1179.MAXIMUM_CAPACITY
val x1787 = x1179.size
val x1788 = x1787 >= x1785
if (x1788) {
val x1789 = x1743 == x1786
if (x1789) {
x1179.threshold = x76

} else {
val x1792 = 2 * x1743
val x1793 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]](x1792)
var x1794: Int = 0
val x1821 = x1792 - 1
while ({
val x1795 = x1794
val x1796 = x1731.length
val x1797 = x1795 < x1796
x1797
}) {
val x1799 = x1794
val x1800 = x1731(x1799)
var x1801: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1800
val x1802 = x1801
val x1803 = x1802 != null
if (x1803) {
x1731(x1799) = null
while ({
val x1805 = x1801
val x1806 = x1805 != null
x1806
}) {
val x1808 = x1801
val x1809 = x1808.key
val x1823 = x1808.next
val x1810 = x1809.hashCode
val x1811 = x1810.toLong
val x1812 = x1811 >>> 20
val x1813 = x1811 >>> 12
val x1814 = x1812 ^ x1813
val x1815 = x1814 ^ x1811
val x1816 = x1815 >>> 7
val x1817 = x1815 ^ x1816
val x1818 = x1815 >>> 4
val x1819 = x1817 ^ x1818
val x1820 = x1819.toInt
val x1822 = x1820 & x1821
val x1824 = x1793(x1822)
val x1825 = x1808.hasNext
x1808.next = x1824
x1793(x1822) = x1808
x1801 = x1823
()
}

} else {
()
}
val x1833 = x1799 + 1
x1794 = x1833
()
}
x1179.table = x1793
val x1838 = x1179.loadFactor
val x1839 = x1838 * x1792
val x1840 = x1839.asInstanceOf[Int]
x1179.threshold = x1840

}

} else {
()
}
while ({
val x1846 = x1721
val x1847 = x1846.hasNext
x1847
}) {
val x1849 = x1721
val x1850 = x1849.next
x1721 = x1850
val x1852 = x1721
val x1853 = x1852.key
val x1854 = x1179.table
val x1866 = x1854.length
val x1855 = x1853.hashCode
val x1856 = x1855.toLong
val x1857 = x1856 >>> 20
val x1858 = x1856 >>> 12
val x1859 = x1857 ^ x1858
val x1860 = x1859 ^ x1856
val x1861 = x1860 >>> 7
val x1862 = x1860 ^ x1861
val x1863 = x1860 >>> 4
val x1864 = x1862 ^ x1863
val x1865 = x1864.toInt
val x1867 = x1866 - 1
val x1868 = x1865 & x1867
val x1869 = x1854(x1868)
var x1870: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1869
val x1871 = x1179.size
val x1872 = x1870
val x1873 = x1872 == null
if (x1873) {
val x1874 = new Entry(x1853, x578)
x1854(x1868) = x1874
val x1876 = x1871 + 1
x1179.size = x1876

} else {
while ({
val x1879 = x1870
val x1880 = x1879.hasNext
val x1886 = if (x1880) {
val x1881 = x1870
val x1882 = x1881.key
val x1883 = x1882 != x1853

x1883
} else false

x1886
}) {
val x1888 = x1870
val x1889 = x1888.next
x1870 = x1889
()
}
val x1893 = x1870
val x1894 = x1893.key
val x1895 = x1894 == x1853
if (x1895) {
val x1896 = x1893.value
x1893.value = x578

} else {
val x1899 = new Entry(x1853, x578)
val x1900 = x1893.next
val x1901 = x1893.hasNext
x1893.next = x1899
val x1876 = x1871 + 1
x1179.size = x1876

}

}
val x1908 = x1179.threshold
val x1909 = x1179.MAXIMUM_CAPACITY
val x1910 = x1179.size
val x1911 = x1910 >= x1908
if (x1911) {
val x1912 = x1866 == x1909
if (x1912) {
x1179.threshold = x76

} else {
val x1915 = 2 * x1866
val x1916 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]](x1915)
var x1917: Int = 0
val x1944 = x1915 - 1
while ({
val x1918 = x1917
val x1919 = x1854.length
val x1920 = x1918 < x1919
x1920
}) {
val x1922 = x1917
val x1923 = x1854(x1922)
var x1924: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x1923
val x1925 = x1924
val x1926 = x1925 != null
if (x1926) {
x1854(x1922) = null
while ({
val x1928 = x1924
val x1929 = x1928 != null
x1929
}) {
val x1931 = x1924
val x1932 = x1931.key
val x1946 = x1931.next
val x1933 = x1932.hashCode
val x1934 = x1933.toLong
val x1935 = x1934 >>> 20
val x1936 = x1934 >>> 12
val x1937 = x1935 ^ x1936
val x1938 = x1937 ^ x1934
val x1939 = x1938 >>> 7
val x1940 = x1938 ^ x1939
val x1941 = x1938 >>> 4
val x1942 = x1940 ^ x1941
val x1943 = x1942.toInt
val x1945 = x1943 & x1944
val x1947 = x1916(x1945)
val x1948 = x1931.hasNext
x1931.next = x1947
x1916(x1945) = x1931
x1924 = x1946
()
}

} else {
()
}
val x1956 = x1922 + 1
x1917 = x1956
()
}
x1179.table = x1916
val x1961 = x1179.loadFactor
val x1962 = x1961 * x1915
val x1963 = x1962.asInstanceOf[Int]
x1179.threshold = x1963

}

} else {
()
}

}

} else {
()
}
val x1973 = x1726 + 1
x1720 = x1973
()
}
var x1977: Int = 0
var x1978: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
while ({
val x1979 = x1977
val x1980 = x1499.length
val x1981 = x1979 < x1980
x1981
}) {
val x1983 = x1977
val x1984 = x1499(x1983)
val x1985 = x1984 != null
if (x1985) {
x1978 = x1984
println(x1984)
while ({
val x1988 = x1978
val x1989 = x1988.hasNext
x1989
}) {
val x1991 = x1978
val x1992 = x1991.next
x1978 = x1992
val x1994 = x1978
println(x1994)

}

} else {
()
}
val x2000 = x1983 + 1
x1977 = x2000
()
}
var x2004: Int = 0
var x2005: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
while ({
val x2006 = x2004
val x2007 = x1499.length
val x2008 = x2006 < x2007
x2008
}) {
val x2010 = x2004
val x2011 = x1499(x2010)
val x2012 = x2011 != null
if (x2012) {
x2005 = x2011
val x2014 = x2011.key
val x2015 = x1179.table
val x2027 = x2015.length
var x2030: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
val x2016 = x2014.hashCode
val x2017 = x2016.toLong
val x2018 = x2017 >>> 20
val x2019 = x2017 >>> 12
val x2020 = x2018 ^ x2019
val x2021 = x2020 ^ x2017
val x2022 = x2021 >>> 7
val x2023 = x2021 ^ x2022
val x2024 = x2021 >>> 4
val x2025 = x2023 ^ x2024
val x2026 = x2025.toInt
val x2028 = x2027 - 1
val x2029 = x2026 & x2028
val x2031 = x2015(x2029)
var x2032: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x2031
val x2033 = x2032
val x2034 = x2033 != null
if (x2034) {
while ({
val x2035 = x2032
val x2036 = x2035.hasNext
val x2042 = if (x2036) {
val x2037 = x2032
val x2038 = x2037.key
val x2039 = x2038 != x2014

x2039
} else false

x2042
}) {
val x2044 = x2032
x2030 = x2044
val x2046 = x2044.next
x2032 = x2046
()
}
val x2050 = x2030
val x2051 = x2050 == null
if (x2051) {
x2015(x2029) = null

} else {
val x2054 = x2032
val x2055 = x2054.key
val x2056 = x2055 == x2014
if (x2056) {
val x2057 = x2054.next
val x2058 = x2050.next
val x2059 = x2050.hasNext
x2050.next = x2057

} else {
()
}

}

} else {
()
}
while ({
val x2067 = x2005
val x2068 = x2067.hasNext
x2068
}) {
val x2070 = x2005
val x2071 = x2070.next
x2005 = x2071
val x2073 = x2005
val x2074 = x2073.key
val x2075 = x1179.table
val x2087 = x2075.length
var x2090: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
val x2076 = x2074.hashCode
val x2077 = x2076.toLong
val x2078 = x2077 >>> 20
val x2079 = x2077 >>> 12
val x2080 = x2078 ^ x2079
val x2081 = x2080 ^ x2077
val x2082 = x2081 >>> 7
val x2083 = x2081 ^ x2082
val x2084 = x2081 >>> 4
val x2085 = x2083 ^ x2084
val x2086 = x2085.toInt
val x2088 = x2087 - 1
val x2089 = x2086 & x2088
val x2091 = x2075(x2089)
var x2092: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x2091
val x2093 = x2092
val x2094 = x2093 != null
if (x2094) {
while ({
val x2095 = x2092
val x2096 = x2095.hasNext
val x2102 = if (x2096) {
val x2097 = x2092
val x2098 = x2097.key
val x2099 = x2098 != x2074

x2099
} else false

x2102
}) {
val x2104 = x2092
x2090 = x2104
val x2106 = x2104.next
x2092 = x2106
()
}
val x2110 = x2090
val x2111 = x2110 == null
if (x2111) {
x2075(x2089) = null

} else {
val x2114 = x2092
val x2115 = x2114.key
val x2116 = x2115 == x2074
if (x2116) {
val x2117 = x2114.next
val x2118 = x2110.next
val x2119 = x2110.hasNext
x2110.next = x2117

} else {
()
}

}

} else {
()
}

}

} else {
()
}
val x2131 = x2010 + 1
x2004 = x2131
()
}
val x983 = 3.hashCode
val x984 = x983.toLong
val x985 = x984 >>> 20
val x986 = x984 >>> 12
val x987 = x985 ^ x986
val x988 = x987 ^ x984
val x989 = x988 >>> 7
val x990 = x988 ^ x989
val x991 = x988 >>> 4
val x992 = x990 ^ x991
val x993 = x992.toInt
val x2135 = x993 & x1501
val x2136 = x1499(x2135)
var x2137: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x2136
val x2138 = x2137
val x2139 = x2138 == null
val x2142 = x1342 + 1
if (x2139) {
val x2140 = new Entry(3, x1186)
x1499(x2135) = x2140
x1179.size = x2142

} else {
while ({
val x2145 = x2137
val x2146 = x2145.hasNext
val x2152 = if (x2146) {
val x2147 = x2137
val x2148 = x2147.key
val x2149 = x2148 != 3

x2149
} else false

x2152
}) {
val x2154 = x2137
val x2155 = x2154.next
x2137 = x2155
()
}
val x2159 = x2137
val x2160 = x2159.key
val x2161 = x2160 == 3
if (x2161) {
val x2162 = x2159.value
x2159.value = x1186

} else {
val x2165 = new Entry(3, x1186)
val x2166 = x2159.next
val x2167 = x2159.hasNext
x2159.next = x2165
x1179.size = x2142

}

}
val x2174 = x1179.threshold
val x2175 = x1179.size
val x2176 = x2175 >= x2174
val x2177 = x1500 == x1184
val x2180 = 2 * x1500
val x2209 = x2180 - 1
val x2226 = x1183 * x2180
val x2227 = x2226.asInstanceOf[Int]
if (x2176) {
if (x2177) {
x1179.threshold = x76

} else {
val x2181 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]]](x2180)
var x2182: Int = 0
while ({
val x2183 = x2182
val x2184 = x1499.length
val x2185 = x2183 < x2184
x2185
}) {
val x2187 = x2182
val x2188 = x1499(x2187)
var x2189: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x2188
val x2190 = x2189
val x2191 = x2190 != null
if (x2191) {
x1499(x2187) = null
while ({
val x2193 = x2189
val x2194 = x2193 != null
x2194
}) {
val x2196 = x2189
val x2197 = x2196.key
val x2211 = x2196.next
val x2198 = x2197.hashCode
val x2199 = x2198.toLong
val x2200 = x2199 >>> 20
val x2201 = x2199 >>> 12
val x2202 = x2200 ^ x2201
val x2203 = x2202 ^ x2199
val x2204 = x2203 >>> 7
val x2205 = x2203 ^ x2204
val x2206 = x2203 >>> 4
val x2207 = x2205 ^ x2206
val x2208 = x2207.toInt
val x2210 = x2208 & x2209
val x2212 = x2181(x2210)
val x2213 = x2196.hasNext
x2196.next = x2212
x2181(x2210) = x2196
x2189 = x2211
()
}

} else {
()
}
val x2221 = x2187 + 1
x2182 = x2221
()
}
x1179.table = x2181
x1179.threshold = x2227

}

} else {
()
}
val x2233 = x1179.table
var x2234: Int = 0
var x2235: scala.virtualization.lms.epfl.test12.Entry[Int, scala.virtualization.lms.epfl.test12.HashMap[Int, Int]] = x481
while ({
val x2236 = x2234
val x2237 = x2233.length
val x2238 = x2236 < x2237
x2238
}) {
val x2240 = x2234
val x2241 = x2233(x2240)
val x2242 = x2241 != null
if (x2242) {
x2235 = x2241
println(x2241)
val x2245 = x2241.value
val x2246 = x2245.table
var x2247: Int = 0
var x2248: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x495
while ({
val x2249 = x2247
val x2250 = x2246.length
val x2251 = x2249 < x2250
x2251
}) {
val x2253 = x2247
val x2254 = x2246(x2253)
val x2255 = x2254 != null
if (x2255) {
x2248 = x2254
println(x2254)
while ({
val x2258 = x2248
val x2259 = x2258.hasNext
x2259
}) {
val x2261 = x2248
val x2262 = x2261.next
x2248 = x2262
val x2264 = x2248
println(x2264)

}

} else {
()
}
val x2270 = x2253 + 1
x2247 = x2270
()
}
while ({
val x2274 = x2235
val x2275 = x2274.hasNext
x2275
}) {
val x2277 = x2235
val x2278 = x2277.next
x2235 = x2278
val x2280 = x2235
println(x2280)
val x2282 = x2280.value
val x2283 = x2282.table
var x2284: Int = 0
var x2285: scala.virtualization.lms.epfl.test12.Entry[Int, Int] = x495
while ({
val x2286 = x2284
val x2287 = x2283.length
val x2288 = x2286 < x2287
x2288
}) {
val x2290 = x2284
val x2291 = x2283(x2290)
val x2292 = x2291 != null
if (x2292) {
x2285 = x2291
println(x2291)
while ({
val x2295 = x2285
val x2296 = x2295.hasNext
x2296
}) {
val x2298 = x2285
val x2299 = x2298.next
x2285 = x2299
val x2301 = x2285
println(x2301)

}

} else {
()
}
val x2307 = x2290 + 1
x2284 = x2307
()
}

}

} else {
()
}
val x2315 = x2240 + 1
x2234 = x2315
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
