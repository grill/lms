AliasRep: List(Sym(1)) deps: List(Sym(1))
AliasRep: List(Sym(24), Sym(25)) deps: List(Sym(0), Sym(4), Sym(24), Sym(25))
AliasRep: List(Sym(40)) deps: List(Sym(39), Sym(40))
AliasRep: List(Sym(3), Sym(48)) deps: List(Sym(0), Sym(4), Sym(19), Sym(47), Sym(48))
AliasRep: List(Sym(52), Sym(53), Sym(54)) deps: List(Sym(0), Sym(4), Sym(19), Sym(51), Sym(52), Sym(53), Sym(54))
AliasRep: List(Sym(84)) deps: List(Sym(84))
AliasRep: List(Sym(107), Sym(108), Sym(109)) deps: List(Sym(106), Sym(107), Sym(108), Sym(109))
AliasRep: List(Sym(111), Sym(112)) deps: List(Sym(111), Sym(112))
AliasRep: List(Sym(105)) deps: List(Sym(89), Sym(104), Sym(105), Sym(106), Sym(111))
AliasRep: List(Sym(73)) deps: List(Sym(78), Sym(118), Sym(119))
AliasRep: List(Sym(72), Sym(124)) deps: List(Sym(0), Sym(60), Sym(72), Sym(124))
AliasRep: List(Sym(165)) deps: List(Sym(164), Sym(165))
AliasRep: List(Sym(201), Sym(202)) deps: List(Sym(0), Sym(60), Sym(181), Sym(201), Sym(202))
AliasRep: List(Sym(217)) deps: List(Sym(216), Sym(217))
AliasRep: List(Sym(225)) deps: List(Sym(0), Sym(60), Sym(181), Sym(196), Sym(224), Sym(225))
AliasRep: List(Sym(229), Sym(230), Sym(231)) deps: List(Sym(0), Sym(60), Sym(181), Sym(196), Sym(228), Sym(229), Sym(230), Sym(231))
AliasRep: List(Sym(260)) deps: List(Sym(260))
AliasRep: List(Sym(283), Sym(284), Sym(285)) deps: List(Sym(282), Sym(283), Sym(284), Sym(285))
AliasRep: List(Sym(287), Sym(288)) deps: List(Sym(287), Sym(288))
AliasRep: List(Sym(281)) deps: List(Sym(265), Sym(280), Sym(281), Sym(282), Sym(287))
AliasRep: List(Sym(249)) deps: List(Sym(254), Sym(294), Sym(295))
AliasRep: List(Sym(248), Sym(300)) deps: List(Sym(0), Sym(60), Sym(237), Sym(248), Sym(300))
AliasRep: List(Sym(319), Sym(313)) deps: List(Sym(319))
AliasRep: List(Sym(327), Sym(313)) deps: List(Sym(326), Sym(327))
AliasRep: List(Sym(311)) deps: List(Sym(318), Sym(335))
AliasRep: List(Sym(358), Sym(344)) deps: List(Sym(358))
AliasRep: List(Sym(361)) deps: List(Sym(358), Sym(360), Sym(361))
AliasRep: List(Sym(367)) deps: List(Sym(0), Sym(60), Sym(237), Sym(340), Sym(367))
AliasRep: List(Sym(375), Sym(376), Sym(377)) deps: List(Sym(0), Sym(60), Sym(237), Sym(340), Sym(345), Sym(373), Sym(374), Sym(375), Sym(376), Sym(377))
AliasRep: List(Sym(393), Sym(387)) deps: List(Sym(393))
AliasRep: List(Sym(401), Sym(387)) deps: List(Sym(400), Sym(401))
AliasRep: List(Sym(386)) deps: List(Sym(392), Sym(409))
AliasRep: List(Sym(416)) deps: List(Sym(416))
AliasRep: List(Sym(428), Sym(429)) deps: List(Sym(415), Sym(419), Sym(428), Sym(429))
AliasRep: List(Sym(444)) deps: List(Sym(443), Sym(444))
AliasRep: List(Sym(418), Sym(452)) deps: List(Sym(415), Sym(419), Sym(423), Sym(451), Sym(452))
AliasRep: List(Sym(456), Sym(457), Sym(458)) deps: List(Sym(415), Sym(419), Sym(423), Sym(455), Sym(456), Sym(457), Sym(458))
AliasRep: List(Sym(487)) deps: List(Sym(487))
AliasRep: List(Sym(510), Sym(511), Sym(512)) deps: List(Sym(509), Sym(510), Sym(511), Sym(512))
AliasRep: List(Sym(514), Sym(515)) deps: List(Sym(514), Sym(515))
AliasRep: List(Sym(508)) deps: List(Sym(492), Sym(507), Sym(508), Sym(509), Sym(514))
AliasRep: List(Sym(476)) deps: List(Sym(481), Sym(521), Sym(522))
AliasRep: List(Sym(475), Sym(527)) deps: List(Sym(415), Sym(464), Sym(475), Sym(527))
AliasRep: List(Sym(567)) deps: List(Sym(566), Sym(567))
AliasRep: List(Sym(592), Sym(593)) deps: List(Sym(415), Sym(464), Sym(583), Sym(592), Sym(593))
AliasRep: List(Sym(608)) deps: List(Sym(607), Sym(608))
AliasRep: List(Sym(616)) deps: List(Sym(415), Sym(464), Sym(583), Sym(587), Sym(615), Sym(616))
AliasRep: List(Sym(620), Sym(621), Sym(622)) deps: List(Sym(415), Sym(464), Sym(583), Sym(587), Sym(619), Sym(620), Sym(621), Sym(622))
AliasRep: List(Sym(651)) deps: List(Sym(651))
AliasRep: List(Sym(674), Sym(675), Sym(676)) deps: List(Sym(673), Sym(674), Sym(675), Sym(676))
AliasRep: List(Sym(678), Sym(679)) deps: List(Sym(678), Sym(679))
AliasRep: List(Sym(672)) deps: List(Sym(656), Sym(671), Sym(672), Sym(673), Sym(678))
AliasRep: List(Sym(640)) deps: List(Sym(645), Sym(685), Sym(686))
AliasRep: List(Sym(639), Sym(691)) deps: List(Sym(415), Sym(464), Sym(628), Sym(639), Sym(691))
AliasRep: List(Sym(709), Sym(703)) deps: List(Sym(709))
AliasRep: List(Sym(717), Sym(703)) deps: List(Sym(716), Sym(717))
AliasRep: List(Sym(702)) deps: List(Sym(708), Sym(725))
AliasRep: List(Sym(748), Sym(734)) deps: List(Sym(748))
AliasRep: List(Sym(751)) deps: List(Sym(748), Sym(750), Sym(751))
AliasRep: List(Sym(757)) deps: List(Sym(415), Sym(464), Sym(628), Sym(730), Sym(757))
AliasRep: List(Sym(765), Sym(766), Sym(767)) deps: List(Sym(415), Sym(464), Sym(628), Sym(730), Sym(735), Sym(763), Sym(764), Sym(765), Sym(766), Sym(767))
AliasRep: List(Sym(783), Sym(777)) deps: List(Sym(783))
AliasRep: List(Sym(791), Sym(777)) deps: List(Sym(790), Sym(791))
AliasRep: List(Sym(776)) deps: List(Sym(782), Sym(799))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdateOptVar extends ((Int)=>(Unit)) {
def apply(x414:Int): Unit = {
val x415 = new HashMap[Int,Int](1)
var x416 = 1
x416 = 2
val x418 = x416
val x419 = x415.table
val x420 = x419.length
val x5 = 2.hashCode
val x6 = x5.toLong
val x7 = x6 >>> 20
val x8 = x6 >>> 12
val x9 = x7 ^ x8
val x10 = x9 ^ x6
val x11 = x10 >>> 7
val x12 = x10 ^ x11
val x13 = x10 >>> 4
val x14 = x12 ^ x13
val x15 = x14.toInt
val x421 = x420 - 1
val x422 = x15 & x421
val x423 = x419(x422)
var x424 = x423
val x425 = x415.size
val x426 = x424
val x427 = x426 == null
val x431 = x425 + 1
if (x427) {
val x428 = new Entry(2, x418)
val x429 = x419(x422)
x419(x422) = x428
x415.size = x431

} else {
while ({
val x434 = x424
val x435 = x434.hasNext
val x441 = if (x435) {
val x436 = x424
val x437 = x436.key
val x438 = x437 != 2

x438
} else false

x441
}) {
val x443 = x424
val x444 = x443.next
x424 = x444
()
}
val x448 = x424
val x449 = x448.key
val x450 = x449 == 2
if (x450) {
val x451 = x424
val x452 = x451.value
x451.value = x418

} else {
val x455 = x424
val x456 = new Entry(2, x418)
val x457 = x455.next
val x458 = x455.hasNext
x455.next = x456
x415.size = x431

}

}
val x465 = x415.table
val x466 = x415.threshold
val x467 = x415.MAXIMUM_CAPACITY
val x468 = x415.size
val x469 = x468 >= x466
val x68 = scala.Int.MaxValue
if (x469) {
val x470 = x465.length
val x471 = x470 == x467
if (x471) {
x415.threshold = x68

} else {
val x474 = 2 * x470
val x475 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x474)
var x476 = 0
val x505 = x474 - 1
while ({
val x477 = x476
val x478 = x465.length
val x479 = x477 < x478
x479
}) {
val x481 = x476
val x482 = x465(x481)
var x483 = x482
val x484 = x483
val x485 = x484 != null
if (x485) {
val x486 = x476
val x487 = x465(x486)
x465(x486) = null
while ({
val x489 = x483
val x490 = x489 != null
x490
}) {
val x492 = x483
val x493 = x492.key
val x507 = x483
val x508 = x507.next
val x509 = x483
val x494 = x493.hashCode
val x495 = x494.toLong
val x496 = x495 >>> 20
val x497 = x495 >>> 12
val x498 = x496 ^ x497
val x499 = x498 ^ x495
val x500 = x499 >>> 7
val x501 = x499 ^ x500
val x502 = x499 >>> 4
val x503 = x501 ^ x502
val x504 = x503.toInt
val x506 = x504 & x505
val x510 = x475(x506)
val x511 = x509.next
val x512 = x509.hasNext
x509.next = x510
val x514 = x483
val x515 = x475(x506)
x475(x506) = x514
x483 = x508
()
}

} else {
()
}
val x522 = x476
val x523 = x522 + 1
x476 = x523
()
}
val x527 = x415.table
x415.table = x475
val x529 = x415.loadFactor
val x530 = x529 * x474
val x531 = x530.asInstanceOf[Int]
x415.threshold = x531

}

} else {
()
}
val x537 = x416
val x538 = x415.table
val x550 = x538.length
val x539 = x537.hashCode
val x540 = x539.toLong
val x541 = x540 >>> 20
val x542 = x540 >>> 12
val x543 = x541 ^ x542
val x544 = x543 ^ x540
val x545 = x544 >>> 7
val x546 = x544 ^ x545
val x547 = x544 >>> 4
val x548 = x546 ^ x547
val x549 = x548.toInt
val x551 = x550 - 1
val x552 = x549 & x551
val x553 = x538(x552)
var x554 = x553
val x555 = x554
val x556 = x555 == null
val x154 = None
val x580 = if (x556) {
x154
} else {
while ({
val x557 = x554
val x558 = x557.hasNext
val x564 = if (x558) {
val x559 = x554
val x560 = x559.key
val x561 = x560 != x537

x561
} else false

x564
}) {
val x566 = x554
val x567 = x566.next
x554 = x567
()
}
val x571 = x554
val x572 = x571.key
val x573 = x572 == x537
val x578 = if (x573) {
val x574 = x554
val x575 = x574.value
val x576 = Some(x575)
x576
} else {
x154
}
x578
}
val x581 = x580.get
val x583 = x415.table
val x584 = x583.length
val x182 = 3.hashCode
val x183 = x182.toLong
val x184 = x183 >>> 20
val x185 = x183 >>> 12
val x186 = x184 ^ x185
val x187 = x186 ^ x183
val x188 = x187 >>> 7
val x189 = x187 ^ x188
val x190 = x187 >>> 4
val x191 = x189 ^ x190
val x192 = x191.toInt
val x585 = x584 - 1
val x586 = x192 & x585
val x587 = x583(x586)
var x588 = x587
val x589 = x415.size
val x590 = x588
val x591 = x590 == null
val x582 = x581 + 1
val x595 = x589 + 1
if (x591) {
val x592 = new Entry(3, x582)
val x593 = x583(x586)
x583(x586) = x592
x415.size = x595

} else {
while ({
val x598 = x588
val x599 = x598.hasNext
val x605 = if (x599) {
val x600 = x588
val x601 = x600.key
val x602 = x601 != 3

x602
} else false

x605
}) {
val x607 = x588
val x608 = x607.next
x588 = x608
()
}
val x612 = x588
val x613 = x612.key
val x614 = x613 == 3
if (x614) {
val x615 = x588
val x616 = x615.value
x615.value = x582

} else {
val x619 = x588
val x620 = new Entry(3, x582)
val x621 = x619.next
val x622 = x619.hasNext
x619.next = x620
x415.size = x595

}

}
val x629 = x415.table
val x630 = x415.threshold
val x631 = x415.MAXIMUM_CAPACITY
val x632 = x415.size
val x633 = x632 >= x630
if (x633) {
val x634 = x629.length
val x635 = x634 == x631
if (x635) {
x415.threshold = x68

} else {
val x638 = 2 * x634
val x639 = new Array[scala.virtualization.lms.epfl.test12.Entry[Int, Int]](x638)
var x640 = 0
val x669 = x638 - 1
while ({
val x641 = x640
val x642 = x629.length
val x643 = x641 < x642
x643
}) {
val x645 = x640
val x646 = x629(x645)
var x647 = x646
val x648 = x647
val x649 = x648 != null
if (x649) {
val x650 = x640
val x651 = x629(x650)
x629(x650) = null
while ({
val x653 = x647
val x654 = x653 != null
x654
}) {
val x656 = x647
val x657 = x656.key
val x671 = x647
val x672 = x671.next
val x673 = x647
val x658 = x657.hashCode
val x659 = x658.toLong
val x660 = x659 >>> 20
val x661 = x659 >>> 12
val x662 = x660 ^ x661
val x663 = x662 ^ x659
val x664 = x663 >>> 7
val x665 = x663 ^ x664
val x666 = x663 >>> 4
val x667 = x665 ^ x666
val x668 = x667.toInt
val x670 = x668 & x669
val x674 = x639(x670)
val x675 = x673.next
val x676 = x673.hasNext
x673.next = x674
val x678 = x647
val x679 = x639(x670)
x639(x670) = x678
x647 = x672
()
}

} else {
()
}
val x686 = x640
val x687 = x686 + 1
x640 = x687
()
}
val x691 = x415.table
x415.table = x639
val x693 = x415.loadFactor
val x694 = x693 * x638
val x695 = x694.asInstanceOf[Int]
x415.threshold = x695

}

} else {
()
}
val x701 = x415.table
var x702 = 0
val x312 = null.asInstanceOf[scala.virtualization.lms.epfl.test12.Entry[Int, Int]]
var x703 = x312
while ({
val x704 = x702
val x705 = x701.length
val x706 = x704 < x705
x706
}) {
val x708 = x702
val x709 = x701(x708)
val x710 = x709 != null
if (x710) {
x703 = x709
println(x709)
while ({
val x713 = x703
val x714 = x713.hasNext
x714
}) {
val x716 = x703
val x717 = x716.next
x703 = x717
val x719 = x703
println(x719)

}

} else {
()
}
val x725 = x702
val x726 = x725 + 1
x702 = x726
()
}
val x730 = x415.table
val x731 = x730.length
var x734 = x312
val x732 = x731 - 1
val x733 = x15 & x732
val x735 = x730(x733)
var x736 = x735
val x737 = x736
val x738 = x737 != null
if (x738) {
while ({
val x739 = x736
val x740 = x739.hasNext
val x746 = if (x740) {
val x741 = x736
val x742 = x741.key
val x743 = x742 != 2

x743
} else false

x746
}) {
val x748 = x736
x734 = x748
val x750 = x736
val x751 = x750.next
x736 = x751
()
}
val x755 = x734
val x756 = x755 == null
if (x756) {
val x757 = x730(x733)
x730(x733) = null

} else {
val x760 = x736
val x761 = x760.key
val x762 = x761 == 2
if (x762) {
val x763 = x734
val x764 = x736
val x765 = x764.next
val x766 = x763.next
val x767 = x763.hasNext
x763.next = x765

} else {
()
}

}

} else {
()
}
val x775 = x415.table
var x776 = 0
var x777 = x312
while ({
val x778 = x776
val x779 = x775.length
val x780 = x778 < x779
x780
}) {
val x782 = x776
val x783 = x775(x782)
val x784 = x783 != null
if (x784) {
x777 = x783
println(x783)
while ({
val x787 = x777
val x788 = x787.hasNext
x788
}) {
val x790 = x777
val x791 = x790.next
x777 = x791
val x793 = x777
println(x793)

}

} else {
()
}
val x799 = x776
val x800 = x799 + 1
x776 = x800
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
