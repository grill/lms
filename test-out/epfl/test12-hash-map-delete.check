/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapDelete extends ((Int)=>(Unit)) {
def apply(x168:Int): Unit = {
val x169 = new HashMap[Int,Int](200)
val x170 = x169.table
val x172 = x169.size
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x178 = (((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt) & ((x170.length) - 1)
var x180:Entry[Int, Int] = (x170(x178))
if (((x180) == null)) {
val x184 = new Entry(1, 2)
x170(x178) = x184
val x186 = x172 + 1
x169.size = x186
()
} else {
while ({
(if (((x180).hasNext)) {

(((x180).key) != 1)
} else false
)
}) {
x180 = ((x180).next)
()
}
val x203 = x180
if (((x203.key) == 1)) {
x203.value = 2
()
} else {
val x209 = new Entry(1, 2)
x203.next = x209
val x186 = x172 + 1
x169.size = x186
()
}
()
}
x169.resize()
val x219 = x169.table
val x64 = (2.hashCode).toLong
val x68 = ((x64 >>> 20) ^ (x64 >>> 12)) ^ x64
val x73 = ((x68 ^ (x68 >>> 7)) ^ (x68 >>> 4)).toInt
val x222 = x73 & ((x219.length) - 1)
var x224:Entry[Int, Int] = (x219(x222))
if (((x224) == null)) {
val x227 = new Entry(2, 3)
x219(x222) = x227
x169.size = ((x169.size) + 1)
()
} else {
while ({
(if (((x224).hasNext)) {

(((x224).key) != 2)
} else false
)
}) {
x224 = ((x224).next)
()
}
val x247 = x224
if (((x247.key) == 2)) {
x247.value = 3
()
} else {
val x253 = new Entry(2, 3)
x247.next = x253
x169.size = ((x169.size) + 1)
()
}
()
}
x169.resize()
val x266 = x169.size
println(x266)
val x268 = x169.table
var x272:Entry[Int, Int] = (null.asInstanceOf[Entry[Int, Int]])
val x271 = x73 & ((x268.length) - 1)
var x274:Entry[Int, Int] = (x268(x271))
if (((x274) != null)) {
while ({
(if (((x274).hasNext)) {

(((x274).key) != 2)
} else false
)
}) {
val x286 = x274
x272 = x286
x274 = (x286.next)
()
}
val x292 = x272
if ((x292 == null)) {
x268(x271) = null
val x295 = x266 - 1
x169.size = x295
()
} else {
val x298 = x274
if (((x298.key) == 2)) {
x292.next = (x298.next)
val x295 = x266 - 1
x169.size = x295
()
} else {
()
}
()
}
()
} else {
()
}
println((x169.size))
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
