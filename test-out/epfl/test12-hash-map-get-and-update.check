/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndUpdate extends ((Int)=>(Unit)) {
def apply(x154:Int): Unit = {
val x155 = new HashMap[Int,Int](200)
val x156 = x155.table
val x157 = x156(0)
val x158 = x155.size
val x159 = x155.loadFactor
val x160 = x155.MAXIMUM_CAPACITY
val x161 = x155.threshold
val x162 = x156.length
val x8 = 1.hashCode
val x9 = x8.toLong
val x10 = x9 >>> 20
val x11 = x9 >>> 12
val x12 = x10 ^ x11
val x13 = x12 ^ x9
val x14 = x13 >>> 7
val x15 = x13 ^ x14
val x16 = x13 >>> 4
val x17 = x15 ^ x16
val x18 = x17.toInt
val x163 = x162 - 1
val x164 = x18 & x163
val x165 = x156(x164)
var x166: Entry[Int, Int] = x165
val x168 = x166
val x169 = x168 == null
if (x169) {
val x170 = new Entry(1, 2)
x156(x164) = x170
val x172 = x158 + 1
x155.size = x172

} else {
while ({
val x175 = x166
val x176 = x175.hasNext
val x182 = if (x176) {
val x177 = x166
val x178 = x177.key
val x179 = x178 != 1

x179
} else false

x182
}) {
val x184 = x166
val x185 = x184.next
x166 = x185
()
}
val x189 = x166
val x190 = x189.key
val x191 = x190 == 1
if (x191) {
val x192 = x189.value
x189.value = 2

} else {
val x195 = new Entry(1, 2)
val x196 = x189.next
val x197 = x189.hasNext
x189.next = x195
val x172 = x158 + 1
x155.size = x172

}

}
val x204 = x155.size
val x205 = x204 >= x161
if (x205) {
val x206 = x156.length
val x207 = x206 == x160
if (x207) {
val x64 = scala.Int.MaxValue
x155.threshold = x64

} else {
val x210 = 2 * x206
val x211 = new Array[Entry[Int, Int]](x210)
var x212: Int = 0
val x240 = x210 - 1
while ({
val x213 = x212
val x214 = x156.length
val x215 = x213 < x214
x215
}) {
val x217 = x212
val x218 = x156(x217)
var x219: Entry[Int, Int] = x218
val x221 = x219
val x222 = x221 != null
if (x222) {
x156(x217) = null
while ({
val x224 = x219
val x225 = x224 != null
x225
}) {
val x227 = x219
val x228 = x227.key
val x242 = x227.next
val x229 = x228.hashCode
val x230 = x229.toLong
val x231 = x230 >>> 20
val x232 = x230 >>> 12
val x233 = x231 ^ x232
val x234 = x233 ^ x230
val x235 = x234 >>> 7
val x236 = x234 ^ x235
val x237 = x234 >>> 4
val x238 = x236 ^ x237
val x239 = x238.toInt
val x241 = x239 & x240
val x243 = x211(x241)
val x244 = x227.hasNext
x227.next = x243
x211(x241) = x227
x219 = x242
()
}

} else {
()
}
val x252 = x217 + 1
x212 = x252
()
}
x155.table = x211
val x257 = x159 * x210
val x258 = x257.asInstanceOf[Int]
x155.threshold = x258

}

} else {
()
}
val x264 = x155.table
val x265 = x264.length
val x266 = x265 - 1
val x267 = x18 & x266
val x268 = x264(x267)
var x269: Entry[Int, Int] = x268
val x270 = x269
val x271 = x270 == null
val x294 = if (x271) {
val x129 = None
x129
} else {
while ({
val x272 = x269
val x273 = x272.hasNext
val x279 = if (x273) {
val x274 = x269
val x275 = x274.key
val x276 = x275 != 1

x276
} else false

x279
}) {
val x281 = x269
val x282 = x281.next
x269 = x282
()
}
val x286 = x269
val x287 = x286.key
val x288 = x287 == 1
val x292 = if (x288) {
val x289 = x286.value
val x290 = Some(x289)
x290
} else {
val x129 = None
x129
}
x292
}
println(x294)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
