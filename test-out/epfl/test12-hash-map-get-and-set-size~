NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(0)),Summary(false,false,false,false,false,List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Nested: WrappedArray(Sym(1)) Def: HashMapGetSize(Sym(0))
Context: List(Sym(0), Sym(1))
x: NewHashMap(Int,Int) u.p: List() p: List(Sym(1))
x: HashMapGetSize(Sym(0)) u.p: List() p: List(Sym(1))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(0)),Summary(false,false,false,false,false,List(Sym(1)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(2)),Summary(true,true,false,false,false,List(),List(),List(),List(),List()),List())
Nested: WrappedArray(Sym(0)) Def: HashMapGetSize(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3))
x: NewHashMap(Int,Int) u.p: List() p: List(Sym(0))
x: HashMapGetSize(Sym(0)) u.p: List() p: List(Sym(0))
x: HashMapGetSize(Sym(0)) u.p: List(Sym(1)) p: List(Sym(0))
x: PrintLn(Sym(2)) u.p: List() p: List(Sym(0))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(0)),Summary(false,false,false,false,false,List(Sym(0)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Write: WrappedArray(Sym(4))Def: HashMapSetSize(Sym(0),Const(3))
NestedDeps: List()
Reflect: Reflect(HashMapSetSize(Sym(0),Const(3)),Summary(false,false,false,false,false,List(),List(Sym(0)),List(Sym(0)),List(Sym(4)),List(Sym(4))),List(Sym(0), Sym(4)))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(0)),Summary(false,false,false,false,false,List(),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
Nested: WrappedArray(Sym(1)) Def: HashMapGetSize(Sym(0))
Context: List(Sym(0), Sym(1), Sym(2), Sym(3), Sym(4), Sym(5))
x: NewHashMap(Int,Int) u.p: List() p: List(Sym(1))
x: HashMapGetSize(Sym(0)) u.p: List() p: List(Sym(1))
x: HashMapGetSize(Sym(0)) u.p: List(Sym(1)) p: List(Sym(1))
x: PrintLn(Sym(2)) u.p: List() p: List(Sym(1))
x: HashMapGetSize(Sym(0)) u.p: List(Sym(0)) p: List(Sym(1))
x: HashMapSetSize(Sym(0),Const(3)) u.p: List() p: List(Sym(1))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(0)),Summary(false,false,false,false,false,List(Sym(1)),List(Sym(0)),List(Sym(0)),List(),List()),List(Sym(0)))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(2)),Summary(true,true,false,false,false,List(),List(),List(),List(),List()),List(Sym(3)))
NestedDeps: List()
Reflect: Reflect(NewHashMap(Int,Int),Summary(false,false,false,false,true,List(),List(),List(),List(),List()),List())
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(8)),Summary(false,false,false,false,false,List(),List(Sym(8)),List(Sym(8)),List(),List()),List(Sym(8)))
Nested: WrappedArray(Sym(9)) Def: HashMapGetSize(Sym(8))
Context: List(Sym(8), Sym(9))
x: NewHashMap(Int,Int) u.p: List() p: List(Sym(9))
x: HashMapGetSize(Sym(8)) u.p: List() p: List(Sym(9))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(8)),Summary(false,false,false,false,false,List(Sym(9)),List(Sym(8)),List(Sym(8)),List(),List()),List(Sym(8)))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(10)),Summary(true,true,false,false,false,List(),List(),List(),List(),List()),List())
Nested: WrappedArray(Sym(8)) Def: HashMapGetSize(Sym(8))
Context: List(Sym(8), Sym(9), Sym(10), Sym(11))
x: NewHashMap(Int,Int) u.p: List() p: List(Sym(8))
x: HashMapGetSize(Sym(8)) u.p: List() p: List(Sym(8))
x: HashMapGetSize(Sym(8)) u.p: List(Sym(9)) p: List(Sym(8))
x: PrintLn(Sym(10)) u.p: List() p: List(Sym(8))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(8)),Summary(false,false,false,false,false,List(Sym(8)),List(Sym(8)),List(Sym(8)),List(),List()),List(Sym(8)))
Write: WrappedArray(Sym(12))Def: HashMapSetSize(Sym(8),Const(3))
NestedDeps: List()
Reflect: Reflect(HashMapSetSize(Sym(8),Const(3)),Summary(false,false,false,false,false,List(),List(Sym(8)),List(Sym(8)),List(Sym(12)),List(Sym(12))),List(Sym(8), Sym(12)))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(8)),Summary(false,false,false,false,false,List(),List(Sym(8)),List(Sym(8)),List(),List()),List(Sym(8)))
Nested: WrappedArray(Sym(9)) Def: HashMapGetSize(Sym(8))
Context: List(Sym(8), Sym(9), Sym(10), Sym(11), Sym(12), Sym(13))
x: NewHashMap(Int,Int) u.p: List() p: List(Sym(9))
x: HashMapGetSize(Sym(8)) u.p: List() p: List(Sym(9))
x: HashMapGetSize(Sym(8)) u.p: List(Sym(9)) p: List(Sym(9))
x: PrintLn(Sym(10)) u.p: List() p: List(Sym(9))
x: HashMapGetSize(Sym(8)) u.p: List(Sym(8)) p: List(Sym(9))
x: HashMapSetSize(Sym(8),Const(3)) u.p: List() p: List(Sym(9))
NestedDeps: List()
Reflect: Reflect(HashMapGetSize(Sym(8)),Summary(false,false,false,false,false,List(Sym(9)),List(Sym(8)),List(Sym(8)),List(),List()),List(Sym(8)))
NestedDeps: List()
Reflect: Reflect(PrintLn(Sym(10)),Summary(true,true,false,false,false,List(),List(),List(),List(),List()),List(Sym(11)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapGetAndSetSize extends ((Int)=>(Unit)) {
def apply(x7:Int): Unit = {
val x8 = new HashMap[Int,Int]()
val x9 = x8.size
val x10 = x8.size
println(x10)
val x12 = x8.size
x8.size = 3
println(x10)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
