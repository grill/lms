/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapComplex extends ((Int)=>(Unit)) {
def apply(x630:Int): Unit = {
val x631 = new HashMap[Int,Int](1)
val x632 = x631.table
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x18 = ((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt
val x640 = x18 & ((x632.length) - 1)
var x642:Entry[Int, Int] = (x632(x640))
val x648 = (x631.size) + 1
if (((x642) == null)) {
val x646 = new Entry(1, 2)
x632(x640) = x646
x631.size = x648
()
} else {
while ({
(if (((x642).hasNext)) {

(((x642).key) != 1)
} else false
)
}) {
x642 = ((x642).next)
()
}
val x665 = x642
if (((x665.key) == 1)) {
x665.value = 2
()
} else {
val x671 = new Entry(1, 2)
x665.next = x671
x631.size = x648
()
}
()
}
x631.resize()
val x681 = x631.table
val x64 = (2.hashCode).toLong
val x68 = ((x64 >>> 20) ^ (x64 >>> 12)) ^ x64
val x684 = (((x68 ^ (x68 >>> 7)) ^ (x68 >>> 4)).toInt) & ((x681.length) - 1)
var x686:Entry[Int, Int] = (x681(x684))
if (((x686) == null)) {
val x689 = new Entry(2, 3)
x681(x684) = x689
x631.size = ((x631.size) + 1)
()
} else {
while ({
(if (((x686).hasNext)) {

(((x686).key) != 2)
} else false
)
}) {
x686 = ((x686).next)
()
}
val x709 = x686
if (((x709.key) == 2)) {
x709.value = 3
()
} else {
val x715 = new Entry(2, 3)
x709.next = x715
x631.size = ((x631.size) + 1)
()
}
()
}
x631.resize()
val x728 = x631.table
var x733:Entry[Int, Int] = (x728((x18 & ((x728.length) - 1))))
val x127 = None
val x758 = if (((x733) == null)) {
x127
} else {
while ({
(if (((x733).hasNext)) {

(((x733).key) != 1)
} else false
)
}) {
x733 = ((x733).next)
()
}
val x750 = x733
(if (((x750.key) == 1)) {
while ({
(if (((x733).hasNext)) {

(((x733).key) != 1)
} else false
)
}) {
x733 = ((x733).next)
()
}
val x750 = x733
(Some((x750.value)))
} else {
x127
})
}
val x763 = x18 & ((x728.length) - 1)
var x765:Entry[Int, Int] = (x728(x763))
val x760 = (x758.get) + 1
if (((x765) == null)) {
val x768 = new Entry(1, x760)
x728(x763) = x768
x631.size = ((x631.size) + 1)
()
} else {
while ({
(if (((x765).hasNext)) {

(((x765).key) != 1)
} else false
)
}) {
x765 = ((x765).next)
()
}
val x788 = x765
if (((x788.key) == 1)) {
x788.value = x760
()
} else {
val x794 = new Entry(1, x760)
x788.next = x794
x631.size = ((x631.size) + 1)
()
}
()
}
x631.resize()
val x807 = x631.table
var x808:Int = 0
val x201 = null.asInstanceOf[Entry[Int, Int]]
var x809:Entry[Int, Int] = x201
while ({
((x808) < (x807.length))
}) {
val x814 = x808
val x815 = x807(x814)
if ((x815 != null)) {
x809 = x815
println(x815)
while ({
((x809).hasNext)
}) {
x809 = ((x809).next)
println((x809))
()
}
()
} else {
()
}
x808 = (x814 + 1)
()
}
var x835:Int = 0
var x836:Entry[Int, Int] = x201
while ({
((x835) < (x807.length))
}) {
val x841 = x835
val x842 = x807(x841)
if ((x842 != null)) {
x836 = x842
val x845 = x842.key
val x846 = x631.table
val x849 = (x845.hashCode).toLong
val x853 = ((x849 >>> 20) ^ (x849 >>> 12)) ^ x849
val x860 = (((x853 ^ (x853 >>> 7)) ^ (x853 >>> 4)).toInt) & ((x846.length) - 1)
var x862:Entry[Int, Int] = (x846(x860))
if (((x862) == null)) {
val x866 = new Entry(x845, 0)
x846(x860) = x866
x631.size = ((x631.size) + 1)
()
} else {
while ({
(if (((x862).hasNext)) {

(((x862).key) != x845)
} else false
)
}) {
x862 = ((x862).next)
()
}
val x886 = x862
if (((x886.key) == x845)) {
x886.value = 0
()
} else {
val x892 = new Entry(x845, 0)
x886.next = x892
x631.size = ((x631.size) + 1)
()
}
()
}
x631.resize()
while ({
((x836).hasNext)
}) {
x836 = ((x836).next)
val x912 = (x836).key
val x913 = x631.table
val x916 = (x912.hashCode).toLong
val x920 = ((x916 >>> 20) ^ (x916 >>> 12)) ^ x916
val x927 = (((x920 ^ (x920 >>> 7)) ^ (x920 >>> 4)).toInt) & ((x913.length) - 1)
var x929:Entry[Int, Int] = (x913(x927))
if (((x929) == null)) {
val x933 = new Entry(x912, 0)
x913(x927) = x933
x631.size = ((x631.size) + 1)
()
} else {
while ({
(if (((x929).hasNext)) {

(((x929).key) != x912)
} else false
)
}) {
x929 = ((x929).next)
()
}
val x953 = x929
if (((x953.key) == x912)) {
x953.value = 0
()
} else {
val x959 = new Entry(x912, 0)
x953.next = x959
x631.size = ((x631.size) + 1)
()
}
()
}
x631.resize()
()
}
()
} else {
()
}
x835 = (x841 + 1)
()
}
var x980:Int = 0
var x981:Entry[Int, Int] = x201
while ({
((x980) < (x807.length))
}) {
val x986 = x980
val x987 = x807(x986)
if ((x987 != null)) {
x981 = x987
println(x987)
while ({
((x981).hasNext)
}) {
x981 = ((x981).next)
println((x981))
()
}
()
} else {
()
}
x980 = (x986 + 1)
()
}
var x1007:Int = 0
var x1008:Entry[Int, Int] = x201
while ({
((x1007) < (x807.length))
}) {
val x1013 = x1007
val x1014 = x807(x1013)
if ((x1014 != null)) {
x1008 = x1014
val x1017 = x1014.key
val x1018 = x631.table
var x1033:Entry[Int, Int] = x201
val x1021 = (x1017.hashCode).toLong
val x1025 = ((x1021 >>> 20) ^ (x1021 >>> 12)) ^ x1021
val x1032 = (((x1025 ^ (x1025 >>> 7)) ^ (x1025 >>> 4)).toInt) & ((x1018.length) - 1)
var x1036:Entry[Int, Int] = (x1018(x1032))
if (((x1036) != null)) {
while ({
(if (((x1036).hasNext)) {

(((x1036).key) != x1017)
} else false
)
}) {
val x1048 = x1036
x1033 = x1048
x1036 = (x1048.next)
()
}
val x1054 = x1033
if ((x1054 == null)) {
x1018(x1032) = null
x631.size = ((x631.size) - 1)
()
} else {
val x1061 = x1036
if (((x1061.key) == x1017)) {
x1054.next = (x1061.next)
x631.size = ((x631.size) - 1)
()
} else {
()
}
()
}
()
} else {
()
}
while ({
((x1008).hasNext)
}) {
x1008 = ((x1008).next)
val x1084 = (x1008).key
val x1085 = x631.table
var x1100:Entry[Int, Int] = x201
val x1088 = (x1084.hashCode).toLong
val x1092 = ((x1088 >>> 20) ^ (x1088 >>> 12)) ^ x1088
val x1099 = (((x1092 ^ (x1092 >>> 7)) ^ (x1092 >>> 4)).toInt) & ((x1085.length) - 1)
var x1103:Entry[Int, Int] = (x1085(x1099))
if (((x1103) != null)) {
while ({
(if (((x1103).hasNext)) {

(((x1103).key) != x1084)
} else false
)
}) {
val x1115 = x1103
x1100 = x1115
x1103 = (x1115.next)
()
}
val x1121 = x1100
if ((x1121 == null)) {
x1085(x1099) = null
x631.size = ((x631.size) - 1)
()
} else {
val x1128 = x1103
if (((x1128.key) == x1084)) {
x1121.next = (x1128.next)
x631.size = ((x631.size) - 1)
()
} else {
()
}
()
}
()
} else {
()
}
()
}
()
} else {
()
}
x1007 = (x1013 + 1)
()
}
val x547 = (3.hashCode).toLong
val x551 = ((x547 >>> 20) ^ (x547 >>> 12)) ^ x547
val x1154 = (((x551 ^ (x551 >>> 7)) ^ (x551 >>> 4)).toInt) & ((x807.length) - 1)
var x1156:Entry[Int, Int] = (x807(x1154))
if (((x1156) == null)) {
val x1159 = new Entry(3, 4)
x807(x1154) = x1159
x631.size = ((x631.size) + 1)
()
} else {
while ({
(if (((x1156).hasNext)) {

(((x1156).key) != 3)
} else false
)
}) {
x1156 = ((x1156).next)
()
}
val x1179 = x1156
if (((x1179.key) == 3)) {
x1179.value = 4
()
} else {
val x1185 = new Entry(3, 4)
x1179.next = x1185
x631.size = ((x631.size) + 1)
()
}
()
}
x631.resize()
val x1198 = x631.table
var x1199:Int = 0
var x1200:Entry[Int, Int] = x201
while ({
((x1199) < (x1198.length))
}) {
val x1205 = x1199
val x1206 = x1198(x1205)
if ((x1206 != null)) {
x1200 = x1206
println(x1206)
while ({
((x1200).hasNext)
}) {
x1200 = ((x1200).next)
println((x1200))
()
}
()
} else {
()
}
x1199 = (x1205 + 1)
()
}
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
