/*****************************************
  Emitting Generated Code                  
*******************************************/
class IntHashMapContains extends ((Int)=>(Unit)) {
def apply(x127:Int): Unit = {
val x128 = new HashMap[Int,Int](200)
val x129 = x128.table
val x131 = x128.size
val x9 = (1.hashCode).toLong
val x13 = ((x9 >>> 20) ^ (x9 >>> 12)) ^ x9
val x18 = ((x13 ^ (x13 >>> 7)) ^ (x13 >>> 4)).toInt
val x137 = x18 & ((x129.length) - 1)
var x139:Entry[Int, Int] = (x129(x137))
if (((x139) == null)) {
val x143 = new Entry(1, 2)
x129(x137) = x143
val x145 = x131 + 1
x128.size = x145
()
} else {
while ({
(if (((x139).hasNext)) {

(((x139).key) != 1)
} else false
)
}) {
x139 = ((x139).next)
()
}
val x162 = x139
if (((x162.key) == 1)) {
x162.value = 2
()
} else {
val x168 = new Entry(1, 2)
x162.next = x168
val x145 = x131 + 1
x128.size = x145
()
}
()
}
x128.resize()
val x178 = x128.table
var x183:Entry[Int, Int] = (x178((x18 & ((x178.length) - 1))))
val x204 = if (((x183) == null)) {
false
} else {
while ({
(if (((x183).hasNext)) {

(((x183).key) != 1)
} else false
)
}) {
x183 = ((x183).next)
()
}
(((x183).key) == 1)
}
println(x204)
val x91 = (0.hashCode).toLong
val x95 = ((x91 >>> 20) ^ (x91 >>> 12)) ^ x91
var x210:Entry[Int, Int] = (x178(((((x95 ^ (x95 >>> 7)) ^ (x95 >>> 4)).toInt) & ((x178.length) - 1))))
val x231 = if (((x210) == null)) {
false
} else {
while ({
(if (((x210).hasNext)) {

(((x210).key) != 0)
} else false
)
}) {
x210 = ((x210).next)
()
}
(((x210).key) == 0)
}
println(x231)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
